
ProjektZespolowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca90  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800cd30  0800cd30  0001cd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d04c  0800d04c  0001d04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d054  0800d054  0001d054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d058  0800d058  0001d058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800d05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004cc  24000074  0800d0d0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000540  0800d0d0  00020540  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002004b  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003286  00000000  00000000  000400ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001750  00000000  00000000  00043378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001618  00000000  00000000  00044ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392f9  00000000  00000000  000460e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f82e  00000000  00000000  0007f3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001696c5  00000000  00000000  0009ec07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002082cc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c28  00000000  00000000  0020831c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cd18 	.word	0x0800cd18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800cd18 	.word	0x0800cd18

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SCCB_Write>:
	}
	return 0;
}

int SCCB_Write(uint8_t reg_addrs, uint8_t data)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af04      	add	r7, sp, #16
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	//uint8_t buffer[2] = {reg_addrs, data};
	HAL_StatusTypeDef connectionStatus;
	connectionStatus = HAL_I2C_Mem_Write(_phi2c, (uint8_t)0x60, reg_addrs, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <SCCB_Write+0x60>)
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	b29a      	uxth	r2, r3
 800069c:	2364      	movs	r3, #100	; 0x64
 800069e:	9302      	str	r3, [sp, #8]
 80006a0:	2301      	movs	r3, #1
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	1dbb      	adds	r3, r7, #6
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2301      	movs	r3, #1
 80006aa:	2160      	movs	r1, #96	; 0x60
 80006ac:	f004 ff72 	bl	8005594 <HAL_I2C_Mem_Write>
 80006b0:	4603      	mov	r3, r0
 80006b2:	73fb      	strb	r3, [r7, #15]
	//connectionStatus = HAL_I2C_Master_Transmit(_phi2c, (uint8_t)0x60, buffer, 2, 100);
	if(connectionStatus == HAL_OK){
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d108      	bne.n	80006cc <SCCB_Write+0x48>
		HAL_UART_Transmit(_phuart, (uint8_t*)"1\r", strlen("1\r"), 100);
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <SCCB_Write+0x64>)
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	2202      	movs	r2, #2
 80006c2:	490a      	ldr	r1, [pc, #40]	; (80006ec <SCCB_Write+0x68>)
 80006c4:	f009 fbe4 	bl	8009e90 <HAL_UART_Transmit>
		return 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e007      	b.n	80006dc <SCCB_Write+0x58>
	}
	HAL_UART_Transmit(_phuart, (uint8_t*)"0\r", strlen("0\r"), 100);
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <SCCB_Write+0x64>)
 80006ce:	6818      	ldr	r0, [r3, #0]
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	2202      	movs	r2, #2
 80006d4:	4906      	ldr	r1, [pc, #24]	; (80006f0 <SCCB_Write+0x6c>)
 80006d6:	f009 fbdb 	bl	8009e90 <HAL_UART_Transmit>
	return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	24000094 	.word	0x24000094
 80006e8:	24000090 	.word	0x24000090
 80006ec:	0800cd30 	.word	0x0800cd30
 80006f0:	0800cd34 	.word	0x0800cd34

080006f4 <camera_Init>:

void camera_Init(I2C_HandleTypeDef *hi2c, DCMI_HandleTypeDef *dcmi)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	camera_setI2C(hi2c);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f844 	bl	800078c <camera_setI2C>
	camera_setDCMI(dcmi);
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f000 f851 	bl	80007ac <camera_setDCMI>
	camera_Reset();
 800070a:	f000 f807 	bl	800071c <camera_Reset>
	camera_StopDCMI();
 800070e:	f000 f82f 	bl	8000770 <camera_StopDCMI>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <camera_Reset>:

void camera_Reset()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	// power the camera
	HAL_GPIO_WritePin(PWDNPG1_GPIO_Port, PWDNPG1_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2102      	movs	r1, #2
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <camera_Reset+0x50>)
 8000726:	f004 fe8b 	bl	8005440 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f001 fbba 	bl	8001ea4 <HAL_Delay>
	// hardware reset
	HAL_GPIO_WritePin(RESETG0_GPIO_Port, RESETG0_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <camera_Reset+0x50>)
 8000736:	f004 fe83 	bl	8005440 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800073a:	2064      	movs	r0, #100	; 0x64
 800073c:	f001 fbb2 	bl	8001ea4 <HAL_Delay>
	HAL_GPIO_WritePin(RESETG0_GPIO_Port, RESETG0_Pin, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2101      	movs	r1, #1
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <camera_Reset+0x50>)
 8000746:	f004 fe7b 	bl	8005440 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800074a:	2064      	movs	r0, #100	; 0x64
 800074c:	f001 fbaa 	bl	8001ea4 <HAL_Delay>

	// reset registers to default
	SCCB_Write(0xff, 0x01);
 8000750:	2101      	movs	r1, #1
 8000752:	20ff      	movs	r0, #255	; 0xff
 8000754:	f7ff ff96 	bl	8000684 <SCCB_Write>
	SCCB_Write(0x12, 0x80);
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	2012      	movs	r0, #18
 800075c:	f7ff ff92 	bl	8000684 <SCCB_Write>
	HAL_Delay(250);
 8000760:	20fa      	movs	r0, #250	; 0xfa
 8000762:	f001 fb9f 	bl	8001ea4 <HAL_Delay>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	58021800 	.word	0x58021800

08000770 <camera_StopDCMI>:

	return pid;
}

void camera_StopDCMI(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	HAL_DCMI_Stop(_pdcmi);
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <camera_StopDCMI+0x18>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fd4d 	bl	8002218 <HAL_DCMI_Stop>
	HAL_Delay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f001 fb90 	bl	8001ea4 <HAL_Delay>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	24000098 	.word	0x24000098

0800078c <camera_setI2C>:

void camera_setI2C(I2C_HandleTypeDef *hi2c)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	_phi2c = hi2c;
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <camera_setI2C+0x1c>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6013      	str	r3, [r2, #0]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	24000094 	.word	0x24000094

080007ac <camera_setDCMI>:

void camera_setDCMI(DCMI_HandleTypeDef *dcmi)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	_pdcmi = dcmi;
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <camera_setDCMI+0x1c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	24000098 	.word	0x24000098

080007cc <camera_setUART>:

void camera_setUART(UART_HandleTypeDef *huart)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	_phuart = huart;
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <camera_setUART+0x1c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	24000090 	.word	0x24000090

080007ec <_write>:
		HAL_UART_Receive_IT(&huart2, data, 1);
	}
}
*/

int _write(int file, unsigned char *ptr, int len){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, ptr, len, HAL_MAX_DELAY);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <_write+0x28>)
 8000804:	f009 fb44 	bl	8009e90 <HAL_UART_Transmit>
	return len;
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	24000314 	.word	0x24000314

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f001 faaf 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 fa01 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 fc6f 	bl	8001108 <MX_GPIO_Init>
  MX_DMA_Init();
 800082a:	f000 fc3d 	bl	80010a8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800082e:	f000 fbef 	bl	8001010 <MX_USART3_UART_Init>
  MX_DCMI_Init();
 8000832:	f000 fa7d 	bl	8000d30 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000836:	f000 faaf 	bl	8000d98 <MX_I2C1_Init>
  MX_JPEG_Init();
 800083a:	f000 faed 	bl	8000e18 <MX_JPEG_Init>
  MX_USART2_UART_Init();
 800083e:	f000 fb9b 	bl	8000f78 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000842:	f000 fafd 	bl	8000e40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  camera_setUART(&huart2);
 8000846:	4878      	ldr	r0, [pc, #480]	; (8000a28 <main+0x210>)
 8000848:	f7ff ffc0 	bl	80007cc <camera_setUART>
  camera_Init(&hi2c1, &hdcmi);
 800084c:	4977      	ldr	r1, [pc, #476]	; (8000a2c <main+0x214>)
 800084e:	4878      	ldr	r0, [pc, #480]	; (8000a30 <main+0x218>)
 8000850:	f7ff ff50 	bl	80006f4 <camera_Init>
  HAL_Delay(10);
 8000854:	200a      	movs	r0, #10
 8000856:	f001 fb25 	bl	8001ea4 <HAL_Delay>

  HAL_TIM_Base_Start(&htim1);
 800085a:	4876      	ldr	r0, [pc, #472]	; (8000a34 <main+0x21c>)
 800085c:	f008 fc70 	bl	8009140 <HAL_TIM_Base_Start>
  //camera_ResolutionConfiguration(imgRes);
  //camera_configuration(OV2640_QVGA);
  HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f001 fb1f 	bl	8001ea4 <HAL_Delay>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2,RxBuff,RxBuff_SIZE);
 8000866:	2240      	movs	r2, #64	; 0x40
 8000868:	4973      	ldr	r1, [pc, #460]	; (8000a38 <main+0x220>)
 800086a:	486f      	ldr	r0, [pc, #444]	; (8000a28 <main+0x210>)
 800086c:	f00b f9db 	bl	800bc26 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000870:	4b72      	ldr	r3, [pc, #456]	; (8000a3c <main+0x224>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a72      	ldr	r2, [pc, #456]	; (8000a40 <main+0x228>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d04a      	beq.n	8000910 <main+0xf8>
 800087a:	4b70      	ldr	r3, [pc, #448]	; (8000a3c <main+0x224>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a71      	ldr	r2, [pc, #452]	; (8000a44 <main+0x22c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d045      	beq.n	8000910 <main+0xf8>
 8000884:	4b6d      	ldr	r3, [pc, #436]	; (8000a3c <main+0x224>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a6f      	ldr	r2, [pc, #444]	; (8000a48 <main+0x230>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d040      	beq.n	8000910 <main+0xf8>
 800088e:	4b6b      	ldr	r3, [pc, #428]	; (8000a3c <main+0x224>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a6e      	ldr	r2, [pc, #440]	; (8000a4c <main+0x234>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d03b      	beq.n	8000910 <main+0xf8>
 8000898:	4b68      	ldr	r3, [pc, #416]	; (8000a3c <main+0x224>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a6c      	ldr	r2, [pc, #432]	; (8000a50 <main+0x238>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d036      	beq.n	8000910 <main+0xf8>
 80008a2:	4b66      	ldr	r3, [pc, #408]	; (8000a3c <main+0x224>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a6b      	ldr	r2, [pc, #428]	; (8000a54 <main+0x23c>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d031      	beq.n	8000910 <main+0xf8>
 80008ac:	4b63      	ldr	r3, [pc, #396]	; (8000a3c <main+0x224>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a69      	ldr	r2, [pc, #420]	; (8000a58 <main+0x240>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d02c      	beq.n	8000910 <main+0xf8>
 80008b6:	4b61      	ldr	r3, [pc, #388]	; (8000a3c <main+0x224>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a68      	ldr	r2, [pc, #416]	; (8000a5c <main+0x244>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d027      	beq.n	8000910 <main+0xf8>
 80008c0:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <main+0x224>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a66      	ldr	r2, [pc, #408]	; (8000a60 <main+0x248>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d022      	beq.n	8000910 <main+0xf8>
 80008ca:	4b5c      	ldr	r3, [pc, #368]	; (8000a3c <main+0x224>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a65      	ldr	r2, [pc, #404]	; (8000a64 <main+0x24c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d01d      	beq.n	8000910 <main+0xf8>
 80008d4:	4b59      	ldr	r3, [pc, #356]	; (8000a3c <main+0x224>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a63      	ldr	r2, [pc, #396]	; (8000a68 <main+0x250>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d018      	beq.n	8000910 <main+0xf8>
 80008de:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <main+0x224>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a62      	ldr	r2, [pc, #392]	; (8000a6c <main+0x254>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d013      	beq.n	8000910 <main+0xf8>
 80008e8:	4b54      	ldr	r3, [pc, #336]	; (8000a3c <main+0x224>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a60      	ldr	r2, [pc, #384]	; (8000a70 <main+0x258>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d00e      	beq.n	8000910 <main+0xf8>
 80008f2:	4b52      	ldr	r3, [pc, #328]	; (8000a3c <main+0x224>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a5f      	ldr	r2, [pc, #380]	; (8000a74 <main+0x25c>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d009      	beq.n	8000910 <main+0xf8>
 80008fc:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <main+0x224>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a5d      	ldr	r2, [pc, #372]	; (8000a78 <main+0x260>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d004      	beq.n	8000910 <main+0xf8>
 8000906:	4b4d      	ldr	r3, [pc, #308]	; (8000a3c <main+0x224>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a5c      	ldr	r2, [pc, #368]	; (8000a7c <main+0x264>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d108      	bne.n	8000922 <main+0x10a>
 8000910:	4b4a      	ldr	r3, [pc, #296]	; (8000a3c <main+0x224>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b49      	ldr	r3, [pc, #292]	; (8000a3c <main+0x224>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f022 0208 	bic.w	r2, r2, #8
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	e007      	b.n	8000932 <main+0x11a>
 8000922:	4b46      	ldr	r3, [pc, #280]	; (8000a3c <main+0x224>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <main+0x224>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f022 0204 	bic.w	r2, r2, #4
 8000930:	601a      	str	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, (uint8_t*)"Koniec\n\r", strlen("Koniec\n\r"), 100);
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	2208      	movs	r2, #8
 8000936:	4952      	ldr	r1, [pc, #328]	; (8000a80 <main+0x268>)
 8000938:	483b      	ldr	r0, [pc, #236]	; (8000a28 <main+0x210>)
 800093a:	f009 faa9 	bl	8009e90 <HAL_UART_Transmit>


  int pwm_1=0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  int pwm_2 =0;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  char state = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	71fb      	strb	r3, [r7, #7]
    #
    # pwm wypelniane %
    # pi_pwm1.ChangeDutyCycle(speed)
	*/

	  if(recieve_flag)
 800094a:	4b4e      	ldr	r3, [pc, #312]	; (8000a84 <main+0x26c>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	b29b      	uxth	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0fa      	beq.n	800094a <main+0x132>
	  {
		  recieve_flag=0;
 8000954:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <main+0x26c>)
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]

		  memcpy(MainBuff,RxBuff,size_recieved);
 800095a:	4b4b      	ldr	r3, [pc, #300]	; (8000a88 <main+0x270>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b29b      	uxth	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	4935      	ldr	r1, [pc, #212]	; (8000a38 <main+0x220>)
 8000964:	4849      	ldr	r0, [pc, #292]	; (8000a8c <main+0x274>)
 8000966:	f00b fa33 	bl	800bdd0 <memcpy>
		  HAL_UARTEx_ReceiveToIdle_DMA(&huart2,RxBuff,RxBuff_SIZE);
 800096a:	2240      	movs	r2, #64	; 0x40
 800096c:	4932      	ldr	r1, [pc, #200]	; (8000a38 <main+0x220>)
 800096e:	482e      	ldr	r0, [pc, #184]	; (8000a28 <main+0x210>)
 8000970:	f00b f959 	bl	800bc26 <HAL_UARTEx_ReceiveToIdle_DMA>
		   __HAL_DMA_DISABLE_IT(&hdma_usart2_rx,DMA_IT_HT);
 8000974:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <main+0x224>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a31      	ldr	r2, [pc, #196]	; (8000a40 <main+0x228>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d04a      	beq.n	8000a14 <main+0x1fc>
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <main+0x224>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a30      	ldr	r2, [pc, #192]	; (8000a44 <main+0x22c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d045      	beq.n	8000a14 <main+0x1fc>
 8000988:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <main+0x224>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a2e      	ldr	r2, [pc, #184]	; (8000a48 <main+0x230>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d040      	beq.n	8000a14 <main+0x1fc>
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <main+0x224>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a2d      	ldr	r2, [pc, #180]	; (8000a4c <main+0x234>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d03b      	beq.n	8000a14 <main+0x1fc>
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <main+0x224>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a2b      	ldr	r2, [pc, #172]	; (8000a50 <main+0x238>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d036      	beq.n	8000a14 <main+0x1fc>
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <main+0x224>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a2a      	ldr	r2, [pc, #168]	; (8000a54 <main+0x23c>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d031      	beq.n	8000a14 <main+0x1fc>
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <main+0x224>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <main+0x240>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d02c      	beq.n	8000a14 <main+0x1fc>
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <main+0x224>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a27      	ldr	r2, [pc, #156]	; (8000a5c <main+0x244>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d027      	beq.n	8000a14 <main+0x1fc>
 80009c4:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <main+0x224>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <main+0x248>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d022      	beq.n	8000a14 <main+0x1fc>
 80009ce:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <main+0x224>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <main+0x24c>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d01d      	beq.n	8000a14 <main+0x1fc>
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <main+0x224>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a22      	ldr	r2, [pc, #136]	; (8000a68 <main+0x250>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d018      	beq.n	8000a14 <main+0x1fc>
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <main+0x224>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <main+0x254>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d013      	beq.n	8000a14 <main+0x1fc>
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <main+0x224>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <main+0x258>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00e      	beq.n	8000a14 <main+0x1fc>
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <main+0x224>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <main+0x25c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d009      	beq.n	8000a14 <main+0x1fc>
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <main+0x224>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <main+0x260>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d004      	beq.n	8000a14 <main+0x1fc>
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <main+0x224>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <main+0x264>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d13d      	bne.n	8000a90 <main+0x278>
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <main+0x224>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <main+0x224>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f022 0208 	bic.w	r2, r2, #8
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e03c      	b.n	8000aa0 <main+0x288>
 8000a26:	bf00      	nop
 8000a28:	24000314 	.word	0x24000314
 8000a2c:	2400015c 	.word	0x2400015c
 8000a30:	24000224 	.word	0x24000224
 8000a34:	240002c8 	.word	0x240002c8
 8000a38:	2400011c 	.word	0x2400011c
 8000a3c:	24000434 	.word	0x24000434
 8000a40:	40020010 	.word	0x40020010
 8000a44:	40020028 	.word	0x40020028
 8000a48:	40020040 	.word	0x40020040
 8000a4c:	40020058 	.word	0x40020058
 8000a50:	40020070 	.word	0x40020070
 8000a54:	40020088 	.word	0x40020088
 8000a58:	400200a0 	.word	0x400200a0
 8000a5c:	400200b8 	.word	0x400200b8
 8000a60:	40020410 	.word	0x40020410
 8000a64:	40020428 	.word	0x40020428
 8000a68:	40020440 	.word	0x40020440
 8000a6c:	40020458 	.word	0x40020458
 8000a70:	40020470 	.word	0x40020470
 8000a74:	40020488 	.word	0x40020488
 8000a78:	400204a0 	.word	0x400204a0
 8000a7c:	400204b8 	.word	0x400204b8
 8000a80:	0800cd38 	.word	0x0800cd38
 8000a84:	24000524 	.word	0x24000524
 8000a88:	24000526 	.word	0x24000526
 8000a8c:	2400009c 	.word	0x2400009c
 8000a90:	4b5f      	ldr	r3, [pc, #380]	; (8000c10 <main+0x3f8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4b5e      	ldr	r3, [pc, #376]	; (8000c10 <main+0x3f8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f022 0204 	bic.w	r2, r2, #4
 8000a9e:	601a      	str	r2, [r3, #0]
		  //HAL_UART_Receive_DMA(&huart2, data, 100);
		  //HAL_UART_Transmit(&huart2, data, strlen(data), 100);

		  printf("Recieved: %s\r\n",MainBuff);
 8000aa0:	495c      	ldr	r1, [pc, #368]	; (8000c14 <main+0x3fc>)
 8000aa2:	485d      	ldr	r0, [pc, #372]	; (8000c18 <main+0x400>)
 8000aa4:	f00b f9aa 	bl	800bdfc <iprintf>
		  //memcpy(MainBuff,0,size_recieved);

		 // printf("Recieved2: %c %d %d\r\n",state,pwm_1,pwm_2);


		  if(pwm_1>0)//do przodu
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	dd20      	ble.n	8000af0 <main+0x2d8>
		  {
			  HAL_GPIO_WritePin(MOTOR_1_GPIO_1_GPIO_Port, MOTOR_1_GPIO_1_Pin,	1);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab4:	4859      	ldr	r0, [pc, #356]	; (8000c1c <main+0x404>)
 8000ab6:	f004 fcc3 	bl	8005440 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_1_GPIO_2_GPIO_Port, MOTOR_1_GPIO_2_Pin,	0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac0:	4856      	ldr	r0, [pc, #344]	; (8000c1c <main+0x404>)
 8000ac2:	f004 fcbd 	bl	8005440 <HAL_GPIO_WritePin>

			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000.0*pwm_1/100.0);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	ee07 3a90 	vmov	s15, r3
 8000acc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ad0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8000bf8 <main+0x3e0>
 8000ad4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ad8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8000c00 <main+0x3e8>
 8000adc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ae0:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <main+0x408>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ae8:	ee17 2a90 	vmov	r2, s15
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
 8000aee:	e01f      	b.n	8000b30 <main+0x318>

		  }else // do tyłu
		  {
			  HAL_GPIO_WritePin(MOTOR_1_GPIO_1_GPIO_Port, MOTOR_1_GPIO_1_Pin,	0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af6:	4849      	ldr	r0, [pc, #292]	; (8000c1c <main+0x404>)
 8000af8:	f004 fca2 	bl	8005440 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_1_GPIO_2_GPIO_Port, MOTOR_1_GPIO_2_Pin,	1);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b02:	4846      	ldr	r0, [pc, #280]	; (8000c1c <main+0x404>)
 8000b04:	f004 fc9c 	bl	8005440 <HAL_GPIO_WritePin>

			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, -1000.0*pwm_1/100.0);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b12:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000c08 <main+0x3f0>
 8000b16:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b1a:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8000c00 <main+0x3e8>
 8000b1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b22:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <main+0x408>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b2a:	ee17 2a90 	vmov	r2, s15
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34

		  }

		  if(pwm_1>0)//do przodu
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dd20      	ble.n	8000b78 <main+0x360>
		  {
			  HAL_GPIO_WritePin(MOTOR_2_GPIO_1_GPIO_Port,  MOTOR_2_GPIO_1_Pin,	1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3c:	4837      	ldr	r0, [pc, #220]	; (8000c1c <main+0x404>)
 8000b3e:	f004 fc7f 	bl	8005440 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_2_GPIO_2_GPIO_Port, MOTOR_2_GPIO_2_Pin,	0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b48:	4836      	ldr	r0, [pc, #216]	; (8000c24 <main+0x40c>)
 8000b4a:	f004 fc79 	bl	8005440 <HAL_GPIO_WritePin>

			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000.0*pwm_2/100.0);
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	ee07 3a90 	vmov	s15, r3
 8000b54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b58:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000bf8 <main+0x3e0>
 8000b5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b60:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8000c00 <main+0x3e8>
 8000b64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b68:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <main+0x408>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b70:	ee17 2a90 	vmov	r2, s15
 8000b74:	639a      	str	r2, [r3, #56]	; 0x38
 8000b76:	e01f      	b.n	8000bb8 <main+0x3a0>

		   }else // do tyłu
		   {
				  HAL_GPIO_WritePin(MOTOR_2_GPIO_1_GPIO_Port, MOTOR_2_GPIO_1_Pin,	0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7e:	4827      	ldr	r0, [pc, #156]	; (8000c1c <main+0x404>)
 8000b80:	f004 fc5e 	bl	8005440 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(MOTOR_2_GPIO_2_GPIO_Port, MOTOR_2_GPIO_2_Pin,	1);
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8a:	4826      	ldr	r0, [pc, #152]	; (8000c24 <main+0x40c>)
 8000b8c:	f004 fc58 	bl	8005440 <HAL_GPIO_WritePin>

				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -1000.0*pwm_2/100.0);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	ee07 3a90 	vmov	s15, r3
 8000b96:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b9a:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8000c08 <main+0x3f0>
 8000b9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ba2:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8000c00 <main+0x3e8>
 8000ba6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000baa:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <main+0x408>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bb2:	ee17 2a90 	vmov	r2, s15
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
		   }
		  if(state == 'r')//jeżęli puszczono
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b72      	cmp	r3, #114	; 0x72
 8000bbc:	f47f aec5 	bne.w	800094a <main+0x132>
		  {

			  //soft stop
			  HAL_GPIO_WritePin(MOTOR_1_GPIO_1_GPIO_Port, MOTOR_1_GPIO_1_Pin,	0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc6:	4815      	ldr	r0, [pc, #84]	; (8000c1c <main+0x404>)
 8000bc8:	f004 fc3a 	bl	8005440 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_1_GPIO_2_GPIO_Port, MOTOR_1_GPIO_2_Pin,	0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <main+0x404>)
 8000bd4:	f004 fc34 	bl	8005440 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_2_GPIO_1_GPIO_Port, MOTOR_2_GPIO_1_Pin,	0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bde:	480f      	ldr	r0, [pc, #60]	; (8000c1c <main+0x404>)
 8000be0:	f004 fc2e 	bl	8005440 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MOTOR_2_GPIO_2_GPIO_Port, MOTOR_2_GPIO_2_Pin,	0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <main+0x40c>)
 8000bec:	f004 fc28 	bl	8005440 <HAL_GPIO_WritePin>
	  if(recieve_flag)
 8000bf0:	e6ab      	b.n	800094a <main+0x132>
 8000bf2:	bf00      	nop
 8000bf4:	f3af 8000 	nop.w
 8000bf8:	00000000 	.word	0x00000000
 8000bfc:	408f4000 	.word	0x408f4000
 8000c00:	00000000 	.word	0x00000000
 8000c04:	40590000 	.word	0x40590000
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	c08f4000 	.word	0xc08f4000
 8000c10:	24000434 	.word	0x24000434
 8000c14:	2400009c 	.word	0x2400009c
 8000c18:	0800cd44 	.word	0x0800cd44
 8000c1c:	58021000 	.word	0x58021000
 8000c20:	240002c8 	.word	0x240002c8
 8000c24:	58020400 	.word	0x58020400

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09c      	sub	sp, #112	; 0x70
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	224c      	movs	r2, #76	; 0x4c
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f00b f8d8 	bl	800bdec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2220      	movs	r2, #32
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00b f8d2 	bl	800bdec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f005 feb3 	bl	80069b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <SystemClock_Config+0x100>)
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	4a34      	ldr	r2, [pc, #208]	; (8000d28 <SystemClock_Config+0x100>)
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c5e:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <SystemClock_Config+0x100>)
 8000c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <SystemClock_Config+0x104>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c70:	4a2e      	ldr	r2, [pc, #184]	; (8000d2c <SystemClock_Config+0x104>)
 8000c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <SystemClock_Config+0x104>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c84:	bf00      	nop
 8000c86:	4b29      	ldr	r3, [pc, #164]	; (8000d2c <SystemClock_Config+0x104>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c92:	d1f8      	bne.n	8000c86 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c94:	2302      	movs	r3, #2
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9c:	2340      	movs	r3, #64	; 0x40
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000cac:	2325      	movs	r3, #37	; 0x25
 8000cae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f005 feaa 	bl	8006a28 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cda:	f000 fb35 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	233f      	movs	r3, #63	; 0x3f
 8000ce0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000cea:	2308      	movs	r3, #8
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cee:	2340      	movs	r3, #64	; 0x40
 8000cf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2102      	movs	r1, #2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f006 fabd 	bl	8007284 <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000d10:	f000 fb1a 	bl	8001348 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_12);
 8000d14:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000d18:	2100      	movs	r1, #0
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f006 fc68 	bl	80075f0 <HAL_RCC_MCOConfig>
}
 8000d20:	bf00      	nop
 8000d22:	3770      	adds	r7, #112	; 0x70
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	58000400 	.word	0x58000400
 8000d2c:	58024800 	.word	0x58024800

08000d30 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <MX_DCMI_Init+0x64>)
 8000d38:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d42:	2220      	movs	r2, #32
 8000d44:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d58:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d60:	2208      	movs	r2, #8
 8000d62:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d64:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_DCMI_Init+0x60>)
 8000d7e:	f001 f9d1 	bl	8002124 <HAL_DCMI_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d88:	f000 fade 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2400015c 	.word	0x2400015c
 8000d94:	48020000 	.word	0x48020000

08000d98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	; (8000e10 <MX_I2C1_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x109093DC;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <MX_I2C1_Init+0x7c>)
 8000da6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000dd4:	f004 fb4e 	bl	8005474 <HAL_I2C_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dde:	f000 fab3 	bl	8001348 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4809      	ldr	r0, [pc, #36]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000de6:	f004 ff3b 	bl	8005c60 <HAL_I2CEx_ConfigAnalogFilter>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000df0:	f000 faaa 	bl	8001348 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_I2C1_Init+0x74>)
 8000df8:	f004 ff7d 	bl	8005cf6 <HAL_I2CEx_ConfigDigitalFilter>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e02:	f000 faa1 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	24000224 	.word	0x24000224
 8000e10:	40005400 	.word	0x40005400
 8000e14:	109093dc 	.word	0x109093dc

08000e18 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_JPEG_Init+0x20>)
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <MX_JPEG_Init+0x24>)
 8000e20:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_JPEG_Init+0x20>)
 8000e24:	f004 ffb4 	bl	8005d90 <HAL_JPEG_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000e2e:	f000 fa8b 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	24000270 	.word	0x24000270
 8000e3c:	52003000 	.word	0x52003000

08000e40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b096      	sub	sp, #88	; 0x58
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	222c      	movs	r2, #44	; 0x2c
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00a ffbd 	bl	800bdec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e72:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000e74:	4a3f      	ldr	r2, [pc, #252]	; (8000f74 <MX_TIM1_Init+0x134>)
 8000e76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 300-1;
 8000e78:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000e7a:	f240 122b 	movw	r2, #299	; 0x12b
 8000e7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000e86:	4b3a      	ldr	r3, [pc, #232]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000e88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9a:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ea0:	4833      	ldr	r0, [pc, #204]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000ea2:	f008 f9bd 	bl	8009220 <HAL_TIM_PWM_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000eac:	f000 fa4c 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ebc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	482b      	ldr	r0, [pc, #172]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000ec4:	f008 fe88 	bl	8009bd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000ece:	f000 fa3b 	bl	8001348 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed2:	2360      	movs	r3, #96	; 0x60
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	481e      	ldr	r0, [pc, #120]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000ef8:	f008 f9ea 	bl	80092d0 <HAL_TIM_PWM_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000f02:	f000 fa21 	bl	8001348 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000f10:	f008 f9de 	bl	80092d0 <HAL_TIM_PWM_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8000f1a:	f000 fa15 	bl	8001348 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000f54:	f008 fece 	bl	8009cf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000f5e:	f000 f9f3 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <MX_TIM1_Init+0x130>)
 8000f64:	f000 fbf0 	bl	8001748 <HAL_TIM_MspPostInit>

}
 8000f68:	bf00      	nop
 8000f6a:	3758      	adds	r7, #88	; 0x58
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	240002c8 	.word	0x240002c8
 8000f74:	40010000 	.word	0x40010000

08000f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <MX_USART2_UART_Init+0x94>)
 8000f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000f84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000fc2:	f008 ff15 	bl	8009df0 <HAL_UART_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fcc:	f000 f9bc 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	480d      	ldr	r0, [pc, #52]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000fd4:	f00a fdab 	bl	800bb2e <HAL_UARTEx_SetTxFifoThreshold>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fde:	f000 f9b3 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000fe6:	f00a fde0 	bl	800bbaa <HAL_UARTEx_SetRxFifoThreshold>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ff0:	f000 f9aa 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_USART2_UART_Init+0x90>)
 8000ff6:	f00a fd61 	bl	800babc <HAL_UARTEx_DisableFifoMode>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001000:	f000 f9a2 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	24000314 	.word	0x24000314
 800100c:	40004400 	.word	0x40004400

08001010 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <MX_USART3_UART_Init+0x94>)
 8001018:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800105a:	f008 fec9 	bl	8009df0 <HAL_UART_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001064:	f000 f970 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800106c:	f00a fd5f 	bl	800bb2e <HAL_UARTEx_SetTxFifoThreshold>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001076:	f000 f967 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800107e:	f00a fd94 	bl	800bbaa <HAL_UARTEx_SetRxFifoThreshold>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001088:	f000 f95e 	bl	8001348 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_USART3_UART_Init+0x90>)
 800108e:	f00a fd15 	bl	800babc <HAL_UARTEx_DisableFifoMode>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001098:	f000 f956 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	240003a4 	.word	0x240003a4
 80010a4:	40004800 	.word	0x40004800

080010a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_DMA_Init+0x5c>)
 80010b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_DMA_Init+0x5c>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_DMA_Init+0x5c>)
 80010c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	200b      	movs	r0, #11
 80010d2:	f000 fff2 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010d6:	200b      	movs	r0, #11
 80010d8:	f001 f809 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	200c      	movs	r0, #12
 80010e2:	f000 ffea 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010e6:	200c      	movs	r0, #12
 80010e8:	f001 f801 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	200d      	movs	r0, #13
 80010f2:	f000 ffe2 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010f6:	200d      	movs	r0, #13
 80010f8:	f000 fff9 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	58024400 	.word	0x58024400

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800111e:	4b75      	ldr	r3, [pc, #468]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001124:	4a73      	ldr	r2, [pc, #460]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112e:	4b71      	ldr	r3, [pc, #452]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	4a6c      	ldr	r2, [pc, #432]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114c:	4b69      	ldr	r3, [pc, #420]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	4b66      	ldr	r3, [pc, #408]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	4a64      	ldr	r2, [pc, #400]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 8001162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116a:	4b62      	ldr	r3, [pc, #392]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	4a5d      	ldr	r2, [pc, #372]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001188:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b57      	ldr	r3, [pc, #348]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	4a55      	ldr	r2, [pc, #340]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 800119e:	f043 0302 	orr.w	r3, r3, #2
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a6:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b4:	4b4f      	ldr	r3, [pc, #316]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 80011bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <MX_GPIO_Init+0x1ec>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MOTOR_2_GPIO_2_Pin|LD3_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f644 0101 	movw	r1, #18433	; 0x4801
 80011f6:	4840      	ldr	r0, [pc, #256]	; (80012f8 <MX_GPIO_Init+0x1f0>)
 80011f8:	f004 f922 	bl	8005440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, RESETG0_Pin|PWDNPG1_Pin, GPIO_PIN_RESET);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2103      	movs	r1, #3
 8001200:	483e      	ldr	r0, [pc, #248]	; (80012fc <MX_GPIO_Init+0x1f4>)
 8001202:	f004 f91d 	bl	8005440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_1_GPIO_1_Pin|MOTOR_1_GPIO_2_Pin|MOTOR_2_GPIO_1_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4114 	mov.w	r1, #37888	; 0x9400
 800120c:	483c      	ldr	r0, [pc, #240]	; (8001300 <MX_GPIO_Init+0x1f8>)
 800120e:	f004 f917 	bl	8005440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001218:	483a      	ldr	r0, [pc, #232]	; (8001304 <MX_GPIO_Init+0x1fc>)
 800121a:	f004 f911 	bl	8005440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800121e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4835      	ldr	r0, [pc, #212]	; (8001308 <MX_GPIO_Init+0x200>)
 8001234:	f003 ff54 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MOTOR_2_GPIO_2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MOTOR_2_GPIO_2_Pin|LD3_Pin;
 8001238:	f644 0301 	movw	r3, #18433	; 0x4801
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4829      	ldr	r0, [pc, #164]	; (80012f8 <MX_GPIO_Init+0x1f0>)
 8001252:	f003 ff45 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESETG0_Pin PWDNPG1_Pin */
  GPIO_InitStruct.Pin = RESETG0_Pin|PWDNPG1_Pin;
 8001256:	2303      	movs	r3, #3
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4823      	ldr	r0, [pc, #140]	; (80012fc <MX_GPIO_Init+0x1f4>)
 800126e:	f003 ff37 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_1_GPIO_1_Pin MOTOR_1_GPIO_2_Pin MOTOR_2_GPIO_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_GPIO_1_Pin|MOTOR_1_GPIO_2_Pin|MOTOR_2_GPIO_1_Pin;
 8001272:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4619      	mov	r1, r3
 800128a:	481d      	ldr	r0, [pc, #116]	; (8001300 <MX_GPIO_Init+0x1f8>)
 800128c:	f003 ff28 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4816      	ldr	r0, [pc, #88]	; (8001304 <MX_GPIO_Init+0x1fc>)
 80012aa:	f003 ff19 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <MX_GPIO_Init+0x1f4>)
 80012c4:	f003 ff0c 	bl	80050e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <MX_GPIO_Init+0x200>)
 80012e6:	f003 fefb 	bl	80050e0 <HAL_GPIO_Init>

}
 80012ea:	bf00      	nop
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58020400 	.word	0x58020400
 80012fc:	58021800 	.word	0x58021800
 8001300:	58021000 	.word	0x58021000
 8001304:	58020c00 	.word	0x58020c00
 8001308:	58020800 	.word	0x58020800

0800130c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_UARTEx_RxEventCallback+0x30>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d105      	bne.n	800132e <HAL_UARTEx_RxEventCallback+0x22>
		recieve_flag = 1;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_UARTEx_RxEventCallback+0x34>)
 8001324:	2201      	movs	r2, #1
 8001326:	801a      	strh	r2, [r3, #0]

		size_recieved = Size;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <HAL_UARTEx_RxEventCallback+0x38>)
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	8013      	strh	r3, [r2, #0]
	}
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40004400 	.word	0x40004400
 8001340:	24000524 	.word	0x24000524
 8001344:	24000526 	.word	0x24000526

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>
	...

08001354 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_MspInit+0x30>)
 800135c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001360:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x30>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x30>)
 800136c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	58024400 	.word	0x58024400

08001388 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a89      	ldr	r2, [pc, #548]	; (80015cc <HAL_DCMI_MspInit+0x244>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	f040 810b 	bne.w	80015c2 <HAL_DCMI_MspInit+0x23a>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80013ac:	4b88      	ldr	r3, [pc, #544]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 80013ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80013b2:	4a87      	ldr	r2, [pc, #540]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80013bc:	4b84      	ldr	r3, [pc, #528]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 80013be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	623b      	str	r3, [r7, #32]
 80013c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ca:	4b81      	ldr	r3, [pc, #516]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d0:	4a7f      	ldr	r2, [pc, #508]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013da:	4b7d      	ldr	r3, [pc, #500]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b79      	ldr	r3, [pc, #484]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ee:	4a78      	ldr	r2, [pc, #480]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f8:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	61bb      	str	r3, [r7, #24]
 8001404:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	4a70      	ldr	r2, [pc, #448]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001416:	4b6e      	ldr	r3, [pc, #440]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001424:	4b6a      	ldr	r3, [pc, #424]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	4a69      	ldr	r2, [pc, #420]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001434:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001442:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	4a61      	ldr	r2, [pc, #388]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 800144a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001452:	4b5f      	ldr	r3, [pc, #380]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	4a5a      	ldr	r2, [pc, #360]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001470:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <HAL_DCMI_MspInit+0x248>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PG11     ------> DCMI_D3
    PB7     ------> DCMI_VSYNC
    PE0     ------> DCMI_D2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_0;
 800147e:	2371      	movs	r3, #113	; 0x71
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800148e:	230d      	movs	r3, #13
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	484e      	ldr	r0, [pc, #312]	; (80015d4 <HAL_DCMI_MspInit+0x24c>)
 800149a:	f003 fe21 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800149e:	2350      	movs	r3, #80	; 0x50
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014ae:	230d      	movs	r3, #13
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	4847      	ldr	r0, [pc, #284]	; (80015d8 <HAL_DCMI_MspInit+0x250>)
 80014ba:	f003 fe11 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014be:	23c0      	movs	r3, #192	; 0xc0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014ce:	230d      	movs	r3, #13
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4840      	ldr	r0, [pc, #256]	; (80015dc <HAL_DCMI_MspInit+0x254>)
 80014da:	f003 fe01 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014de:	2308      	movs	r3, #8
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014ee:	230d      	movs	r3, #13
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4839      	ldr	r0, [pc, #228]	; (80015e0 <HAL_DCMI_MspInit+0x258>)
 80014fa:	f003 fdf1 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001510:	230d      	movs	r3, #13
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	4832      	ldr	r0, [pc, #200]	; (80015e4 <HAL_DCMI_MspInit+0x25c>)
 800151c:	f003 fde0 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001530:	230d      	movs	r3, #13
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	482b      	ldr	r0, [pc, #172]	; (80015e8 <HAL_DCMI_MspInit+0x260>)
 800153c:	f003 fdd0 	bl	80050e0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream2;
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001542:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <HAL_DCMI_MspInit+0x268>)
 8001544:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001548:	224b      	movs	r2, #75	; 0x4b
 800154a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 800155a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001560:	4b22      	ldr	r3, [pc, #136]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001562:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001566:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001574:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001578:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800157c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001580:	2204      	movs	r2, #4
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001586:	2203      	movs	r2, #3
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 800158c:	2200      	movs	r2, #0
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001592:	2200      	movs	r2, #0
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001596:	4815      	ldr	r0, [pc, #84]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 8001598:	f000 ff66 	bl	8002468 <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_DCMI_MspInit+0x21e>
    {
      Error_Handler();
 80015a2:	f7ff fed1 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 80015aa:	649a      	str	r2, [r3, #72]	; 0x48
 80015ac:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_DCMI_MspInit+0x264>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	204e      	movs	r0, #78	; 0x4e
 80015b8:	f000 fd7f 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80015bc:	204e      	movs	r0, #78	; 0x4e
 80015be:	f000 fd96 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	3738      	adds	r7, #56	; 0x38
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	48020000 	.word	0x48020000
 80015d0:	58024400 	.word	0x58024400
 80015d4:	58021000 	.word	0x58021000
 80015d8:	58020000 	.word	0x58020000
 80015dc:	58020800 	.word	0x58020800
 80015e0:	58020c00 	.word	0x58020c00
 80015e4:	58021800 	.word	0x58021800
 80015e8:	58020400 	.word	0x58020400
 80015ec:	240001ac 	.word	0x240001ac
 80015f0:	40020040 	.word	0x40020040

080015f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0b8      	sub	sp, #224	; 0xe0
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	22bc      	movs	r2, #188	; 0xbc
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00a fbe9 	bl	800bdec <memset>
  if(hi2c->Instance==I2C1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a25      	ldr	r2, [pc, #148]	; (80016b4 <HAL_I2C_MspInit+0xc0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d142      	bne.n	80016aa <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001624:	2308      	movs	r3, #8
 8001626:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162e:	f107 0310 	add.w	r3, r7, #16
 8001632:	4618      	mov	r0, r3
 8001634:	f006 fa1c 	bl	8007a70 <HAL_RCCEx_PeriphCLKConfig>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800163e:	f7ff fe83 	bl	8001348 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001660:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001668:	2312      	movs	r3, #18
 800166a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167a:	2304      	movs	r3, #4
 800167c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001684:	4619      	mov	r1, r3
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <HAL_I2C_MspInit+0xc8>)
 8001688:	f003 fd2a 	bl	80050e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 800168e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 8001694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001698:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_I2C_MspInit+0xc4>)
 800169e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016aa:	bf00      	nop
 80016ac:	37e0      	adds	r7, #224	; 0xe0
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40005400 	.word	0x40005400
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58020400 	.word	0x58020400

080016c0 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <HAL_JPEG_MspInit+0x3c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10e      	bne.n	80016f0 <HAL_JPEG_MspInit+0x30>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_JPEG_MspInit+0x40>)
 80016d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016d8:	4a09      	ldr	r2, [pc, #36]	; (8001700 <HAL_JPEG_MspInit+0x40>)
 80016da:	f043 0320 	orr.w	r3, r3, #32
 80016de:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <HAL_JPEG_MspInit+0x40>)
 80016e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	52003000 	.word	0x52003000
 8001700:	58024400 	.word	0x58024400

08001704 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_TIM_PWM_MspInit+0x3c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_TIM_PWM_MspInit+0x40>)
 8001718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800171c:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_TIM_PWM_MspInit+0x40>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_TIM_PWM_MspInit+0x40>)
 8001728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40010000 	.word	0x40010000
 8001744:	58024400 	.word	0x58024400

08001748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <HAL_TIM_MspPostInit+0x6c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d11f      	bne.n	80017aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <HAL_TIM_MspPostInit+0x70>)
 800176c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001770:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <HAL_TIM_MspPostInit+0x70>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_TIM_MspPostInit+0x70>)
 800177c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_1_PWM_Pin|MOTOR_2_PWM_Pin;
 8001788:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800178c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800179a:	2301      	movs	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <HAL_TIM_MspPostInit+0x74>)
 80017a6:	f003 fc9b 	bl	80050e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40010000 	.word	0x40010000
 80017b8:	58024400 	.word	0x58024400
 80017bc:	58021000 	.word	0x58021000

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0bc      	sub	sp, #240	; 0xf0
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d8:	f107 0320 	add.w	r3, r7, #32
 80017dc:	22bc      	movs	r2, #188	; 0xbc
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00a fb03 	bl	800bdec <memset>
  if(huart->Instance==USART2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a91      	ldr	r2, [pc, #580]	; (8001a30 <HAL_UART_MspInit+0x270>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	f040 809c 	bne.w	800192a <HAL_UART_MspInit+0x16a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017f2:	2302      	movs	r3, #2
 80017f4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	4618      	mov	r0, r3
 8001802:	f006 f935 	bl	8007a70 <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800180c:	f7ff fd9c 	bl	8001348 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001810:	4b88      	ldr	r3, [pc, #544]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001816:	4a87      	ldr	r2, [pc, #540]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001820:	4b84      	ldr	r3, [pc, #528]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b81      	ldr	r3, [pc, #516]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001834:	4a7f      	ldr	r2, [pc, #508]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183e:	4b7d      	ldr	r3, [pc, #500]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	61bb      	str	r3, [r7, #24]
 800184a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184c:	4b79      	ldr	r3, [pc, #484]	; (8001a34 <HAL_UART_MspInit+0x274>)
 800184e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001852:	4a78      	ldr	r2, [pc, #480]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185c:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <HAL_UART_MspInit+0x274>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800186a:	2308      	movs	r3, #8
 800186c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001882:	2307      	movs	r3, #7
 8001884:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800188c:	4619      	mov	r1, r3
 800188e:	486a      	ldr	r0, [pc, #424]	; (8001a38 <HAL_UART_MspInit+0x278>)
 8001890:	f003 fc26 	bl	80050e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001894:	2320      	movs	r3, #32
 8001896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ac:	2307      	movs	r3, #7
 80018ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018b6:	4619      	mov	r1, r3
 80018b8:	4860      	ldr	r0, [pc, #384]	; (8001a3c <HAL_UART_MspInit+0x27c>)
 80018ba:	f003 fc11 	bl	80050e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream1;
 80018be:	4b60      	ldr	r3, [pc, #384]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018c0:	4a60      	ldr	r2, [pc, #384]	; (8001a44 <HAL_UART_MspInit+0x284>)
 80018c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80018c4:	4b5e      	ldr	r3, [pc, #376]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018c6:	222b      	movs	r2, #43	; 0x2b
 80018c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ca:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d0:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018d6:	4b5a      	ldr	r3, [pc, #360]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018de:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e4:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80018ea:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018f0:	4b53      	ldr	r3, [pc, #332]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f6:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80018fc:	4850      	ldr	r0, [pc, #320]	; (8001a40 <HAL_UART_MspInit+0x280>)
 80018fe:	f000 fdb3 	bl	8002468 <HAL_DMA_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 8001908:	f7ff fd1e 	bl	8001348 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_UART_MspInit+0x280>)
 8001910:	67da      	str	r2, [r3, #124]	; 0x7c
 8001912:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_UART_MspInit+0x280>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	2026      	movs	r0, #38	; 0x26
 800191e:	f000 fbcc 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001922:	2026      	movs	r0, #38	; 0x26
 8001924:	f000 fbe3 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001928:	e07e      	b.n	8001a28 <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART3)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <HAL_UART_MspInit+0x288>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d179      	bne.n	8001a28 <HAL_UART_MspInit+0x268>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001934:	2302      	movs	r3, #2
 8001936:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	4618      	mov	r0, r3
 8001944:	f006 f894 	bl	8007a70 <HAL_RCCEx_PeriphCLKConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_UART_MspInit+0x192>
      Error_Handler();
 800194e:	f7ff fcfb 	bl	8001348 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001952:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001958:	4a36      	ldr	r2, [pc, #216]	; (8001a34 <HAL_UART_MspInit+0x274>)
 800195a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001962:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001970:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001976:	4a2f      	ldr	r2, [pc, #188]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001980:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_UART_MspInit+0x274>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800198e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019a8:	2307      	movs	r3, #7
 80019aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019b2:	4619      	mov	r1, r3
 80019b4:	4821      	ldr	r0, [pc, #132]	; (8001a3c <HAL_UART_MspInit+0x27c>)
 80019b6:	f003 fb93 	bl	80050e0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream0;
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019bc:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <HAL_UART_MspInit+0x290>)
 80019be:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019c2:	222e      	movs	r2, #46	; 0x2e
 80019c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 80019fc:	2203      	movs	r2, #3
 80019fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a0c:	480f      	ldr	r0, [pc, #60]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 8001a0e:	f000 fd2b 	bl	8002468 <HAL_DMA_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001a18:	f7ff fc96 	bl	8001348 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 8001a20:	679a      	str	r2, [r3, #120]	; 0x78
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_UART_MspInit+0x28c>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a28:	bf00      	nop
 8001a2a:	37f0      	adds	r7, #240	; 0xf0
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40004400 	.word	0x40004400
 8001a34:	58024400 	.word	0x58024400
 8001a38:	58020000 	.word	0x58020000
 8001a3c:	58020c00 	.word	0x58020c00
 8001a40:	24000434 	.word	0x24000434
 8001a44:	40020028 	.word	0x40020028
 8001a48:	40004800 	.word	0x40004800
 8001a4c:	240004ac 	.word	0x240004ac
 8001a50:	40020010 	.word	0x40020010

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa0:	f000 f9e0 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <DMA1_Stream0_IRQHandler+0x10>)
 8001aae:	f002 f805 	bl	8003abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	240004ac 	.word	0x240004ac

08001abc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <DMA1_Stream1_IRQHandler+0x10>)
 8001ac2:	f001 fffb 	bl	8003abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	24000434 	.word	0x24000434

08001ad0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <DMA1_Stream2_IRQHandler+0x10>)
 8001ad6:	f001 fff1 	bl	8003abc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	240001ac 	.word	0x240001ac

08001ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <USART2_IRQHandler+0x10>)
 8001aea:	f008 fa67 	bl	8009fbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	24000314 	.word	0x24000314

08001af8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <DCMI_IRQHandler+0x10>)
 8001afe:	f000 fbeb 	bl	80022d8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2400015c 	.word	0x2400015c

08001b0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e00a      	b.n	8001b34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b1e:	f3af 8000 	nop.w
 8001b22:	4601      	mov	r1, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60ba      	str	r2, [r7, #8]
 8001b2a:	b2ca      	uxtb	r2, r1
 8001b2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dbf0      	blt.n	8001b1e <_read+0x12>
	}

return len;
 8001b3c:	687b      	ldr	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_isatty>:

int _isatty(int file)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
	return 1;
 8001b86:	2301      	movs	r3, #1
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
	return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb8:	4a14      	ldr	r2, [pc, #80]	; (8001c0c <_sbrk+0x5c>)
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <_sbrk+0x60>)
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <_sbrk+0x64>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <_sbrk+0x68>)
 8001bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d207      	bcs.n	8001bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be0:	f00a f8cc 	bl	800bd7c <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	220c      	movs	r2, #12
 8001be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
 8001bee:	e009      	b.n	8001c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <_sbrk+0x64>)
 8001c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c02:	68fb      	ldr	r3, [r7, #12]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	24080000 	.word	0x24080000
 8001c10:	00000400 	.word	0x00000400
 8001c14:	24000528 	.word	0x24000528
 8001c18:	24000540 	.word	0x24000540

08001c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c20:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <SystemInit+0xe4>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c26:	4a36      	ldr	r2, [pc, #216]	; (8001d00 <SystemInit+0xe4>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <SystemInit+0xe8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	2b06      	cmp	r3, #6
 8001c3a:	d807      	bhi.n	8001c4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c3c:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <SystemInit+0xe8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 030f 	bic.w	r3, r3, #15
 8001c44:	4a2f      	ldr	r2, [pc, #188]	; (8001d04 <SystemInit+0xe8>)
 8001c46:	f043 0307 	orr.w	r3, r3, #7
 8001c4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <SystemInit+0xec>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2d      	ldr	r2, [pc, #180]	; (8001d08 <SystemInit+0xec>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <SystemInit+0xec>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <SystemInit+0xec>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4929      	ldr	r1, [pc, #164]	; (8001d08 <SystemInit+0xec>)
 8001c64:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <SystemInit+0xf0>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <SystemInit+0xe8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c76:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <SystemInit+0xe8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 030f 	bic.w	r3, r3, #15
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <SystemInit+0xe8>)
 8001c80:	f043 0307 	orr.w	r3, r3, #7
 8001c84:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <SystemInit+0xec>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <SystemInit+0xec>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <SystemInit+0xec>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <SystemInit+0xec>)
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <SystemInit+0xf4>)
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <SystemInit+0xec>)
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <SystemInit+0xf8>)
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <SystemInit+0xec>)
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <SystemInit+0xfc>)
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <SystemInit+0xec>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <SystemInit+0xec>)
 8001cb2:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <SystemInit+0xfc>)
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <SystemInit+0xec>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <SystemInit+0xec>)
 8001cbe:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <SystemInit+0xfc>)
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <SystemInit+0xec>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <SystemInit+0xec>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <SystemInit+0xec>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <SystemInit+0xec>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <SystemInit+0x100>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <SystemInit+0x104>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ce6:	d202      	bcs.n	8001cee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <SystemInit+0x108>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <SystemInit+0x10c>)
 8001cf0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001cf4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	52002000 	.word	0x52002000
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d10:	02020200 	.word	0x02020200
 8001d14:	01ff0000 	.word	0x01ff0000
 8001d18:	01010280 	.word	0x01010280
 8001d1c:	5c001000 	.word	0x5c001000
 8001d20:	ffff0000 	.word	0xffff0000
 8001d24:	51008108 	.word	0x51008108
 8001d28:	52004000 	.word	0x52004000

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d30:	f7ff ff74 	bl	8001c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	; (8001d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	; (8001d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f00a f815 	bl	800bd88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7fe fd5b 	bl	8000818 <main>
  bx  lr
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d6c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001d70:	0800d05c 	.word	0x0800d05c
  ldr r2, =_sbss
 8001d74:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001d78:	24000540 	.word	0x24000540

08001d7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC3_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d86:	2003      	movs	r0, #3
 8001d88:	f000 f98c 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d8c:	f005 fc9a 	bl	80076c4 <HAL_RCC_GetSysClockFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_Init+0x68>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	4913      	ldr	r1, [pc, #76]	; (8001dec <HAL_Init+0x6c>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_Init+0x68>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_Init+0x6c>)
 8001db4:	5cd3      	ldrb	r3, [r2, r3]
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <HAL_Init+0x70>)
 8001dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_Init+0x74>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f000 f814 	bl	8001df8 <HAL_InitTick>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e002      	b.n	8001de0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dda:	f7ff fabb 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	58024400 	.word	0x58024400
 8001dec:	0800cd54 	.word	0x0800cd54
 8001df0:	24000004 	.word	0x24000004
 8001df4:	24000000 	.word	0x24000000

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_InitTick+0x60>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e021      	b.n	8001e50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_InitTick+0x64>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_InitTick+0x60>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f971 	bl	800210a <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00e      	b.n	8001e50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d80a      	bhi.n	8001e4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f000 f93b 	bl	80020ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_InitTick+0x68>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	2400000c 	.word	0x2400000c
 8001e5c:	24000000 	.word	0x24000000
 8001e60:	24000008 	.word	0x24000008

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2400000c 	.word	0x2400000c
 8001e88:	2400052c 	.word	0x2400052c

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	2400052c 	.word	0x2400052c

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2400000c 	.word	0x2400000c

08001eec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_GetREVID+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	5c001000 	.word	0x5c001000

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	05fa0000 	.word	0x05fa0000

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff40 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff33 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa4 	bl	8002060 <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e069      	b.n	800220a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff f920 	bl	8001388 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_DCMI_Init+0xf0>)
 800216a:	400b      	ands	r3, r1
 800216c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002182:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800218e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800219a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80021a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80021b2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d112      	bne.n	80021ea <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7f1b      	ldrb	r3, [r3, #28]
 80021c8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7f5b      	ldrb	r3, [r3, #29]
 80021ce:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80021d0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7f9b      	ldrb	r3, [r3, #30]
 80021d6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80021d8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7fdb      	ldrb	r3, [r3, #31]
 80021e0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80021e6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80021e8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 021e 	orr.w	r2, r2, #30
 80021f8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	ffe0f007 	.word	0xffe0f007

08002218 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_DCMI_Stop+0xb8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <HAL_DCMI_Stop+0xbc>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0a5b      	lsrs	r3, r3, #9
 800222c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_DCMI_Stop+0x30>
 8002244:	2302      	movs	r3, #2
 8002246:	e03f      	b.n	80022c8 <HAL_DCMI_Stop+0xb0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3b01      	subs	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d108      	bne.n	8002286 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	f043 0220 	orr.w	r2, r3, #32
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	72fb      	strb	r3, [r7, #11]
      break;
 8002284:	e006      	b.n	8002294 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e9      	bne.n	8002268 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022a2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fea3 	bl	8002ff4 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80022c6:	7afb      	ldrb	r3, [r7, #11]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	24000000 	.word	0x24000000
 80022d4:	10624dd3 	.word	0x10624dd3

080022d8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2204      	movs	r2, #4
 80022f8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	f043 0202 	orr.w	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2204      	movs	r2, #4
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002312:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <HAL_DCMI_IRQHandler+0x100>)
 8002314:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	4618      	mov	r0, r3
 800231c:	f001 f988 	bl	8003630 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d016      	beq.n	8002358 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2202      	movs	r2, #2
 8002330:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2204      	movs	r2, #4
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234a:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <HAL_DCMI_IRQHandler+0x100>)
 800234c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002352:	4618      	mov	r0, r3
 8002354:	f001 f96c 	bl	8003630 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2210      	movs	r2, #16
 8002368:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f840 	bl	80023f0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2208      	movs	r2, #8
 8002380:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f83e 	bl	8002404 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01d      	beq.n	80023ce <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d107      	bne.n	80023b0 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 021e 	bic.w	r2, r2, #30
 80023ae:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f825 	bl	8002418 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	0800242d 	.word	0x0800242d

080023dc <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002438:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	2b02      	cmp	r3, #2
 8002442:	d009      	beq.n	8002458 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff ffbf 	bl	80023dc <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff fd0c 	bl	8001e8c <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e316      	b.n	8002aae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a66      	ldr	r2, [pc, #408]	; (8002620 <HAL_DMA_Init+0x1b8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d04a      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a65      	ldr	r2, [pc, #404]	; (8002624 <HAL_DMA_Init+0x1bc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d045      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a63      	ldr	r2, [pc, #396]	; (8002628 <HAL_DMA_Init+0x1c0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d040      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a62      	ldr	r2, [pc, #392]	; (800262c <HAL_DMA_Init+0x1c4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d03b      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a60      	ldr	r2, [pc, #384]	; (8002630 <HAL_DMA_Init+0x1c8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d036      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a5f      	ldr	r2, [pc, #380]	; (8002634 <HAL_DMA_Init+0x1cc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d031      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a5d      	ldr	r2, [pc, #372]	; (8002638 <HAL_DMA_Init+0x1d0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d02c      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a5c      	ldr	r2, [pc, #368]	; (800263c <HAL_DMA_Init+0x1d4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d027      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a5a      	ldr	r2, [pc, #360]	; (8002640 <HAL_DMA_Init+0x1d8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d022      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a59      	ldr	r2, [pc, #356]	; (8002644 <HAL_DMA_Init+0x1dc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d01d      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a57      	ldr	r2, [pc, #348]	; (8002648 <HAL_DMA_Init+0x1e0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d018      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a56      	ldr	r2, [pc, #344]	; (800264c <HAL_DMA_Init+0x1e4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d013      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a54      	ldr	r2, [pc, #336]	; (8002650 <HAL_DMA_Init+0x1e8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00e      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a53      	ldr	r2, [pc, #332]	; (8002654 <HAL_DMA_Init+0x1ec>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a51      	ldr	r2, [pc, #324]	; (8002658 <HAL_DMA_Init+0x1f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d004      	beq.n	8002520 <HAL_DMA_Init+0xb8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a50      	ldr	r2, [pc, #320]	; (800265c <HAL_DMA_Init+0x1f4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Init+0xbc>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_DMA_Init+0xbe>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 813b 	beq.w	80027a2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a37      	ldr	r2, [pc, #220]	; (8002620 <HAL_DMA_Init+0x1b8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d04a      	beq.n	80025dc <HAL_DMA_Init+0x174>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a36      	ldr	r2, [pc, #216]	; (8002624 <HAL_DMA_Init+0x1bc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d045      	beq.n	80025dc <HAL_DMA_Init+0x174>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a34      	ldr	r2, [pc, #208]	; (8002628 <HAL_DMA_Init+0x1c0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d040      	beq.n	80025dc <HAL_DMA_Init+0x174>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a33      	ldr	r2, [pc, #204]	; (800262c <HAL_DMA_Init+0x1c4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d03b      	beq.n	80025dc <HAL_DMA_Init+0x174>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a31      	ldr	r2, [pc, #196]	; (8002630 <HAL_DMA_Init+0x1c8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d036      	beq.n	80025dc <HAL_DMA_Init+0x174>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a30      	ldr	r2, [pc, #192]	; (8002634 <HAL_DMA_Init+0x1cc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d031      	beq.n	80025dc <HAL_DMA_Init+0x174>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a2e      	ldr	r2, [pc, #184]	; (8002638 <HAL_DMA_Init+0x1d0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02c      	beq.n	80025dc <HAL_DMA_Init+0x174>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a2d      	ldr	r2, [pc, #180]	; (800263c <HAL_DMA_Init+0x1d4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d027      	beq.n	80025dc <HAL_DMA_Init+0x174>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <HAL_DMA_Init+0x1d8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d022      	beq.n	80025dc <HAL_DMA_Init+0x174>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <HAL_DMA_Init+0x1dc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d01d      	beq.n	80025dc <HAL_DMA_Init+0x174>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a28      	ldr	r2, [pc, #160]	; (8002648 <HAL_DMA_Init+0x1e0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d018      	beq.n	80025dc <HAL_DMA_Init+0x174>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a27      	ldr	r2, [pc, #156]	; (800264c <HAL_DMA_Init+0x1e4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_DMA_Init+0x174>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a25      	ldr	r2, [pc, #148]	; (8002650 <HAL_DMA_Init+0x1e8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00e      	beq.n	80025dc <HAL_DMA_Init+0x174>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a24      	ldr	r2, [pc, #144]	; (8002654 <HAL_DMA_Init+0x1ec>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_DMA_Init+0x174>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a22      	ldr	r2, [pc, #136]	; (8002658 <HAL_DMA_Init+0x1f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Init+0x174>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a21      	ldr	r2, [pc, #132]	; (800265c <HAL_DMA_Init+0x1f4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d108      	bne.n	80025ee <HAL_DMA_Init+0x186>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e007      	b.n	80025fe <HAL_DMA_Init+0x196>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025fe:	e02f      	b.n	8002660 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002600:	f7ff fc44 	bl	8001e8c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b05      	cmp	r3, #5
 800260c:	d928      	bls.n	8002660 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2203      	movs	r2, #3
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e246      	b.n	8002aae <HAL_DMA_Init+0x646>
 8002620:	40020010 	.word	0x40020010
 8002624:	40020028 	.word	0x40020028
 8002628:	40020040 	.word	0x40020040
 800262c:	40020058 	.word	0x40020058
 8002630:	40020070 	.word	0x40020070
 8002634:	40020088 	.word	0x40020088
 8002638:	400200a0 	.word	0x400200a0
 800263c:	400200b8 	.word	0x400200b8
 8002640:	40020410 	.word	0x40020410
 8002644:	40020428 	.word	0x40020428
 8002648:	40020440 	.word	0x40020440
 800264c:	40020458 	.word	0x40020458
 8002650:	40020470 	.word	0x40020470
 8002654:	40020488 	.word	0x40020488
 8002658:	400204a0 	.word	0x400204a0
 800265c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1c8      	bne.n	8002600 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4b83      	ldr	r3, [pc, #524]	; (8002888 <HAL_DMA_Init+0x420>)
 800267a:	4013      	ands	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002686:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002692:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d107      	bne.n	80026c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	4313      	orrs	r3, r2
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026c4:	4b71      	ldr	r3, [pc, #452]	; (800288c <HAL_DMA_Init+0x424>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b71      	ldr	r3, [pc, #452]	; (8002890 <HAL_DMA_Init+0x428>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d0:	d328      	bcc.n	8002724 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b28      	cmp	r3, #40	; 0x28
 80026d8:	d903      	bls.n	80026e2 <HAL_DMA_Init+0x27a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b2e      	cmp	r3, #46	; 0x2e
 80026e0:	d917      	bls.n	8002712 <HAL_DMA_Init+0x2aa>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b3e      	cmp	r3, #62	; 0x3e
 80026e8:	d903      	bls.n	80026f2 <HAL_DMA_Init+0x28a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b42      	cmp	r3, #66	; 0x42
 80026f0:	d90f      	bls.n	8002712 <HAL_DMA_Init+0x2aa>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b46      	cmp	r3, #70	; 0x46
 80026f8:	d903      	bls.n	8002702 <HAL_DMA_Init+0x29a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b48      	cmp	r3, #72	; 0x48
 8002700:	d907      	bls.n	8002712 <HAL_DMA_Init+0x2aa>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b4e      	cmp	r3, #78	; 0x4e
 8002708:	d905      	bls.n	8002716 <HAL_DMA_Init+0x2ae>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b52      	cmp	r3, #82	; 0x52
 8002710:	d801      	bhi.n	8002716 <HAL_DMA_Init+0x2ae>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_DMA_Init+0x2b0>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002722:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0307 	bic.w	r3, r3, #7
 800273a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2b04      	cmp	r3, #4
 800274c:	d117      	bne.n	800277e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f002 fb33 	bl	8004dcc <DMA_CheckFifoParam>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2240      	movs	r2, #64	; 0x40
 8002770:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e197      	b.n	8002aae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f002 fa6e 	bl	8004c68 <DMA_CalcBaseAndBitshift>
 800278c:	4603      	mov	r3, r0
 800278e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	223f      	movs	r2, #63	; 0x3f
 800279a:	409a      	lsls	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	e0cd      	b.n	800293e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a3b      	ldr	r2, [pc, #236]	; (8002894 <HAL_DMA_Init+0x42c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d022      	beq.n	80027f2 <HAL_DMA_Init+0x38a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a39      	ldr	r2, [pc, #228]	; (8002898 <HAL_DMA_Init+0x430>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01d      	beq.n	80027f2 <HAL_DMA_Init+0x38a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a38      	ldr	r2, [pc, #224]	; (800289c <HAL_DMA_Init+0x434>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d018      	beq.n	80027f2 <HAL_DMA_Init+0x38a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a36      	ldr	r2, [pc, #216]	; (80028a0 <HAL_DMA_Init+0x438>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_DMA_Init+0x38a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a35      	ldr	r2, [pc, #212]	; (80028a4 <HAL_DMA_Init+0x43c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00e      	beq.n	80027f2 <HAL_DMA_Init+0x38a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a33      	ldr	r2, [pc, #204]	; (80028a8 <HAL_DMA_Init+0x440>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d009      	beq.n	80027f2 <HAL_DMA_Init+0x38a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a32      	ldr	r2, [pc, #200]	; (80028ac <HAL_DMA_Init+0x444>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_DMA_Init+0x38a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a30      	ldr	r2, [pc, #192]	; (80028b0 <HAL_DMA_Init+0x448>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Init+0x38e>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_DMA_Init+0x390>
 80027f6:	2300      	movs	r3, #0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8097 	beq.w	800292c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a24      	ldr	r2, [pc, #144]	; (8002894 <HAL_DMA_Init+0x42c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d021      	beq.n	800284c <HAL_DMA_Init+0x3e4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_DMA_Init+0x430>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d01c      	beq.n	800284c <HAL_DMA_Init+0x3e4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a21      	ldr	r2, [pc, #132]	; (800289c <HAL_DMA_Init+0x434>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d017      	beq.n	800284c <HAL_DMA_Init+0x3e4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_DMA_Init+0x438>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d012      	beq.n	800284c <HAL_DMA_Init+0x3e4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_DMA_Init+0x43c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00d      	beq.n	800284c <HAL_DMA_Init+0x3e4>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_DMA_Init+0x440>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d008      	beq.n	800284c <HAL_DMA_Init+0x3e4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_DMA_Init+0x444>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d003      	beq.n	800284c <HAL_DMA_Init+0x3e4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_DMA_Init+0x448>)
 800284a:	4293      	cmp	r3, r2
 800284c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2202      	movs	r2, #2
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_DMA_Init+0x44c>)
 800286a:	4013      	ands	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d020      	beq.n	80028b8 <HAL_DMA_Init+0x450>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d102      	bne.n	8002884 <HAL_DMA_Init+0x41c>
 800287e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002882:	e01a      	b.n	80028ba <HAL_DMA_Init+0x452>
 8002884:	2300      	movs	r3, #0
 8002886:	e018      	b.n	80028ba <HAL_DMA_Init+0x452>
 8002888:	fe10803f 	.word	0xfe10803f
 800288c:	5c001000 	.word	0x5c001000
 8002890:	ffff0000 	.word	0xffff0000
 8002894:	58025408 	.word	0x58025408
 8002898:	5802541c 	.word	0x5802541c
 800289c:	58025430 	.word	0x58025430
 80028a0:	58025444 	.word	0x58025444
 80028a4:	58025458 	.word	0x58025458
 80028a8:	5802546c 	.word	0x5802546c
 80028ac:	58025480 	.word	0x58025480
 80028b0:	58025494 	.word	0x58025494
 80028b4:	fffe000f 	.word	0xfffe000f
 80028b8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028e8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b6e      	ldr	r3, [pc, #440]	; (8002ab8 <HAL_DMA_Init+0x650>)
 8002900:	4413      	add	r3, r2
 8002902:	4a6e      	ldr	r2, [pc, #440]	; (8002abc <HAL_DMA_Init+0x654>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	009a      	lsls	r2, r3, #2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f002 f9a9 	bl	8004c68 <DMA_CalcBaseAndBitshift>
 8002916:	4603      	mov	r3, r0
 8002918:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	e008      	b.n	800293e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2240      	movs	r2, #64	; 0x40
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2203      	movs	r2, #3
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0b7      	b.n	8002aae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a5f      	ldr	r2, [pc, #380]	; (8002ac0 <HAL_DMA_Init+0x658>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d072      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a5d      	ldr	r2, [pc, #372]	; (8002ac4 <HAL_DMA_Init+0x65c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d06d      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a5c      	ldr	r2, [pc, #368]	; (8002ac8 <HAL_DMA_Init+0x660>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d068      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5a      	ldr	r2, [pc, #360]	; (8002acc <HAL_DMA_Init+0x664>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d063      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a59      	ldr	r2, [pc, #356]	; (8002ad0 <HAL_DMA_Init+0x668>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d05e      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a57      	ldr	r2, [pc, #348]	; (8002ad4 <HAL_DMA_Init+0x66c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d059      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a56      	ldr	r2, [pc, #344]	; (8002ad8 <HAL_DMA_Init+0x670>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d054      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a54      	ldr	r2, [pc, #336]	; (8002adc <HAL_DMA_Init+0x674>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d04f      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a53      	ldr	r2, [pc, #332]	; (8002ae0 <HAL_DMA_Init+0x678>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d04a      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a51      	ldr	r2, [pc, #324]	; (8002ae4 <HAL_DMA_Init+0x67c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d045      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <HAL_DMA_Init+0x680>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d040      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a4e      	ldr	r2, [pc, #312]	; (8002aec <HAL_DMA_Init+0x684>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d03b      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a4d      	ldr	r2, [pc, #308]	; (8002af0 <HAL_DMA_Init+0x688>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d036      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4b      	ldr	r2, [pc, #300]	; (8002af4 <HAL_DMA_Init+0x68c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d031      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4a      	ldr	r2, [pc, #296]	; (8002af8 <HAL_DMA_Init+0x690>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d02c      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_DMA_Init+0x694>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d027      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a47      	ldr	r2, [pc, #284]	; (8002b00 <HAL_DMA_Init+0x698>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a45      	ldr	r2, [pc, #276]	; (8002b04 <HAL_DMA_Init+0x69c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01d      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a44      	ldr	r2, [pc, #272]	; (8002b08 <HAL_DMA_Init+0x6a0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a42      	ldr	r2, [pc, #264]	; (8002b0c <HAL_DMA_Init+0x6a4>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a41      	ldr	r2, [pc, #260]	; (8002b10 <HAL_DMA_Init+0x6a8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a3f      	ldr	r2, [pc, #252]	; (8002b14 <HAL_DMA_Init+0x6ac>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <HAL_DMA_Init+0x6b0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Init+0x5c6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a3c      	ldr	r2, [pc, #240]	; (8002b1c <HAL_DMA_Init+0x6b4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_DMA_Init+0x5ca>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_DMA_Init+0x5cc>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d032      	beq.n	8002a9e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f002 fa43 	bl	8004ec4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d102      	bne.n	8002a4c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a60:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d010      	beq.n	8002a8c <HAL_DMA_Init+0x624>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d80c      	bhi.n	8002a8c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f002 fac0 	bl	8004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	e008      	b.n	8002a9e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	a7fdabf8 	.word	0xa7fdabf8
 8002abc:	cccccccd 	.word	0xcccccccd
 8002ac0:	40020010 	.word	0x40020010
 8002ac4:	40020028 	.word	0x40020028
 8002ac8:	40020040 	.word	0x40020040
 8002acc:	40020058 	.word	0x40020058
 8002ad0:	40020070 	.word	0x40020070
 8002ad4:	40020088 	.word	0x40020088
 8002ad8:	400200a0 	.word	0x400200a0
 8002adc:	400200b8 	.word	0x400200b8
 8002ae0:	40020410 	.word	0x40020410
 8002ae4:	40020428 	.word	0x40020428
 8002ae8:	40020440 	.word	0x40020440
 8002aec:	40020458 	.word	0x40020458
 8002af0:	40020470 	.word	0x40020470
 8002af4:	40020488 	.word	0x40020488
 8002af8:	400204a0 	.word	0x400204a0
 8002afc:	400204b8 	.word	0x400204b8
 8002b00:	58025408 	.word	0x58025408
 8002b04:	5802541c 	.word	0x5802541c
 8002b08:	58025430 	.word	0x58025430
 8002b0c:	58025444 	.word	0x58025444
 8002b10:	58025458 	.word	0x58025458
 8002b14:	5802546c 	.word	0x5802546c
 8002b18:	58025480 	.word	0x58025480
 8002b1c:	58025494 	.word	0x58025494

08002b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e226      	b.n	8002f8a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Start_IT+0x2a>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e21f      	b.n	8002f8a <HAL_DMA_Start_IT+0x46a>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	f040 820a 	bne.w	8002f74 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a68      	ldr	r2, [pc, #416]	; (8002d14 <HAL_DMA_Start_IT+0x1f4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d04a      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a66      	ldr	r2, [pc, #408]	; (8002d18 <HAL_DMA_Start_IT+0x1f8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d045      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_DMA_Start_IT+0x1fc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a63      	ldr	r2, [pc, #396]	; (8002d20 <HAL_DMA_Start_IT+0x200>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d03b      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a62      	ldr	r2, [pc, #392]	; (8002d24 <HAL_DMA_Start_IT+0x204>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d036      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a60      	ldr	r2, [pc, #384]	; (8002d28 <HAL_DMA_Start_IT+0x208>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d031      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a5f      	ldr	r2, [pc, #380]	; (8002d2c <HAL_DMA_Start_IT+0x20c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d02c      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a5d      	ldr	r2, [pc, #372]	; (8002d30 <HAL_DMA_Start_IT+0x210>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d027      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a5c      	ldr	r2, [pc, #368]	; (8002d34 <HAL_DMA_Start_IT+0x214>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a5a      	ldr	r2, [pc, #360]	; (8002d38 <HAL_DMA_Start_IT+0x218>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a59      	ldr	r2, [pc, #356]	; (8002d3c <HAL_DMA_Start_IT+0x21c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a57      	ldr	r2, [pc, #348]	; (8002d40 <HAL_DMA_Start_IT+0x220>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_DMA_Start_IT+0x224>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a54      	ldr	r2, [pc, #336]	; (8002d48 <HAL_DMA_Start_IT+0x228>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a53      	ldr	r2, [pc, #332]	; (8002d4c <HAL_DMA_Start_IT+0x22c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_Start_IT+0xee>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a51      	ldr	r2, [pc, #324]	; (8002d50 <HAL_DMA_Start_IT+0x230>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <HAL_DMA_Start_IT+0x100>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e007      	b.n	8002c30 <HAL_DMA_Start_IT+0x110>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f001 fe6a 	bl	8004910 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a34      	ldr	r2, [pc, #208]	; (8002d14 <HAL_DMA_Start_IT+0x1f4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d04a      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a33      	ldr	r2, [pc, #204]	; (8002d18 <HAL_DMA_Start_IT+0x1f8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d045      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a31      	ldr	r2, [pc, #196]	; (8002d1c <HAL_DMA_Start_IT+0x1fc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d040      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <HAL_DMA_Start_IT+0x200>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d03b      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <HAL_DMA_Start_IT+0x204>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d036      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <HAL_DMA_Start_IT+0x208>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d031      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <HAL_DMA_Start_IT+0x20c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d02c      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <HAL_DMA_Start_IT+0x210>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d027      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <HAL_DMA_Start_IT+0x214>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d022      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_DMA_Start_IT+0x218>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d01d      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_DMA_Start_IT+0x21c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d018      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <HAL_DMA_Start_IT+0x220>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a22      	ldr	r2, [pc, #136]	; (8002d44 <HAL_DMA_Start_IT+0x224>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00e      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a21      	ldr	r2, [pc, #132]	; (8002d48 <HAL_DMA_Start_IT+0x228>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_DMA_Start_IT+0x22c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_DMA_Start_IT+0x1bc>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_DMA_Start_IT+0x230>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d101      	bne.n	8002ce0 <HAL_DMA_Start_IT+0x1c0>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <HAL_DMA_Start_IT+0x1c2>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d036      	beq.n	8002d54 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f023 021e 	bic.w	r2, r3, #30
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0216 	orr.w	r2, r2, #22
 8002cf8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d03e      	beq.n	8002d80 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0208 	orr.w	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e035      	b.n	8002d80 <HAL_DMA_Start_IT+0x260>
 8002d14:	40020010 	.word	0x40020010
 8002d18:	40020028 	.word	0x40020028
 8002d1c:	40020040 	.word	0x40020040
 8002d20:	40020058 	.word	0x40020058
 8002d24:	40020070 	.word	0x40020070
 8002d28:	40020088 	.word	0x40020088
 8002d2c:	400200a0 	.word	0x400200a0
 8002d30:	400200b8 	.word	0x400200b8
 8002d34:	40020410 	.word	0x40020410
 8002d38:	40020428 	.word	0x40020428
 8002d3c:	40020440 	.word	0x40020440
 8002d40:	40020458 	.word	0x40020458
 8002d44:	40020470 	.word	0x40020470
 8002d48:	40020488 	.word	0x40020488
 8002d4c:	400204a0 	.word	0x400204a0
 8002d50:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 020e 	bic.w	r2, r3, #14
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 020a 	orr.w	r2, r2, #10
 8002d66:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d007      	beq.n	8002d80 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0204 	orr.w	r2, r2, #4
 8002d7e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a83      	ldr	r2, [pc, #524]	; (8002f94 <HAL_DMA_Start_IT+0x474>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d072      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a82      	ldr	r2, [pc, #520]	; (8002f98 <HAL_DMA_Start_IT+0x478>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d06d      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a80      	ldr	r2, [pc, #512]	; (8002f9c <HAL_DMA_Start_IT+0x47c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d068      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7f      	ldr	r2, [pc, #508]	; (8002fa0 <HAL_DMA_Start_IT+0x480>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d063      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a7d      	ldr	r2, [pc, #500]	; (8002fa4 <HAL_DMA_Start_IT+0x484>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d05e      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7c      	ldr	r2, [pc, #496]	; (8002fa8 <HAL_DMA_Start_IT+0x488>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d059      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a7a      	ldr	r2, [pc, #488]	; (8002fac <HAL_DMA_Start_IT+0x48c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d054      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a79      	ldr	r2, [pc, #484]	; (8002fb0 <HAL_DMA_Start_IT+0x490>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d04f      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a77      	ldr	r2, [pc, #476]	; (8002fb4 <HAL_DMA_Start_IT+0x494>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d04a      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a76      	ldr	r2, [pc, #472]	; (8002fb8 <HAL_DMA_Start_IT+0x498>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d045      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a74      	ldr	r2, [pc, #464]	; (8002fbc <HAL_DMA_Start_IT+0x49c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d040      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a73      	ldr	r2, [pc, #460]	; (8002fc0 <HAL_DMA_Start_IT+0x4a0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d03b      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a71      	ldr	r2, [pc, #452]	; (8002fc4 <HAL_DMA_Start_IT+0x4a4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d036      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a70      	ldr	r2, [pc, #448]	; (8002fc8 <HAL_DMA_Start_IT+0x4a8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d031      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a6e      	ldr	r2, [pc, #440]	; (8002fcc <HAL_DMA_Start_IT+0x4ac>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d02c      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a6d      	ldr	r2, [pc, #436]	; (8002fd0 <HAL_DMA_Start_IT+0x4b0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d027      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6b      	ldr	r2, [pc, #428]	; (8002fd4 <HAL_DMA_Start_IT+0x4b4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d022      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6a      	ldr	r2, [pc, #424]	; (8002fd8 <HAL_DMA_Start_IT+0x4b8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d01d      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a68      	ldr	r2, [pc, #416]	; (8002fdc <HAL_DMA_Start_IT+0x4bc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d018      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a67      	ldr	r2, [pc, #412]	; (8002fe0 <HAL_DMA_Start_IT+0x4c0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d013      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a65      	ldr	r2, [pc, #404]	; (8002fe4 <HAL_DMA_Start_IT+0x4c4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00e      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a64      	ldr	r2, [pc, #400]	; (8002fe8 <HAL_DMA_Start_IT+0x4c8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d009      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a62      	ldr	r2, [pc, #392]	; (8002fec <HAL_DMA_Start_IT+0x4cc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_DMA_Start_IT+0x350>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a61      	ldr	r2, [pc, #388]	; (8002ff0 <HAL_DMA_Start_IT+0x4d0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d101      	bne.n	8002e74 <HAL_DMA_Start_IT+0x354>
 8002e70:	2301      	movs	r3, #1
 8002e72:	e000      	b.n	8002e76 <HAL_DMA_Start_IT+0x356>
 8002e74:	2300      	movs	r3, #0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01a      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e96:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a37      	ldr	r2, [pc, #220]	; (8002f94 <HAL_DMA_Start_IT+0x474>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d04a      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a36      	ldr	r2, [pc, #216]	; (8002f98 <HAL_DMA_Start_IT+0x478>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d045      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <HAL_DMA_Start_IT+0x47c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d040      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a33      	ldr	r2, [pc, #204]	; (8002fa0 <HAL_DMA_Start_IT+0x480>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d03b      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a31      	ldr	r2, [pc, #196]	; (8002fa4 <HAL_DMA_Start_IT+0x484>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d036      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a30      	ldr	r2, [pc, #192]	; (8002fa8 <HAL_DMA_Start_IT+0x488>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d031      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a2e      	ldr	r2, [pc, #184]	; (8002fac <HAL_DMA_Start_IT+0x48c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d02c      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a2d      	ldr	r2, [pc, #180]	; (8002fb0 <HAL_DMA_Start_IT+0x490>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d027      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2b      	ldr	r2, [pc, #172]	; (8002fb4 <HAL_DMA_Start_IT+0x494>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d022      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2a      	ldr	r2, [pc, #168]	; (8002fb8 <HAL_DMA_Start_IT+0x498>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d01d      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a28      	ldr	r2, [pc, #160]	; (8002fbc <HAL_DMA_Start_IT+0x49c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d018      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a27      	ldr	r2, [pc, #156]	; (8002fc0 <HAL_DMA_Start_IT+0x4a0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d013      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a25      	ldr	r2, [pc, #148]	; (8002fc4 <HAL_DMA_Start_IT+0x4a4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00e      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a24      	ldr	r2, [pc, #144]	; (8002fc8 <HAL_DMA_Start_IT+0x4a8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <HAL_DMA_Start_IT+0x4ac>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_DMA_Start_IT+0x430>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a21      	ldr	r2, [pc, #132]	; (8002fd0 <HAL_DMA_Start_IT+0x4b0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d108      	bne.n	8002f62 <HAL_DMA_Start_IT+0x442>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e012      	b.n	8002f88 <HAL_DMA_Start_IT+0x468>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e009      	b.n	8002f88 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40020010 	.word	0x40020010
 8002f98:	40020028 	.word	0x40020028
 8002f9c:	40020040 	.word	0x40020040
 8002fa0:	40020058 	.word	0x40020058
 8002fa4:	40020070 	.word	0x40020070
 8002fa8:	40020088 	.word	0x40020088
 8002fac:	400200a0 	.word	0x400200a0
 8002fb0:	400200b8 	.word	0x400200b8
 8002fb4:	40020410 	.word	0x40020410
 8002fb8:	40020428 	.word	0x40020428
 8002fbc:	40020440 	.word	0x40020440
 8002fc0:	40020458 	.word	0x40020458
 8002fc4:	40020470 	.word	0x40020470
 8002fc8:	40020488 	.word	0x40020488
 8002fcc:	400204a0 	.word	0x400204a0
 8002fd0:	400204b8 	.word	0x400204b8
 8002fd4:	58025408 	.word	0x58025408
 8002fd8:	5802541c 	.word	0x5802541c
 8002fdc:	58025430 	.word	0x58025430
 8002fe0:	58025444 	.word	0x58025444
 8002fe4:	58025458 	.word	0x58025458
 8002fe8:	5802546c 	.word	0x5802546c
 8002fec:	58025480 	.word	0x58025480
 8002ff0:	58025494 	.word	0x58025494

08002ff4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7fe ff46 	bl	8001e8c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e2dc      	b.n	80035c6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d008      	beq.n	800302a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2280      	movs	r2, #128	; 0x80
 800301c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e2cd      	b.n	80035c6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a76      	ldr	r2, [pc, #472]	; (8003208 <HAL_DMA_Abort+0x214>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d04a      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a74      	ldr	r2, [pc, #464]	; (800320c <HAL_DMA_Abort+0x218>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d045      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a73      	ldr	r2, [pc, #460]	; (8003210 <HAL_DMA_Abort+0x21c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d040      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a71      	ldr	r2, [pc, #452]	; (8003214 <HAL_DMA_Abort+0x220>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d03b      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a70      	ldr	r2, [pc, #448]	; (8003218 <HAL_DMA_Abort+0x224>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d036      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6e      	ldr	r2, [pc, #440]	; (800321c <HAL_DMA_Abort+0x228>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d031      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a6d      	ldr	r2, [pc, #436]	; (8003220 <HAL_DMA_Abort+0x22c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d02c      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6b      	ldr	r2, [pc, #428]	; (8003224 <HAL_DMA_Abort+0x230>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d027      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6a      	ldr	r2, [pc, #424]	; (8003228 <HAL_DMA_Abort+0x234>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d022      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a68      	ldr	r2, [pc, #416]	; (800322c <HAL_DMA_Abort+0x238>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01d      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a67      	ldr	r2, [pc, #412]	; (8003230 <HAL_DMA_Abort+0x23c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d018      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a65      	ldr	r2, [pc, #404]	; (8003234 <HAL_DMA_Abort+0x240>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d013      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a64      	ldr	r2, [pc, #400]	; (8003238 <HAL_DMA_Abort+0x244>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00e      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a62      	ldr	r2, [pc, #392]	; (800323c <HAL_DMA_Abort+0x248>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a61      	ldr	r2, [pc, #388]	; (8003240 <HAL_DMA_Abort+0x24c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_DMA_Abort+0xd6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a5f      	ldr	r2, [pc, #380]	; (8003244 <HAL_DMA_Abort+0x250>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_DMA_Abort+0xda>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_DMA_Abort+0xdc>
 80030ce:	2300      	movs	r3, #0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 021e 	bic.w	r2, r2, #30
 80030e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e00a      	b.n	8003112 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 020e 	bic.w	r2, r2, #14
 800310a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3c      	ldr	r2, [pc, #240]	; (8003208 <HAL_DMA_Abort+0x214>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d072      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3a      	ldr	r2, [pc, #232]	; (800320c <HAL_DMA_Abort+0x218>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d06d      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a39      	ldr	r2, [pc, #228]	; (8003210 <HAL_DMA_Abort+0x21c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d068      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a37      	ldr	r2, [pc, #220]	; (8003214 <HAL_DMA_Abort+0x220>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d063      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a36      	ldr	r2, [pc, #216]	; (8003218 <HAL_DMA_Abort+0x224>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d05e      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a34      	ldr	r2, [pc, #208]	; (800321c <HAL_DMA_Abort+0x228>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d059      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a33      	ldr	r2, [pc, #204]	; (8003220 <HAL_DMA_Abort+0x22c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d054      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a31      	ldr	r2, [pc, #196]	; (8003224 <HAL_DMA_Abort+0x230>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d04f      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a30      	ldr	r2, [pc, #192]	; (8003228 <HAL_DMA_Abort+0x234>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d04a      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2e      	ldr	r2, [pc, #184]	; (800322c <HAL_DMA_Abort+0x238>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d045      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <HAL_DMA_Abort+0x23c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d040      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <HAL_DMA_Abort+0x240>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d03b      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2a      	ldr	r2, [pc, #168]	; (8003238 <HAL_DMA_Abort+0x244>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d036      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a28      	ldr	r2, [pc, #160]	; (800323c <HAL_DMA_Abort+0x248>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d031      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_DMA_Abort+0x24c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d02c      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a25      	ldr	r2, [pc, #148]	; (8003244 <HAL_DMA_Abort+0x250>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d027      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a24      	ldr	r2, [pc, #144]	; (8003248 <HAL_DMA_Abort+0x254>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d022      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a22      	ldr	r2, [pc, #136]	; (800324c <HAL_DMA_Abort+0x258>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01d      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a21      	ldr	r2, [pc, #132]	; (8003250 <HAL_DMA_Abort+0x25c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d018      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_DMA_Abort+0x260>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_DMA_Abort+0x264>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00e      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_DMA_Abort+0x268>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1b      	ldr	r2, [pc, #108]	; (8003260 <HAL_DMA_Abort+0x26c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_DMA_Abort+0x20e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_DMA_Abort+0x270>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d132      	bne.n	8003268 <HAL_DMA_Abort+0x274>
 8003202:	2301      	movs	r3, #1
 8003204:	e031      	b.n	800326a <HAL_DMA_Abort+0x276>
 8003206:	bf00      	nop
 8003208:	40020010 	.word	0x40020010
 800320c:	40020028 	.word	0x40020028
 8003210:	40020040 	.word	0x40020040
 8003214:	40020058 	.word	0x40020058
 8003218:	40020070 	.word	0x40020070
 800321c:	40020088 	.word	0x40020088
 8003220:	400200a0 	.word	0x400200a0
 8003224:	400200b8 	.word	0x400200b8
 8003228:	40020410 	.word	0x40020410
 800322c:	40020428 	.word	0x40020428
 8003230:	40020440 	.word	0x40020440
 8003234:	40020458 	.word	0x40020458
 8003238:	40020470 	.word	0x40020470
 800323c:	40020488 	.word	0x40020488
 8003240:	400204a0 	.word	0x400204a0
 8003244:	400204b8 	.word	0x400204b8
 8003248:	58025408 	.word	0x58025408
 800324c:	5802541c 	.word	0x5802541c
 8003250:	58025430 	.word	0x58025430
 8003254:	58025444 	.word	0x58025444
 8003258:	58025458 	.word	0x58025458
 800325c:	5802546c 	.word	0x5802546c
 8003260:	58025480 	.word	0x58025480
 8003264:	58025494 	.word	0x58025494
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800327c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a6d      	ldr	r2, [pc, #436]	; (8003438 <HAL_DMA_Abort+0x444>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d04a      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6b      	ldr	r2, [pc, #428]	; (800343c <HAL_DMA_Abort+0x448>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d045      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6a      	ldr	r2, [pc, #424]	; (8003440 <HAL_DMA_Abort+0x44c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d040      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a68      	ldr	r2, [pc, #416]	; (8003444 <HAL_DMA_Abort+0x450>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d03b      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a67      	ldr	r2, [pc, #412]	; (8003448 <HAL_DMA_Abort+0x454>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d036      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a65      	ldr	r2, [pc, #404]	; (800344c <HAL_DMA_Abort+0x458>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a64      	ldr	r2, [pc, #400]	; (8003450 <HAL_DMA_Abort+0x45c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d02c      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a62      	ldr	r2, [pc, #392]	; (8003454 <HAL_DMA_Abort+0x460>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d027      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a61      	ldr	r2, [pc, #388]	; (8003458 <HAL_DMA_Abort+0x464>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a5f      	ldr	r2, [pc, #380]	; (800345c <HAL_DMA_Abort+0x468>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01d      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a5e      	ldr	r2, [pc, #376]	; (8003460 <HAL_DMA_Abort+0x46c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a5c      	ldr	r2, [pc, #368]	; (8003464 <HAL_DMA_Abort+0x470>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5b      	ldr	r2, [pc, #364]	; (8003468 <HAL_DMA_Abort+0x474>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a59      	ldr	r2, [pc, #356]	; (800346c <HAL_DMA_Abort+0x478>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a58      	ldr	r2, [pc, #352]	; (8003470 <HAL_DMA_Abort+0x47c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_DMA_Abort+0x32a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a56      	ldr	r2, [pc, #344]	; (8003474 <HAL_DMA_Abort+0x480>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <HAL_DMA_Abort+0x33c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e007      	b.n	8003340 <HAL_DMA_Abort+0x34c>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003340:	e013      	b.n	800336a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003342:	f7fe fda3 	bl	8001e8c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b05      	cmp	r3, #5
 800334e:	d90c      	bls.n	800336a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2203      	movs	r2, #3
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e12d      	b.n	80035c6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e5      	bne.n	8003342 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2f      	ldr	r2, [pc, #188]	; (8003438 <HAL_DMA_Abort+0x444>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d04a      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2d      	ldr	r2, [pc, #180]	; (800343c <HAL_DMA_Abort+0x448>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d045      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2c      	ldr	r2, [pc, #176]	; (8003440 <HAL_DMA_Abort+0x44c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d040      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2a      	ldr	r2, [pc, #168]	; (8003444 <HAL_DMA_Abort+0x450>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d03b      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <HAL_DMA_Abort+0x454>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d036      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a27      	ldr	r2, [pc, #156]	; (800344c <HAL_DMA_Abort+0x458>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <HAL_DMA_Abort+0x45c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d02c      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <HAL_DMA_Abort+0x460>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d027      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_DMA_Abort+0x464>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a21      	ldr	r2, [pc, #132]	; (800345c <HAL_DMA_Abort+0x468>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01d      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a20      	ldr	r2, [pc, #128]	; (8003460 <HAL_DMA_Abort+0x46c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d018      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_DMA_Abort+0x470>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_DMA_Abort+0x474>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <HAL_DMA_Abort+0x478>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1a      	ldr	r2, [pc, #104]	; (8003470 <HAL_DMA_Abort+0x47c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_DMA_Abort+0x422>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_DMA_Abort+0x480>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_DMA_Abort+0x426>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_DMA_Abort+0x428>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d02b      	beq.n	8003478 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	223f      	movs	r2, #63	; 0x3f
 8003430:	409a      	lsls	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	609a      	str	r2, [r3, #8]
 8003436:	e02a      	b.n	800348e <HAL_DMA_Abort+0x49a>
 8003438:	40020010 	.word	0x40020010
 800343c:	40020028 	.word	0x40020028
 8003440:	40020040 	.word	0x40020040
 8003444:	40020058 	.word	0x40020058
 8003448:	40020070 	.word	0x40020070
 800344c:	40020088 	.word	0x40020088
 8003450:	400200a0 	.word	0x400200a0
 8003454:	400200b8 	.word	0x400200b8
 8003458:	40020410 	.word	0x40020410
 800345c:	40020428 	.word	0x40020428
 8003460:	40020440 	.word	0x40020440
 8003464:	40020458 	.word	0x40020458
 8003468:	40020470 	.word	0x40020470
 800346c:	40020488 	.word	0x40020488
 8003470:	400204a0 	.word	0x400204a0
 8003474:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2201      	movs	r2, #1
 8003488:	409a      	lsls	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a4f      	ldr	r2, [pc, #316]	; (80035d0 <HAL_DMA_Abort+0x5dc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d072      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a4d      	ldr	r2, [pc, #308]	; (80035d4 <HAL_DMA_Abort+0x5e0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d06d      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a4c      	ldr	r2, [pc, #304]	; (80035d8 <HAL_DMA_Abort+0x5e4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d068      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a4a      	ldr	r2, [pc, #296]	; (80035dc <HAL_DMA_Abort+0x5e8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d063      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a49      	ldr	r2, [pc, #292]	; (80035e0 <HAL_DMA_Abort+0x5ec>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d05e      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a47      	ldr	r2, [pc, #284]	; (80035e4 <HAL_DMA_Abort+0x5f0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d059      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a46      	ldr	r2, [pc, #280]	; (80035e8 <HAL_DMA_Abort+0x5f4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d054      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a44      	ldr	r2, [pc, #272]	; (80035ec <HAL_DMA_Abort+0x5f8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04f      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a43      	ldr	r2, [pc, #268]	; (80035f0 <HAL_DMA_Abort+0x5fc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d04a      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a41      	ldr	r2, [pc, #260]	; (80035f4 <HAL_DMA_Abort+0x600>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d045      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a40      	ldr	r2, [pc, #256]	; (80035f8 <HAL_DMA_Abort+0x604>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d040      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a3e      	ldr	r2, [pc, #248]	; (80035fc <HAL_DMA_Abort+0x608>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d03b      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <HAL_DMA_Abort+0x60c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d036      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <HAL_DMA_Abort+0x610>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d031      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a3a      	ldr	r2, [pc, #232]	; (8003608 <HAL_DMA_Abort+0x614>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d02c      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a38      	ldr	r2, [pc, #224]	; (800360c <HAL_DMA_Abort+0x618>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d027      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a37      	ldr	r2, [pc, #220]	; (8003610 <HAL_DMA_Abort+0x61c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d022      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a35      	ldr	r2, [pc, #212]	; (8003614 <HAL_DMA_Abort+0x620>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d01d      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a34      	ldr	r2, [pc, #208]	; (8003618 <HAL_DMA_Abort+0x624>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d018      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a32      	ldr	r2, [pc, #200]	; (800361c <HAL_DMA_Abort+0x628>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a31      	ldr	r2, [pc, #196]	; (8003620 <HAL_DMA_Abort+0x62c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00e      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2f      	ldr	r2, [pc, #188]	; (8003624 <HAL_DMA_Abort+0x630>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <HAL_DMA_Abort+0x634>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_DMA_Abort+0x58a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2c      	ldr	r2, [pc, #176]	; (800362c <HAL_DMA_Abort+0x638>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_DMA_Abort+0x58e>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <HAL_DMA_Abort+0x590>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d015      	beq.n	80035b4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003590:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035a8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035b2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40020010 	.word	0x40020010
 80035d4:	40020028 	.word	0x40020028
 80035d8:	40020040 	.word	0x40020040
 80035dc:	40020058 	.word	0x40020058
 80035e0:	40020070 	.word	0x40020070
 80035e4:	40020088 	.word	0x40020088
 80035e8:	400200a0 	.word	0x400200a0
 80035ec:	400200b8 	.word	0x400200b8
 80035f0:	40020410 	.word	0x40020410
 80035f4:	40020428 	.word	0x40020428
 80035f8:	40020440 	.word	0x40020440
 80035fc:	40020458 	.word	0x40020458
 8003600:	40020470 	.word	0x40020470
 8003604:	40020488 	.word	0x40020488
 8003608:	400204a0 	.word	0x400204a0
 800360c:	400204b8 	.word	0x400204b8
 8003610:	58025408 	.word	0x58025408
 8003614:	5802541c 	.word	0x5802541c
 8003618:	58025430 	.word	0x58025430
 800361c:	58025444 	.word	0x58025444
 8003620:	58025458 	.word	0x58025458
 8003624:	5802546c 	.word	0x5802546c
 8003628:	58025480 	.word	0x58025480
 800362c:	58025494 	.word	0x58025494

08003630 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e237      	b.n	8003ab2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d004      	beq.n	8003658 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e22c      	b.n	8003ab2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5c      	ldr	r2, [pc, #368]	; (80037d0 <HAL_DMA_Abort_IT+0x1a0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d04a      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a5b      	ldr	r2, [pc, #364]	; (80037d4 <HAL_DMA_Abort_IT+0x1a4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d045      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a59      	ldr	r2, [pc, #356]	; (80037d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d040      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a58      	ldr	r2, [pc, #352]	; (80037dc <HAL_DMA_Abort_IT+0x1ac>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d03b      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a56      	ldr	r2, [pc, #344]	; (80037e0 <HAL_DMA_Abort_IT+0x1b0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d036      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a55      	ldr	r2, [pc, #340]	; (80037e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d031      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a53      	ldr	r2, [pc, #332]	; (80037e8 <HAL_DMA_Abort_IT+0x1b8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d02c      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a52      	ldr	r2, [pc, #328]	; (80037ec <HAL_DMA_Abort_IT+0x1bc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d027      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a50      	ldr	r2, [pc, #320]	; (80037f0 <HAL_DMA_Abort_IT+0x1c0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d022      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a4f      	ldr	r2, [pc, #316]	; (80037f4 <HAL_DMA_Abort_IT+0x1c4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d01d      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a4d      	ldr	r2, [pc, #308]	; (80037f8 <HAL_DMA_Abort_IT+0x1c8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d018      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a4c      	ldr	r2, [pc, #304]	; (80037fc <HAL_DMA_Abort_IT+0x1cc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a4a      	ldr	r2, [pc, #296]	; (8003800 <HAL_DMA_Abort_IT+0x1d0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00e      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a49      	ldr	r2, [pc, #292]	; (8003804 <HAL_DMA_Abort_IT+0x1d4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a47      	ldr	r2, [pc, #284]	; (8003808 <HAL_DMA_Abort_IT+0x1d8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_DMA_Abort_IT+0xc8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a46      	ldr	r2, [pc, #280]	; (800380c <HAL_DMA_Abort_IT+0x1dc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_DMA_Abort_IT+0xcc>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_DMA_Abort_IT+0xce>
 80036fc:	2300      	movs	r3, #0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8086 	beq.w	8003810 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2204      	movs	r2, #4
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2f      	ldr	r2, [pc, #188]	; (80037d0 <HAL_DMA_Abort_IT+0x1a0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d04a      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2e      	ldr	r2, [pc, #184]	; (80037d4 <HAL_DMA_Abort_IT+0x1a4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d045      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2c      	ldr	r2, [pc, #176]	; (80037d8 <HAL_DMA_Abort_IT+0x1a8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d040      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <HAL_DMA_Abort_IT+0x1ac>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d03b      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <HAL_DMA_Abort_IT+0x1b0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d036      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a28      	ldr	r2, [pc, #160]	; (80037e4 <HAL_DMA_Abort_IT+0x1b4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d031      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <HAL_DMA_Abort_IT+0x1b8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02c      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a25      	ldr	r2, [pc, #148]	; (80037ec <HAL_DMA_Abort_IT+0x1bc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d027      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a23      	ldr	r2, [pc, #140]	; (80037f0 <HAL_DMA_Abort_IT+0x1c0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d022      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a22      	ldr	r2, [pc, #136]	; (80037f4 <HAL_DMA_Abort_IT+0x1c4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d01d      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <HAL_DMA_Abort_IT+0x1c8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d018      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <HAL_DMA_Abort_IT+0x1cc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d013      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <HAL_DMA_Abort_IT+0x1d0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00e      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <HAL_DMA_Abort_IT+0x1d4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <HAL_DMA_Abort_IT+0x1d8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_DMA_Abort_IT+0x17c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a19      	ldr	r2, [pc, #100]	; (800380c <HAL_DMA_Abort_IT+0x1dc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d108      	bne.n	80037be <HAL_DMA_Abort_IT+0x18e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e178      	b.n	8003ab0 <HAL_DMA_Abort_IT+0x480>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e16f      	b.n	8003ab0 <HAL_DMA_Abort_IT+0x480>
 80037d0:	40020010 	.word	0x40020010
 80037d4:	40020028 	.word	0x40020028
 80037d8:	40020040 	.word	0x40020040
 80037dc:	40020058 	.word	0x40020058
 80037e0:	40020070 	.word	0x40020070
 80037e4:	40020088 	.word	0x40020088
 80037e8:	400200a0 	.word	0x400200a0
 80037ec:	400200b8 	.word	0x400200b8
 80037f0:	40020410 	.word	0x40020410
 80037f4:	40020428 	.word	0x40020428
 80037f8:	40020440 	.word	0x40020440
 80037fc:	40020458 	.word	0x40020458
 8003800:	40020470 	.word	0x40020470
 8003804:	40020488 	.word	0x40020488
 8003808:	400204a0 	.word	0x400204a0
 800380c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 020e 	bic.w	r2, r2, #14
 800381e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6c      	ldr	r2, [pc, #432]	; (80039d8 <HAL_DMA_Abort_IT+0x3a8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d04a      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6b      	ldr	r2, [pc, #428]	; (80039dc <HAL_DMA_Abort_IT+0x3ac>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d045      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a69      	ldr	r2, [pc, #420]	; (80039e0 <HAL_DMA_Abort_IT+0x3b0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d040      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a68      	ldr	r2, [pc, #416]	; (80039e4 <HAL_DMA_Abort_IT+0x3b4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d03b      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a66      	ldr	r2, [pc, #408]	; (80039e8 <HAL_DMA_Abort_IT+0x3b8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d036      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a65      	ldr	r2, [pc, #404]	; (80039ec <HAL_DMA_Abort_IT+0x3bc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d031      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a63      	ldr	r2, [pc, #396]	; (80039f0 <HAL_DMA_Abort_IT+0x3c0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d02c      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a62      	ldr	r2, [pc, #392]	; (80039f4 <HAL_DMA_Abort_IT+0x3c4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d027      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a60      	ldr	r2, [pc, #384]	; (80039f8 <HAL_DMA_Abort_IT+0x3c8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d022      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a5f      	ldr	r2, [pc, #380]	; (80039fc <HAL_DMA_Abort_IT+0x3cc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d01d      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a5d      	ldr	r2, [pc, #372]	; (8003a00 <HAL_DMA_Abort_IT+0x3d0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d018      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5c      	ldr	r2, [pc, #368]	; (8003a04 <HAL_DMA_Abort_IT+0x3d4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5a      	ldr	r2, [pc, #360]	; (8003a08 <HAL_DMA_Abort_IT+0x3d8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00e      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a59      	ldr	r2, [pc, #356]	; (8003a0c <HAL_DMA_Abort_IT+0x3dc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_DMA_Abort_IT+0x3e0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d004      	beq.n	80038c0 <HAL_DMA_Abort_IT+0x290>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_DMA_Abort_IT+0x3e4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <HAL_DMA_Abort_IT+0x2a2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0201 	bic.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e007      	b.n	80038e2 <HAL_DMA_Abort_IT+0x2b2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3c      	ldr	r2, [pc, #240]	; (80039d8 <HAL_DMA_Abort_IT+0x3a8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d072      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a3a      	ldr	r2, [pc, #232]	; (80039dc <HAL_DMA_Abort_IT+0x3ac>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d06d      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <HAL_DMA_Abort_IT+0x3b0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d068      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a37      	ldr	r2, [pc, #220]	; (80039e4 <HAL_DMA_Abort_IT+0x3b4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d063      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a36      	ldr	r2, [pc, #216]	; (80039e8 <HAL_DMA_Abort_IT+0x3b8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d05e      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a34      	ldr	r2, [pc, #208]	; (80039ec <HAL_DMA_Abort_IT+0x3bc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d059      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a33      	ldr	r2, [pc, #204]	; (80039f0 <HAL_DMA_Abort_IT+0x3c0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d054      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <HAL_DMA_Abort_IT+0x3c4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d04f      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a30      	ldr	r2, [pc, #192]	; (80039f8 <HAL_DMA_Abort_IT+0x3c8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d04a      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2e      	ldr	r2, [pc, #184]	; (80039fc <HAL_DMA_Abort_IT+0x3cc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d045      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <HAL_DMA_Abort_IT+0x3d0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d040      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <HAL_DMA_Abort_IT+0x3d4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d03b      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <HAL_DMA_Abort_IT+0x3d8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d036      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <HAL_DMA_Abort_IT+0x3dc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d031      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_DMA_Abort_IT+0x3e0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d02c      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a25      	ldr	r2, [pc, #148]	; (8003a14 <HAL_DMA_Abort_IT+0x3e4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d027      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a24      	ldr	r2, [pc, #144]	; (8003a18 <HAL_DMA_Abort_IT+0x3e8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d022      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <HAL_DMA_Abort_IT+0x3ec>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01d      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <HAL_DMA_Abort_IT+0x3f0>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d018      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_DMA_Abort_IT+0x3f4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <HAL_DMA_Abort_IT+0x3f8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_DMA_Abort_IT+0x3fc>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_DMA_Abort_IT+0x400>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x3a2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <HAL_DMA_Abort_IT+0x404>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d132      	bne.n	8003a38 <HAL_DMA_Abort_IT+0x408>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e031      	b.n	8003a3a <HAL_DMA_Abort_IT+0x40a>
 80039d6:	bf00      	nop
 80039d8:	40020010 	.word	0x40020010
 80039dc:	40020028 	.word	0x40020028
 80039e0:	40020040 	.word	0x40020040
 80039e4:	40020058 	.word	0x40020058
 80039e8:	40020070 	.word	0x40020070
 80039ec:	40020088 	.word	0x40020088
 80039f0:	400200a0 	.word	0x400200a0
 80039f4:	400200b8 	.word	0x400200b8
 80039f8:	40020410 	.word	0x40020410
 80039fc:	40020428 	.word	0x40020428
 8003a00:	40020440 	.word	0x40020440
 8003a04:	40020458 	.word	0x40020458
 8003a08:	40020470 	.word	0x40020470
 8003a0c:	40020488 	.word	0x40020488
 8003a10:	400204a0 	.word	0x400204a0
 8003a14:	400204b8 	.word	0x400204b8
 8003a18:	58025408 	.word	0x58025408
 8003a1c:	5802541c 	.word	0x5802541c
 8003a20:	58025430 	.word	0x58025430
 8003a24:	58025444 	.word	0x58025444
 8003a28:	58025458 	.word	0x58025458
 8003a2c:	5802546c 	.word	0x5802546c
 8003a30:	58025480 	.word	0x58025480
 8003a34:	58025494 	.word	0x58025494
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d028      	beq.n	8003a90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop

08003abc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ac8:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_DMA_IRQHandler+0x1ac>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a67      	ldr	r2, [pc, #412]	; (8003c6c <HAL_DMA_IRQHandler+0x1b0>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0a9b      	lsrs	r3, r3, #10
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5f      	ldr	r2, [pc, #380]	; (8003c70 <HAL_DMA_IRQHandler+0x1b4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d04a      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a5d      	ldr	r2, [pc, #372]	; (8003c74 <HAL_DMA_IRQHandler+0x1b8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d045      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a5c      	ldr	r2, [pc, #368]	; (8003c78 <HAL_DMA_IRQHandler+0x1bc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d040      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a5a      	ldr	r2, [pc, #360]	; (8003c7c <HAL_DMA_IRQHandler+0x1c0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d03b      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a59      	ldr	r2, [pc, #356]	; (8003c80 <HAL_DMA_IRQHandler+0x1c4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d036      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a57      	ldr	r2, [pc, #348]	; (8003c84 <HAL_DMA_IRQHandler+0x1c8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d031      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a56      	ldr	r2, [pc, #344]	; (8003c88 <HAL_DMA_IRQHandler+0x1cc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d02c      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a54      	ldr	r2, [pc, #336]	; (8003c8c <HAL_DMA_IRQHandler+0x1d0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d027      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a53      	ldr	r2, [pc, #332]	; (8003c90 <HAL_DMA_IRQHandler+0x1d4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d022      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a51      	ldr	r2, [pc, #324]	; (8003c94 <HAL_DMA_IRQHandler+0x1d8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01d      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a50      	ldr	r2, [pc, #320]	; (8003c98 <HAL_DMA_IRQHandler+0x1dc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d018      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a4e      	ldr	r2, [pc, #312]	; (8003c9c <HAL_DMA_IRQHandler+0x1e0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4d      	ldr	r2, [pc, #308]	; (8003ca0 <HAL_DMA_IRQHandler+0x1e4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4b      	ldr	r2, [pc, #300]	; (8003ca4 <HAL_DMA_IRQHandler+0x1e8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d009      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <HAL_DMA_IRQHandler+0x1ec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <HAL_DMA_IRQHandler+0xd2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a48      	ldr	r2, [pc, #288]	; (8003cac <HAL_DMA_IRQHandler+0x1f0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_DMA_IRQHandler+0xd6>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_DMA_IRQHandler+0xd8>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 842b 	beq.w	80043f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	2208      	movs	r2, #8
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 80a2 	beq.w	8003cf4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a2e      	ldr	r2, [pc, #184]	; (8003c70 <HAL_DMA_IRQHandler+0x1b4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d04a      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2d      	ldr	r2, [pc, #180]	; (8003c74 <HAL_DMA_IRQHandler+0x1b8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d045      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a2b      	ldr	r2, [pc, #172]	; (8003c78 <HAL_DMA_IRQHandler+0x1bc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d040      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2a      	ldr	r2, [pc, #168]	; (8003c7c <HAL_DMA_IRQHandler+0x1c0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d03b      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a28      	ldr	r2, [pc, #160]	; (8003c80 <HAL_DMA_IRQHandler+0x1c4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d036      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a27      	ldr	r2, [pc, #156]	; (8003c84 <HAL_DMA_IRQHandler+0x1c8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d031      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <HAL_DMA_IRQHandler+0x1cc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d02c      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a24      	ldr	r2, [pc, #144]	; (8003c8c <HAL_DMA_IRQHandler+0x1d0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d027      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a22      	ldr	r2, [pc, #136]	; (8003c90 <HAL_DMA_IRQHandler+0x1d4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d022      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a21      	ldr	r2, [pc, #132]	; (8003c94 <HAL_DMA_IRQHandler+0x1d8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d01d      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <HAL_DMA_IRQHandler+0x1dc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d018      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <HAL_DMA_IRQHandler+0x1e0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d013      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <HAL_DMA_IRQHandler+0x1e4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00e      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <HAL_DMA_IRQHandler+0x1e8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d009      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <HAL_DMA_IRQHandler+0x1ec>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x194>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a18      	ldr	r2, [pc, #96]	; (8003cac <HAL_DMA_IRQHandler+0x1f0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d12f      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x1f4>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	e02e      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x208>
 8003c66:	bf00      	nop
 8003c68:	24000000 	.word	0x24000000
 8003c6c:	1b4e81b5 	.word	0x1b4e81b5
 8003c70:	40020010 	.word	0x40020010
 8003c74:	40020028 	.word	0x40020028
 8003c78:	40020040 	.word	0x40020040
 8003c7c:	40020058 	.word	0x40020058
 8003c80:	40020070 	.word	0x40020070
 8003c84:	40020088 	.word	0x40020088
 8003c88:	400200a0 	.word	0x400200a0
 8003c8c:	400200b8 	.word	0x400200b8
 8003c90:	40020410 	.word	0x40020410
 8003c94:	40020428 	.word	0x40020428
 8003c98:	40020440 	.word	0x40020440
 8003c9c:	40020458 	.word	0x40020458
 8003ca0:	40020470 	.word	0x40020470
 8003ca4:	40020488 	.word	0x40020488
 8003ca8:	400204a0 	.word	0x400204a0
 8003cac:	400204b8 	.word	0x400204b8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0204 	bic.w	r2, r2, #4
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	f043 0201 	orr.w	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d06e      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a69      	ldr	r2, [pc, #420]	; (8003eb4 <HAL_DMA_IRQHandler+0x3f8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d04a      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a67      	ldr	r2, [pc, #412]	; (8003eb8 <HAL_DMA_IRQHandler+0x3fc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d045      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a66      	ldr	r2, [pc, #408]	; (8003ebc <HAL_DMA_IRQHandler+0x400>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d040      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a64      	ldr	r2, [pc, #400]	; (8003ec0 <HAL_DMA_IRQHandler+0x404>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d03b      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a63      	ldr	r2, [pc, #396]	; (8003ec4 <HAL_DMA_IRQHandler+0x408>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d036      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a61      	ldr	r2, [pc, #388]	; (8003ec8 <HAL_DMA_IRQHandler+0x40c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d031      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a60      	ldr	r2, [pc, #384]	; (8003ecc <HAL_DMA_IRQHandler+0x410>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d02c      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5e      	ldr	r2, [pc, #376]	; (8003ed0 <HAL_DMA_IRQHandler+0x414>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d027      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a5d      	ldr	r2, [pc, #372]	; (8003ed4 <HAL_DMA_IRQHandler+0x418>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a5b      	ldr	r2, [pc, #364]	; (8003ed8 <HAL_DMA_IRQHandler+0x41c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a5a      	ldr	r2, [pc, #360]	; (8003edc <HAL_DMA_IRQHandler+0x420>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a58      	ldr	r2, [pc, #352]	; (8003ee0 <HAL_DMA_IRQHandler+0x424>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a57      	ldr	r2, [pc, #348]	; (8003ee4 <HAL_DMA_IRQHandler+0x428>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a55      	ldr	r2, [pc, #340]	; (8003ee8 <HAL_DMA_IRQHandler+0x42c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a54      	ldr	r2, [pc, #336]	; (8003eec <HAL_DMA_IRQHandler+0x430>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_DMA_IRQHandler+0x2ee>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <HAL_DMA_IRQHandler+0x434>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10a      	bne.n	8003dc0 <HAL_DMA_IRQHandler+0x304>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bf14      	ite	ne
 8003db8:	2301      	movne	r3, #1
 8003dba:	2300      	moveq	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	e003      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x30c>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f043 0202 	orr.w	r2, r3, #2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2204      	movs	r2, #4
 8003df2:	409a      	lsls	r2, r3
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 808f 	beq.w	8003f1c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2c      	ldr	r2, [pc, #176]	; (8003eb4 <HAL_DMA_IRQHandler+0x3f8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d04a      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <HAL_DMA_IRQHandler+0x3fc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d045      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <HAL_DMA_IRQHandler+0x400>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d040      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <HAL_DMA_IRQHandler+0x404>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d03b      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <HAL_DMA_IRQHandler+0x408>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d036      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a24      	ldr	r2, [pc, #144]	; (8003ec8 <HAL_DMA_IRQHandler+0x40c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d031      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <HAL_DMA_IRQHandler+0x410>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d02c      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_DMA_IRQHandler+0x414>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d027      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a20      	ldr	r2, [pc, #128]	; (8003ed4 <HAL_DMA_IRQHandler+0x418>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d022      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <HAL_DMA_IRQHandler+0x41c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01d      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <HAL_DMA_IRQHandler+0x420>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <HAL_DMA_IRQHandler+0x424>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ee4 <HAL_DMA_IRQHandler+0x428>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <HAL_DMA_IRQHandler+0x42c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a17      	ldr	r2, [pc, #92]	; (8003eec <HAL_DMA_IRQHandler+0x430>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x3e2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <HAL_DMA_IRQHandler+0x434>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d12a      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x438>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	e023      	b.n	8003efc <HAL_DMA_IRQHandler+0x440>
 8003eb4:	40020010 	.word	0x40020010
 8003eb8:	40020028 	.word	0x40020028
 8003ebc:	40020040 	.word	0x40020040
 8003ec0:	40020058 	.word	0x40020058
 8003ec4:	40020070 	.word	0x40020070
 8003ec8:	40020088 	.word	0x40020088
 8003ecc:	400200a0 	.word	0x400200a0
 8003ed0:	400200b8 	.word	0x400200b8
 8003ed4:	40020410 	.word	0x40020410
 8003ed8:	40020428 	.word	0x40020428
 8003edc:	40020440 	.word	0x40020440
 8003ee0:	40020458 	.word	0x40020458
 8003ee4:	40020470 	.word	0x40020470
 8003ee8:	40020488 	.word	0x40020488
 8003eec:	400204a0 	.word	0x400204a0
 8003ef0:	400204b8 	.word	0x400204b8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00d      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2204      	movs	r2, #4
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f14:	f043 0204 	orr.w	r2, r3, #4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2210      	movs	r2, #16
 8003f26:	409a      	lsls	r2, r3
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a6 	beq.w	800407e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a85      	ldr	r2, [pc, #532]	; (800414c <HAL_DMA_IRQHandler+0x690>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d04a      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a83      	ldr	r2, [pc, #524]	; (8004150 <HAL_DMA_IRQHandler+0x694>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d045      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a82      	ldr	r2, [pc, #520]	; (8004154 <HAL_DMA_IRQHandler+0x698>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d040      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a80      	ldr	r2, [pc, #512]	; (8004158 <HAL_DMA_IRQHandler+0x69c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d03b      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a7f      	ldr	r2, [pc, #508]	; (800415c <HAL_DMA_IRQHandler+0x6a0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d036      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a7d      	ldr	r2, [pc, #500]	; (8004160 <HAL_DMA_IRQHandler+0x6a4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d031      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a7c      	ldr	r2, [pc, #496]	; (8004164 <HAL_DMA_IRQHandler+0x6a8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d02c      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a7a      	ldr	r2, [pc, #488]	; (8004168 <HAL_DMA_IRQHandler+0x6ac>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d027      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a79      	ldr	r2, [pc, #484]	; (800416c <HAL_DMA_IRQHandler+0x6b0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d022      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a77      	ldr	r2, [pc, #476]	; (8004170 <HAL_DMA_IRQHandler+0x6b4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01d      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a76      	ldr	r2, [pc, #472]	; (8004174 <HAL_DMA_IRQHandler+0x6b8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a74      	ldr	r2, [pc, #464]	; (8004178 <HAL_DMA_IRQHandler+0x6bc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a73      	ldr	r2, [pc, #460]	; (800417c <HAL_DMA_IRQHandler+0x6c0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a71      	ldr	r2, [pc, #452]	; (8004180 <HAL_DMA_IRQHandler+0x6c4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a70      	ldr	r2, [pc, #448]	; (8004184 <HAL_DMA_IRQHandler+0x6c8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x516>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a6e      	ldr	r2, [pc, #440]	; (8004188 <HAL_DMA_IRQHandler+0x6cc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_DMA_IRQHandler+0x52c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e009      	b.n	8003ffc <HAL_DMA_IRQHandler+0x540>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf14      	ite	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	2300      	moveq	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d03e      	beq.n	800407e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2210      	movs	r2, #16
 800400a:	409a      	lsls	r2, r3
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d018      	beq.n	8004050 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d108      	bne.n	800403e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d024      	beq.n	800407e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
 800403c:	e01f      	b.n	800407e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004042:	2b00      	cmp	r3, #0
 8004044:	d01b      	beq.n	800407e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
 800404e:	e016      	b.n	800407e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0208 	bic.w	r2, r2, #8
 800406c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	f003 031f 	and.w	r3, r3, #31
 8004086:	2220      	movs	r2, #32
 8004088:	409a      	lsls	r2, r3
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8110 	beq.w	80042b4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2c      	ldr	r2, [pc, #176]	; (800414c <HAL_DMA_IRQHandler+0x690>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d04a      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2b      	ldr	r2, [pc, #172]	; (8004150 <HAL_DMA_IRQHandler+0x694>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d045      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a29      	ldr	r2, [pc, #164]	; (8004154 <HAL_DMA_IRQHandler+0x698>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d040      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a28      	ldr	r2, [pc, #160]	; (8004158 <HAL_DMA_IRQHandler+0x69c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d03b      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a26      	ldr	r2, [pc, #152]	; (800415c <HAL_DMA_IRQHandler+0x6a0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d036      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a25      	ldr	r2, [pc, #148]	; (8004160 <HAL_DMA_IRQHandler+0x6a4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d031      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a23      	ldr	r2, [pc, #140]	; (8004164 <HAL_DMA_IRQHandler+0x6a8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d02c      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a22      	ldr	r2, [pc, #136]	; (8004168 <HAL_DMA_IRQHandler+0x6ac>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d027      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a20      	ldr	r2, [pc, #128]	; (800416c <HAL_DMA_IRQHandler+0x6b0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d022      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <HAL_DMA_IRQHandler+0x6b4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d01d      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <HAL_DMA_IRQHandler+0x6b8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d018      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <HAL_DMA_IRQHandler+0x6bc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d013      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1a      	ldr	r2, [pc, #104]	; (800417c <HAL_DMA_IRQHandler+0x6c0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00e      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a19      	ldr	r2, [pc, #100]	; (8004180 <HAL_DMA_IRQHandler+0x6c4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d009      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_DMA_IRQHandler+0x6c8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d004      	beq.n	8004134 <HAL_DMA_IRQHandler+0x678>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_DMA_IRQHandler+0x6cc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d12b      	bne.n	800418c <HAL_DMA_IRQHandler+0x6d0>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0310 	and.w	r3, r3, #16
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e02a      	b.n	80041a0 <HAL_DMA_IRQHandler+0x6e4>
 800414a:	bf00      	nop
 800414c:	40020010 	.word	0x40020010
 8004150:	40020028 	.word	0x40020028
 8004154:	40020040 	.word	0x40020040
 8004158:	40020058 	.word	0x40020058
 800415c:	40020070 	.word	0x40020070
 8004160:	40020088 	.word	0x40020088
 8004164:	400200a0 	.word	0x400200a0
 8004168:	400200b8 	.word	0x400200b8
 800416c:	40020410 	.word	0x40020410
 8004170:	40020428 	.word	0x40020428
 8004174:	40020440 	.word	0x40020440
 8004178:	40020458 	.word	0x40020458
 800417c:	40020470 	.word	0x40020470
 8004180:	40020488 	.word	0x40020488
 8004184:	400204a0 	.word	0x400204a0
 8004188:	400204b8 	.word	0x400204b8
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8087 	beq.w	80042b4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	f003 031f 	and.w	r3, r3, #31
 80041ae:	2220      	movs	r2, #32
 80041b0:	409a      	lsls	r2, r3
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d139      	bne.n	8004236 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0216 	bic.w	r2, r2, #22
 80041d0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <HAL_DMA_IRQHandler+0x736>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0208 	bic.w	r2, r2, #8
 8004200:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	223f      	movs	r2, #63	; 0x3f
 800420c:	409a      	lsls	r2, r3
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 834a 	beq.w	80048c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
          }
          return;
 8004234:	e344      	b.n	80048c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d018      	beq.n	8004276 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d108      	bne.n	8004264 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02c      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
 8004262:	e027      	b.n	80042b4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	2b00      	cmp	r3, #0
 800426a:	d023      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	4798      	blx	r3
 8004274:	e01e      	b.n	80042b4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10f      	bne.n	80042a4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0210 	bic.w	r2, r2, #16
 8004292:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8306 	beq.w	80048ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 8088 	beq.w	80043dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2204      	movs	r2, #4
 80042d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a7a      	ldr	r2, [pc, #488]	; (80044c4 <HAL_DMA_IRQHandler+0xa08>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d04a      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a79      	ldr	r2, [pc, #484]	; (80044c8 <HAL_DMA_IRQHandler+0xa0c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d045      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a77      	ldr	r2, [pc, #476]	; (80044cc <HAL_DMA_IRQHandler+0xa10>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d040      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a76      	ldr	r2, [pc, #472]	; (80044d0 <HAL_DMA_IRQHandler+0xa14>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d03b      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a74      	ldr	r2, [pc, #464]	; (80044d4 <HAL_DMA_IRQHandler+0xa18>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d036      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a73      	ldr	r2, [pc, #460]	; (80044d8 <HAL_DMA_IRQHandler+0xa1c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d031      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a71      	ldr	r2, [pc, #452]	; (80044dc <HAL_DMA_IRQHandler+0xa20>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d02c      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a70      	ldr	r2, [pc, #448]	; (80044e0 <HAL_DMA_IRQHandler+0xa24>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d027      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6e      	ldr	r2, [pc, #440]	; (80044e4 <HAL_DMA_IRQHandler+0xa28>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d022      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6d      	ldr	r2, [pc, #436]	; (80044e8 <HAL_DMA_IRQHandler+0xa2c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d01d      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a6b      	ldr	r2, [pc, #428]	; (80044ec <HAL_DMA_IRQHandler+0xa30>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6a      	ldr	r2, [pc, #424]	; (80044f0 <HAL_DMA_IRQHandler+0xa34>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a68      	ldr	r2, [pc, #416]	; (80044f4 <HAL_DMA_IRQHandler+0xa38>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a67      	ldr	r2, [pc, #412]	; (80044f8 <HAL_DMA_IRQHandler+0xa3c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a65      	ldr	r2, [pc, #404]	; (80044fc <HAL_DMA_IRQHandler+0xa40>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_DMA_IRQHandler+0x8b8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a64      	ldr	r2, [pc, #400]	; (8004500 <HAL_DMA_IRQHandler+0xa44>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d108      	bne.n	8004386 <HAL_DMA_IRQHandler+0x8ca>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0201 	bic.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e007      	b.n	8004396 <HAL_DMA_IRQHandler+0x8da>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800439e:	429a      	cmp	r2, r3
 80043a0:	d307      	bcc.n	80043b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f2      	bne.n	8004396 <HAL_DMA_IRQHandler+0x8da>
 80043b0:	e000      	b.n	80043b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d004      	beq.n	80043cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2203      	movs	r2, #3
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80043ca:	e003      	b.n	80043d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8272 	beq.w	80048ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
 80043ee:	e26c      	b.n	80048ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a43      	ldr	r2, [pc, #268]	; (8004504 <HAL_DMA_IRQHandler+0xa48>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d022      	beq.n	8004440 <HAL_DMA_IRQHandler+0x984>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a42      	ldr	r2, [pc, #264]	; (8004508 <HAL_DMA_IRQHandler+0xa4c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d01d      	beq.n	8004440 <HAL_DMA_IRQHandler+0x984>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a40      	ldr	r2, [pc, #256]	; (800450c <HAL_DMA_IRQHandler+0xa50>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d018      	beq.n	8004440 <HAL_DMA_IRQHandler+0x984>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a3f      	ldr	r2, [pc, #252]	; (8004510 <HAL_DMA_IRQHandler+0xa54>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d013      	beq.n	8004440 <HAL_DMA_IRQHandler+0x984>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a3d      	ldr	r2, [pc, #244]	; (8004514 <HAL_DMA_IRQHandler+0xa58>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00e      	beq.n	8004440 <HAL_DMA_IRQHandler+0x984>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a3c      	ldr	r2, [pc, #240]	; (8004518 <HAL_DMA_IRQHandler+0xa5c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d009      	beq.n	8004440 <HAL_DMA_IRQHandler+0x984>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3a      	ldr	r2, [pc, #232]	; (800451c <HAL_DMA_IRQHandler+0xa60>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_DMA_IRQHandler+0x984>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a39      	ldr	r2, [pc, #228]	; (8004520 <HAL_DMA_IRQHandler+0xa64>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_DMA_IRQHandler+0x988>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_DMA_IRQHandler+0x98a>
 8004444:	2300      	movs	r3, #0
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 823f 	beq.w	80048ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004458:	f003 031f 	and.w	r3, r3, #31
 800445c:	2204      	movs	r2, #4
 800445e:	409a      	lsls	r2, r3
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80cd 	beq.w	8004604 <HAL_DMA_IRQHandler+0xb48>
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80c7 	beq.w	8004604 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2204      	movs	r2, #4
 8004480:	409a      	lsls	r2, r3
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d049      	beq.n	8004524 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8210 	beq.w	80048c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044ac:	e20a      	b.n	80048c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8206 	beq.w	80048c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c0:	e200      	b.n	80048c4 <HAL_DMA_IRQHandler+0xe08>
 80044c2:	bf00      	nop
 80044c4:	40020010 	.word	0x40020010
 80044c8:	40020028 	.word	0x40020028
 80044cc:	40020040 	.word	0x40020040
 80044d0:	40020058 	.word	0x40020058
 80044d4:	40020070 	.word	0x40020070
 80044d8:	40020088 	.word	0x40020088
 80044dc:	400200a0 	.word	0x400200a0
 80044e0:	400200b8 	.word	0x400200b8
 80044e4:	40020410 	.word	0x40020410
 80044e8:	40020428 	.word	0x40020428
 80044ec:	40020440 	.word	0x40020440
 80044f0:	40020458 	.word	0x40020458
 80044f4:	40020470 	.word	0x40020470
 80044f8:	40020488 	.word	0x40020488
 80044fc:	400204a0 	.word	0x400204a0
 8004500:	400204b8 	.word	0x400204b8
 8004504:	58025408 	.word	0x58025408
 8004508:	5802541c 	.word	0x5802541c
 800450c:	58025430 	.word	0x58025430
 8004510:	58025444 	.word	0x58025444
 8004514:	58025458 	.word	0x58025458
 8004518:	5802546c 	.word	0x5802546c
 800451c:	58025480 	.word	0x58025480
 8004520:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	d160      	bne.n	80045f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7f      	ldr	r2, [pc, #508]	; (8004730 <HAL_DMA_IRQHandler+0xc74>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d04a      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a7d      	ldr	r2, [pc, #500]	; (8004734 <HAL_DMA_IRQHandler+0xc78>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d045      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a7c      	ldr	r2, [pc, #496]	; (8004738 <HAL_DMA_IRQHandler+0xc7c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d040      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a7a      	ldr	r2, [pc, #488]	; (800473c <HAL_DMA_IRQHandler+0xc80>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d03b      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a79      	ldr	r2, [pc, #484]	; (8004740 <HAL_DMA_IRQHandler+0xc84>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d036      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a77      	ldr	r2, [pc, #476]	; (8004744 <HAL_DMA_IRQHandler+0xc88>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d031      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a76      	ldr	r2, [pc, #472]	; (8004748 <HAL_DMA_IRQHandler+0xc8c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d02c      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a74      	ldr	r2, [pc, #464]	; (800474c <HAL_DMA_IRQHandler+0xc90>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d027      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a73      	ldr	r2, [pc, #460]	; (8004750 <HAL_DMA_IRQHandler+0xc94>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d022      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a71      	ldr	r2, [pc, #452]	; (8004754 <HAL_DMA_IRQHandler+0xc98>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01d      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a70      	ldr	r2, [pc, #448]	; (8004758 <HAL_DMA_IRQHandler+0xc9c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d018      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a6e      	ldr	r2, [pc, #440]	; (800475c <HAL_DMA_IRQHandler+0xca0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6d      	ldr	r2, [pc, #436]	; (8004760 <HAL_DMA_IRQHandler+0xca4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6b      	ldr	r2, [pc, #428]	; (8004764 <HAL_DMA_IRQHandler+0xca8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a6a      	ldr	r2, [pc, #424]	; (8004768 <HAL_DMA_IRQHandler+0xcac>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_DMA_IRQHandler+0xb12>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a68      	ldr	r2, [pc, #416]	; (800476c <HAL_DMA_IRQHandler+0xcb0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <HAL_DMA_IRQHandler+0xb24>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0208 	bic.w	r2, r2, #8
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e007      	b.n	80045f0 <HAL_DMA_IRQHandler+0xb34>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0204 	bic.w	r2, r2, #4
 80045ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8165 	beq.w	80048c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004602:	e15f      	b.n	80048c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2202      	movs	r2, #2
 800460e:	409a      	lsls	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 80c5 	beq.w	80047a4 <HAL_DMA_IRQHandler+0xce8>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80bf 	beq.w	80047a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	2202      	movs	r2, #2
 8004630:	409a      	lsls	r2, r3
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d018      	beq.n	8004672 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 813a 	beq.w	80048c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800465c:	e134      	b.n	80048c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8130 	beq.w	80048c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004670:	e12a      	b.n	80048c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 8089 	bne.w	8004790 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2b      	ldr	r2, [pc, #172]	; (8004730 <HAL_DMA_IRQHandler+0xc74>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d04a      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a29      	ldr	r2, [pc, #164]	; (8004734 <HAL_DMA_IRQHandler+0xc78>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d045      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a28      	ldr	r2, [pc, #160]	; (8004738 <HAL_DMA_IRQHandler+0xc7c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d040      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a26      	ldr	r2, [pc, #152]	; (800473c <HAL_DMA_IRQHandler+0xc80>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d03b      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a25      	ldr	r2, [pc, #148]	; (8004740 <HAL_DMA_IRQHandler+0xc84>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d036      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a23      	ldr	r2, [pc, #140]	; (8004744 <HAL_DMA_IRQHandler+0xc88>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d031      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a22      	ldr	r2, [pc, #136]	; (8004748 <HAL_DMA_IRQHandler+0xc8c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d02c      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a20      	ldr	r2, [pc, #128]	; (800474c <HAL_DMA_IRQHandler+0xc90>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d027      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <HAL_DMA_IRQHandler+0xc94>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d022      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <HAL_DMA_IRQHandler+0xc98>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01d      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <HAL_DMA_IRQHandler+0xc9c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d018      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1a      	ldr	r2, [pc, #104]	; (800475c <HAL_DMA_IRQHandler+0xca0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a19      	ldr	r2, [pc, #100]	; (8004760 <HAL_DMA_IRQHandler+0xca4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00e      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a17      	ldr	r2, [pc, #92]	; (8004764 <HAL_DMA_IRQHandler+0xca8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a16      	ldr	r2, [pc, #88]	; (8004768 <HAL_DMA_IRQHandler+0xcac>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_DMA_IRQHandler+0xc62>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a14      	ldr	r2, [pc, #80]	; (800476c <HAL_DMA_IRQHandler+0xcb0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d128      	bne.n	8004770 <HAL_DMA_IRQHandler+0xcb4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0214 	bic.w	r2, r2, #20
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e027      	b.n	8004780 <HAL_DMA_IRQHandler+0xcc4>
 8004730:	40020010 	.word	0x40020010
 8004734:	40020028 	.word	0x40020028
 8004738:	40020040 	.word	0x40020040
 800473c:	40020058 	.word	0x40020058
 8004740:	40020070 	.word	0x40020070
 8004744:	40020088 	.word	0x40020088
 8004748:	400200a0 	.word	0x400200a0
 800474c:	400200b8 	.word	0x400200b8
 8004750:	40020410 	.word	0x40020410
 8004754:	40020428 	.word	0x40020428
 8004758:	40020440 	.word	0x40020440
 800475c:	40020458 	.word	0x40020458
 8004760:	40020470 	.word	0x40020470
 8004764:	40020488 	.word	0x40020488
 8004768:	400204a0 	.word	0x400204a0
 800476c:	400204b8 	.word	0x400204b8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 020a 	bic.w	r2, r2, #10
 800477e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8097 	beq.w	80048c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a2:	e091      	b.n	80048c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2208      	movs	r2, #8
 80047ae:	409a      	lsls	r2, r3
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8088 	beq.w	80048ca <HAL_DMA_IRQHandler+0xe0e>
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8082 	beq.w	80048ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a41      	ldr	r2, [pc, #260]	; (80048d0 <HAL_DMA_IRQHandler+0xe14>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d04a      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3f      	ldr	r2, [pc, #252]	; (80048d4 <HAL_DMA_IRQHandler+0xe18>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d045      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a3e      	ldr	r2, [pc, #248]	; (80048d8 <HAL_DMA_IRQHandler+0xe1c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d040      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3c      	ldr	r2, [pc, #240]	; (80048dc <HAL_DMA_IRQHandler+0xe20>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d03b      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a3b      	ldr	r2, [pc, #236]	; (80048e0 <HAL_DMA_IRQHandler+0xe24>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d036      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a39      	ldr	r2, [pc, #228]	; (80048e4 <HAL_DMA_IRQHandler+0xe28>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a38      	ldr	r2, [pc, #224]	; (80048e8 <HAL_DMA_IRQHandler+0xe2c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d02c      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a36      	ldr	r2, [pc, #216]	; (80048ec <HAL_DMA_IRQHandler+0xe30>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d027      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a35      	ldr	r2, [pc, #212]	; (80048f0 <HAL_DMA_IRQHandler+0xe34>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a33      	ldr	r2, [pc, #204]	; (80048f4 <HAL_DMA_IRQHandler+0xe38>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01d      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a32      	ldr	r2, [pc, #200]	; (80048f8 <HAL_DMA_IRQHandler+0xe3c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a30      	ldr	r2, [pc, #192]	; (80048fc <HAL_DMA_IRQHandler+0xe40>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2f      	ldr	r2, [pc, #188]	; (8004900 <HAL_DMA_IRQHandler+0xe44>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2d      	ldr	r2, [pc, #180]	; (8004904 <HAL_DMA_IRQHandler+0xe48>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2c      	ldr	r2, [pc, #176]	; (8004908 <HAL_DMA_IRQHandler+0xe4c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_DMA_IRQHandler+0xdaa>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2a      	ldr	r2, [pc, #168]	; (800490c <HAL_DMA_IRQHandler+0xe50>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <HAL_DMA_IRQHandler+0xdbc>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 021c 	bic.w	r2, r2, #28
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e007      	b.n	8004888 <HAL_DMA_IRQHandler+0xdcc>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 020e 	bic.w	r2, r2, #14
 8004886:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2201      	movs	r2, #1
 8004892:	409a      	lsls	r2, r3
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
 80048be:	e004      	b.n	80048ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048c0:	bf00      	nop
 80048c2:	e002      	b.n	80048ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c4:	bf00      	nop
 80048c6:	e000      	b.n	80048ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048ca:	3728      	adds	r7, #40	; 0x28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40020010 	.word	0x40020010
 80048d4:	40020028 	.word	0x40020028
 80048d8:	40020040 	.word	0x40020040
 80048dc:	40020058 	.word	0x40020058
 80048e0:	40020070 	.word	0x40020070
 80048e4:	40020088 	.word	0x40020088
 80048e8:	400200a0 	.word	0x400200a0
 80048ec:	400200b8 	.word	0x400200b8
 80048f0:	40020410 	.word	0x40020410
 80048f4:	40020428 	.word	0x40020428
 80048f8:	40020440 	.word	0x40020440
 80048fc:	40020458 	.word	0x40020458
 8004900:	40020470 	.word	0x40020470
 8004904:	40020488 	.word	0x40020488
 8004908:	400204a0 	.word	0x400204a0
 800490c:	400204b8 	.word	0x400204b8

08004910 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a7f      	ldr	r2, [pc, #508]	; (8004b2c <DMA_SetConfig+0x21c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d072      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7d      	ldr	r2, [pc, #500]	; (8004b30 <DMA_SetConfig+0x220>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d06d      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a7c      	ldr	r2, [pc, #496]	; (8004b34 <DMA_SetConfig+0x224>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d068      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a7a      	ldr	r2, [pc, #488]	; (8004b38 <DMA_SetConfig+0x228>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d063      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a79      	ldr	r2, [pc, #484]	; (8004b3c <DMA_SetConfig+0x22c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d05e      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a77      	ldr	r2, [pc, #476]	; (8004b40 <DMA_SetConfig+0x230>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d059      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a76      	ldr	r2, [pc, #472]	; (8004b44 <DMA_SetConfig+0x234>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d054      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a74      	ldr	r2, [pc, #464]	; (8004b48 <DMA_SetConfig+0x238>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d04f      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a73      	ldr	r2, [pc, #460]	; (8004b4c <DMA_SetConfig+0x23c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d04a      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a71      	ldr	r2, [pc, #452]	; (8004b50 <DMA_SetConfig+0x240>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d045      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a70      	ldr	r2, [pc, #448]	; (8004b54 <DMA_SetConfig+0x244>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d040      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a6e      	ldr	r2, [pc, #440]	; (8004b58 <DMA_SetConfig+0x248>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d03b      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a6d      	ldr	r2, [pc, #436]	; (8004b5c <DMA_SetConfig+0x24c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d036      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a6b      	ldr	r2, [pc, #428]	; (8004b60 <DMA_SetConfig+0x250>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d031      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a6a      	ldr	r2, [pc, #424]	; (8004b64 <DMA_SetConfig+0x254>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d02c      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a68      	ldr	r2, [pc, #416]	; (8004b68 <DMA_SetConfig+0x258>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d027      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a67      	ldr	r2, [pc, #412]	; (8004b6c <DMA_SetConfig+0x25c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d022      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a65      	ldr	r2, [pc, #404]	; (8004b70 <DMA_SetConfig+0x260>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01d      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a64      	ldr	r2, [pc, #400]	; (8004b74 <DMA_SetConfig+0x264>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d018      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a62      	ldr	r2, [pc, #392]	; (8004b78 <DMA_SetConfig+0x268>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a61      	ldr	r2, [pc, #388]	; (8004b7c <DMA_SetConfig+0x26c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00e      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5f      	ldr	r2, [pc, #380]	; (8004b80 <DMA_SetConfig+0x270>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d009      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a5e      	ldr	r2, [pc, #376]	; (8004b84 <DMA_SetConfig+0x274>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <DMA_SetConfig+0x10a>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a5c      	ldr	r2, [pc, #368]	; (8004b88 <DMA_SetConfig+0x278>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <DMA_SetConfig+0x10e>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <DMA_SetConfig+0x110>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00d      	beq.n	8004a40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a39      	ldr	r2, [pc, #228]	; (8004b2c <DMA_SetConfig+0x21c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d04a      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a38      	ldr	r2, [pc, #224]	; (8004b30 <DMA_SetConfig+0x220>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d045      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a36      	ldr	r2, [pc, #216]	; (8004b34 <DMA_SetConfig+0x224>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d040      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a35      	ldr	r2, [pc, #212]	; (8004b38 <DMA_SetConfig+0x228>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d03b      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a33      	ldr	r2, [pc, #204]	; (8004b3c <DMA_SetConfig+0x22c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d036      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <DMA_SetConfig+0x230>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d031      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a30      	ldr	r2, [pc, #192]	; (8004b44 <DMA_SetConfig+0x234>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d02c      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2f      	ldr	r2, [pc, #188]	; (8004b48 <DMA_SetConfig+0x238>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d027      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2d      	ldr	r2, [pc, #180]	; (8004b4c <DMA_SetConfig+0x23c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d022      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a2c      	ldr	r2, [pc, #176]	; (8004b50 <DMA_SetConfig+0x240>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d01d      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2a      	ldr	r2, [pc, #168]	; (8004b54 <DMA_SetConfig+0x244>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d018      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a29      	ldr	r2, [pc, #164]	; (8004b58 <DMA_SetConfig+0x248>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d013      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a27      	ldr	r2, [pc, #156]	; (8004b5c <DMA_SetConfig+0x24c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00e      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <DMA_SetConfig+0x250>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d009      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <DMA_SetConfig+0x254>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d004      	beq.n	8004ae0 <DMA_SetConfig+0x1d0>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a23      	ldr	r2, [pc, #140]	; (8004b68 <DMA_SetConfig+0x258>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d101      	bne.n	8004ae4 <DMA_SetConfig+0x1d4>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <DMA_SetConfig+0x1d6>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d059      	beq.n	8004b9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	223f      	movs	r2, #63	; 0x3f
 8004af4:	409a      	lsls	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d138      	bne.n	8004b8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b2a:	e086      	b.n	8004c3a <DMA_SetConfig+0x32a>
 8004b2c:	40020010 	.word	0x40020010
 8004b30:	40020028 	.word	0x40020028
 8004b34:	40020040 	.word	0x40020040
 8004b38:	40020058 	.word	0x40020058
 8004b3c:	40020070 	.word	0x40020070
 8004b40:	40020088 	.word	0x40020088
 8004b44:	400200a0 	.word	0x400200a0
 8004b48:	400200b8 	.word	0x400200b8
 8004b4c:	40020410 	.word	0x40020410
 8004b50:	40020428 	.word	0x40020428
 8004b54:	40020440 	.word	0x40020440
 8004b58:	40020458 	.word	0x40020458
 8004b5c:	40020470 	.word	0x40020470
 8004b60:	40020488 	.word	0x40020488
 8004b64:	400204a0 	.word	0x400204a0
 8004b68:	400204b8 	.word	0x400204b8
 8004b6c:	58025408 	.word	0x58025408
 8004b70:	5802541c 	.word	0x5802541c
 8004b74:	58025430 	.word	0x58025430
 8004b78:	58025444 	.word	0x58025444
 8004b7c:	58025458 	.word	0x58025458
 8004b80:	5802546c 	.word	0x5802546c
 8004b84:	58025480 	.word	0x58025480
 8004b88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]
}
 8004b9c:	e04d      	b.n	8004c3a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a29      	ldr	r2, [pc, #164]	; (8004c48 <DMA_SetConfig+0x338>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d022      	beq.n	8004bee <DMA_SetConfig+0x2de>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <DMA_SetConfig+0x33c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01d      	beq.n	8004bee <DMA_SetConfig+0x2de>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <DMA_SetConfig+0x340>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d018      	beq.n	8004bee <DMA_SetConfig+0x2de>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <DMA_SetConfig+0x344>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d013      	beq.n	8004bee <DMA_SetConfig+0x2de>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a23      	ldr	r2, [pc, #140]	; (8004c58 <DMA_SetConfig+0x348>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00e      	beq.n	8004bee <DMA_SetConfig+0x2de>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a21      	ldr	r2, [pc, #132]	; (8004c5c <DMA_SetConfig+0x34c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d009      	beq.n	8004bee <DMA_SetConfig+0x2de>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <DMA_SetConfig+0x350>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d004      	beq.n	8004bee <DMA_SetConfig+0x2de>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1e      	ldr	r2, [pc, #120]	; (8004c64 <DMA_SetConfig+0x354>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d101      	bne.n	8004bf2 <DMA_SetConfig+0x2e2>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <DMA_SetConfig+0x2e4>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	2201      	movs	r2, #1
 8004c02:	409a      	lsls	r2, r3
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d108      	bne.n	8004c2a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	60da      	str	r2, [r3, #12]
}
 8004c28:	e007      	b.n	8004c3a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	60da      	str	r2, [r3, #12]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	58025408 	.word	0x58025408
 8004c4c:	5802541c 	.word	0x5802541c
 8004c50:	58025430 	.word	0x58025430
 8004c54:	58025444 	.word	0x58025444
 8004c58:	58025458 	.word	0x58025458
 8004c5c:	5802546c 	.word	0x5802546c
 8004c60:	58025480 	.word	0x58025480
 8004c64:	58025494 	.word	0x58025494

08004c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a42      	ldr	r2, [pc, #264]	; (8004d80 <DMA_CalcBaseAndBitshift+0x118>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d04a      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a41      	ldr	r2, [pc, #260]	; (8004d84 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d045      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a3f      	ldr	r2, [pc, #252]	; (8004d88 <DMA_CalcBaseAndBitshift+0x120>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d040      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a3e      	ldr	r2, [pc, #248]	; (8004d8c <DMA_CalcBaseAndBitshift+0x124>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d03b      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a3c      	ldr	r2, [pc, #240]	; (8004d90 <DMA_CalcBaseAndBitshift+0x128>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d036      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a3b      	ldr	r2, [pc, #236]	; (8004d94 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d031      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a39      	ldr	r2, [pc, #228]	; (8004d98 <DMA_CalcBaseAndBitshift+0x130>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d02c      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a38      	ldr	r2, [pc, #224]	; (8004d9c <DMA_CalcBaseAndBitshift+0x134>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d027      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a36      	ldr	r2, [pc, #216]	; (8004da0 <DMA_CalcBaseAndBitshift+0x138>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a35      	ldr	r2, [pc, #212]	; (8004da4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d01d      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a33      	ldr	r2, [pc, #204]	; (8004da8 <DMA_CalcBaseAndBitshift+0x140>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a32      	ldr	r2, [pc, #200]	; (8004dac <DMA_CalcBaseAndBitshift+0x144>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a30      	ldr	r2, [pc, #192]	; (8004db0 <DMA_CalcBaseAndBitshift+0x148>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00e      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2f      	ldr	r2, [pc, #188]	; (8004db4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a2d      	ldr	r2, [pc, #180]	; (8004db8 <DMA_CalcBaseAndBitshift+0x150>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <DMA_CalcBaseAndBitshift+0xa8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <DMA_CalcBaseAndBitshift+0x154>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d101      	bne.n	8004d14 <DMA_CalcBaseAndBitshift+0xac>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <DMA_CalcBaseAndBitshift+0xae>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d024      	beq.n	8004d64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	3b10      	subs	r3, #16
 8004d22:	4a27      	ldr	r2, [pc, #156]	; (8004dc0 <DMA_CalcBaseAndBitshift+0x158>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	4a24      	ldr	r2, [pc, #144]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d34:	5cd3      	ldrb	r3, [r2, r3]
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d908      	bls.n	8004d54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x160>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	1d1a      	adds	r2, r3, #4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	659a      	str	r2, [r3, #88]	; 0x58
 8004d52:	e00d      	b.n	8004d70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x160>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6593      	str	r3, [r2, #88]	; 0x58
 8004d62:	e005      	b.n	8004d70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40020010 	.word	0x40020010
 8004d84:	40020028 	.word	0x40020028
 8004d88:	40020040 	.word	0x40020040
 8004d8c:	40020058 	.word	0x40020058
 8004d90:	40020070 	.word	0x40020070
 8004d94:	40020088 	.word	0x40020088
 8004d98:	400200a0 	.word	0x400200a0
 8004d9c:	400200b8 	.word	0x400200b8
 8004da0:	40020410 	.word	0x40020410
 8004da4:	40020428 	.word	0x40020428
 8004da8:	40020440 	.word	0x40020440
 8004dac:	40020458 	.word	0x40020458
 8004db0:	40020470 	.word	0x40020470
 8004db4:	40020488 	.word	0x40020488
 8004db8:	400204a0 	.word	0x400204a0
 8004dbc:	400204b8 	.word	0x400204b8
 8004dc0:	aaaaaaab 	.word	0xaaaaaaab
 8004dc4:	0800cd64 	.word	0x0800cd64
 8004dc8:	fffffc00 	.word	0xfffffc00

08004dcc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d120      	bne.n	8004e22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d858      	bhi.n	8004e9a <DMA_CheckFifoParam+0xce>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <DMA_CheckFifoParam+0x24>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e13 	.word	0x08004e13
 8004df8:	08004e01 	.word	0x08004e01
 8004dfc:	08004e9b 	.word	0x08004e9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d048      	beq.n	8004e9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e10:	e045      	b.n	8004e9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e1a:	d142      	bne.n	8004ea2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e20:	e03f      	b.n	8004ea2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2a:	d123      	bne.n	8004e74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d838      	bhi.n	8004ea6 <DMA_CheckFifoParam+0xda>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <DMA_CheckFifoParam+0x70>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e53 	.word	0x08004e53
 8004e44:	08004e4d 	.word	0x08004e4d
 8004e48:	08004e65 	.word	0x08004e65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
        break;
 8004e50:	e030      	b.n	8004eb4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d025      	beq.n	8004eaa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e62:	e022      	b.n	8004eaa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e6c:	d11f      	bne.n	8004eae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e72:	e01c      	b.n	8004eae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d902      	bls.n	8004e82 <DMA_CheckFifoParam+0xb6>
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d003      	beq.n	8004e88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e80:	e018      	b.n	8004eb4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	73fb      	strb	r3, [r7, #15]
        break;
 8004e86:	e015      	b.n	8004eb4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00e      	beq.n	8004eb2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	73fb      	strb	r3, [r7, #15]
    break;
 8004e98:	e00b      	b.n	8004eb2 <DMA_CheckFifoParam+0xe6>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e00a      	b.n	8004eb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004e9e:	bf00      	nop
 8004ea0:	e008      	b.n	8004eb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004ea2:	bf00      	nop
 8004ea4:	e006      	b.n	8004eb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e004      	b.n	8004eb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <DMA_CheckFifoParam+0xe8>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <DMA_CheckFifoParam+0xe8>
    break;
 8004eb2:	bf00      	nop
    }
  }

  return status;
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop

08004ec4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a38      	ldr	r2, [pc, #224]	; (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d022      	beq.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a36      	ldr	r2, [pc, #216]	; (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01d      	beq.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a35      	ldr	r2, [pc, #212]	; (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d018      	beq.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a33      	ldr	r2, [pc, #204]	; (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a32      	ldr	r2, [pc, #200]	; (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00e      	beq.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d004      	beq.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2d      	ldr	r2, [pc, #180]	; (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f26:	2300      	movs	r3, #0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01a      	beq.n	8004f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	3b08      	subs	r3, #8
 8004f34:	4a28      	ldr	r2, [pc, #160]	; (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	091b      	lsrs	r3, r3, #4
 8004f3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4b26      	ldr	r3, [pc, #152]	; (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	461a      	mov	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a24      	ldr	r2, [pc, #144]	; (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	2201      	movs	r2, #1
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f60:	e024      	b.n	8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	3b10      	subs	r3, #16
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d806      	bhi.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d902      	bls.n	8004f8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3308      	adds	r3, #8
 8004f88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	461a      	mov	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	58025408 	.word	0x58025408
 8004fbc:	5802541c 	.word	0x5802541c
 8004fc0:	58025430 	.word	0x58025430
 8004fc4:	58025444 	.word	0x58025444
 8004fc8:	58025458 	.word	0x58025458
 8004fcc:	5802546c 	.word	0x5802546c
 8004fd0:	58025480 	.word	0x58025480
 8004fd4:	58025494 	.word	0x58025494
 8004fd8:	cccccccd 	.word	0xcccccccd
 8004fdc:	16009600 	.word	0x16009600
 8004fe0:	58025880 	.word	0x58025880
 8004fe4:	aaaaaaab 	.word	0xaaaaaaab
 8004fe8:	400204b8 	.word	0x400204b8
 8004fec:	4002040f 	.word	0x4002040f
 8004ff0:	10008200 	.word	0x10008200
 8004ff4:	40020880 	.word	0x40020880

08004ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d04a      	beq.n	80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b08      	cmp	r3, #8
 8005012:	d847      	bhi.n	80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a25      	ldr	r2, [pc, #148]	; (80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d022      	beq.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a24      	ldr	r2, [pc, #144]	; (80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d01d      	beq.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d018      	beq.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a21      	ldr	r2, [pc, #132]	; (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00e      	beq.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1c      	ldr	r2, [pc, #112]	; (80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d101      	bne.n	8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	461a      	mov	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005080:	671a      	str	r2, [r3, #112]	; 0x70
 8005082:	e009      	b.n	8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	461a      	mov	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a11      	ldr	r2, [pc, #68]	; (80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005096:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3b01      	subs	r3, #1
 800509c:	2201      	movs	r2, #1
 800509e:	409a      	lsls	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050a4:	bf00      	nop
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	58025408 	.word	0x58025408
 80050b4:	5802541c 	.word	0x5802541c
 80050b8:	58025430 	.word	0x58025430
 80050bc:	58025444 	.word	0x58025444
 80050c0:	58025458 	.word	0x58025458
 80050c4:	5802546c 	.word	0x5802546c
 80050c8:	58025480 	.word	0x58025480
 80050cc:	58025494 	.word	0x58025494
 80050d0:	1600963f 	.word	0x1600963f
 80050d4:	58025940 	.word	0x58025940
 80050d8:	1000823f 	.word	0x1000823f
 80050dc:	40020940 	.word	0x40020940

080050e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050ee:	4b89      	ldr	r3, [pc, #548]	; (8005314 <HAL_GPIO_Init+0x234>)
 80050f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050f2:	e194      	b.n	800541e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	2101      	movs	r1, #1
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	4013      	ands	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8186 	beq.w	8005418 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d005      	beq.n	8005124 <HAL_GPIO_Init+0x44>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d130      	bne.n	8005186 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	2203      	movs	r2, #3
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	4013      	ands	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800515a:	2201      	movs	r2, #1
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 0201 	and.w	r2, r3, #1
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4313      	orrs	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	2b03      	cmp	r3, #3
 8005190:	d017      	beq.n	80051c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	2203      	movs	r2, #3
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d123      	bne.n	8005216 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	08da      	lsrs	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3208      	adds	r2, #8
 80051d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	220f      	movs	r2, #15
 80051e6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ea:	43db      	mvns	r3, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4013      	ands	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	08da      	lsrs	r2, r3, #3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3208      	adds	r2, #8
 8005210:	69b9      	ldr	r1, [r7, #24]
 8005212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	2203      	movs	r2, #3
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0203 	and.w	r2, r3, #3
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80e0 	beq.w	8005418 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005258:	4b2f      	ldr	r3, [pc, #188]	; (8005318 <HAL_GPIO_Init+0x238>)
 800525a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800525e:	4a2e      	ldr	r2, [pc, #184]	; (8005318 <HAL_GPIO_Init+0x238>)
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <HAL_GPIO_Init+0x238>)
 800526a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005276:	4a29      	ldr	r2, [pc, #164]	; (800531c <HAL_GPIO_Init+0x23c>)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	089b      	lsrs	r3, r3, #2
 800527c:	3302      	adds	r3, #2
 800527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	220f      	movs	r2, #15
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4013      	ands	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a20      	ldr	r2, [pc, #128]	; (8005320 <HAL_GPIO_Init+0x240>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d052      	beq.n	8005348 <HAL_GPIO_Init+0x268>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <HAL_GPIO_Init+0x244>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d031      	beq.n	800530e <HAL_GPIO_Init+0x22e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <HAL_GPIO_Init+0x248>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d02b      	beq.n	800530a <HAL_GPIO_Init+0x22a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1d      	ldr	r2, [pc, #116]	; (800532c <HAL_GPIO_Init+0x24c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d025      	beq.n	8005306 <HAL_GPIO_Init+0x226>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <HAL_GPIO_Init+0x250>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01f      	beq.n	8005302 <HAL_GPIO_Init+0x222>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <HAL_GPIO_Init+0x254>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d019      	beq.n	80052fe <HAL_GPIO_Init+0x21e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	; (8005338 <HAL_GPIO_Init+0x258>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_GPIO_Init+0x21a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a19      	ldr	r2, [pc, #100]	; (800533c <HAL_GPIO_Init+0x25c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00d      	beq.n	80052f6 <HAL_GPIO_Init+0x216>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a18      	ldr	r2, [pc, #96]	; (8005340 <HAL_GPIO_Init+0x260>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d007      	beq.n	80052f2 <HAL_GPIO_Init+0x212>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a17      	ldr	r2, [pc, #92]	; (8005344 <HAL_GPIO_Init+0x264>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d101      	bne.n	80052ee <HAL_GPIO_Init+0x20e>
 80052ea:	2309      	movs	r3, #9
 80052ec:	e02d      	b.n	800534a <HAL_GPIO_Init+0x26a>
 80052ee:	230a      	movs	r3, #10
 80052f0:	e02b      	b.n	800534a <HAL_GPIO_Init+0x26a>
 80052f2:	2308      	movs	r3, #8
 80052f4:	e029      	b.n	800534a <HAL_GPIO_Init+0x26a>
 80052f6:	2307      	movs	r3, #7
 80052f8:	e027      	b.n	800534a <HAL_GPIO_Init+0x26a>
 80052fa:	2306      	movs	r3, #6
 80052fc:	e025      	b.n	800534a <HAL_GPIO_Init+0x26a>
 80052fe:	2305      	movs	r3, #5
 8005300:	e023      	b.n	800534a <HAL_GPIO_Init+0x26a>
 8005302:	2304      	movs	r3, #4
 8005304:	e021      	b.n	800534a <HAL_GPIO_Init+0x26a>
 8005306:	2303      	movs	r3, #3
 8005308:	e01f      	b.n	800534a <HAL_GPIO_Init+0x26a>
 800530a:	2302      	movs	r3, #2
 800530c:	e01d      	b.n	800534a <HAL_GPIO_Init+0x26a>
 800530e:	2301      	movs	r3, #1
 8005310:	e01b      	b.n	800534a <HAL_GPIO_Init+0x26a>
 8005312:	bf00      	nop
 8005314:	58000080 	.word	0x58000080
 8005318:	58024400 	.word	0x58024400
 800531c:	58000400 	.word	0x58000400
 8005320:	58020000 	.word	0x58020000
 8005324:	58020400 	.word	0x58020400
 8005328:	58020800 	.word	0x58020800
 800532c:	58020c00 	.word	0x58020c00
 8005330:	58021000 	.word	0x58021000
 8005334:	58021400 	.word	0x58021400
 8005338:	58021800 	.word	0x58021800
 800533c:	58021c00 	.word	0x58021c00
 8005340:	58022000 	.word	0x58022000
 8005344:	58022400 	.word	0x58022400
 8005348:	2300      	movs	r3, #0
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	f002 0203 	and.w	r2, r2, #3
 8005350:	0092      	lsls	r2, r2, #2
 8005352:	4093      	lsls	r3, r2
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800535a:	4938      	ldr	r1, [pc, #224]	; (800543c <HAL_GPIO_Init+0x35c>)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	089b      	lsrs	r3, r3, #2
 8005360:	3302      	adds	r3, #2
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	43db      	mvns	r3, r3
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	4013      	ands	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800538e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4013      	ands	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80053bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	43db      	mvns	r3, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4013      	ands	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3301      	adds	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	f47f ae63 	bne.w	80050f4 <HAL_GPIO_Init+0x14>
  }
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	3724      	adds	r7, #36	; 0x24
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	58000400 	.word	0x58000400

08005440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	807b      	strh	r3, [r7, #2]
 800544c:	4613      	mov	r3, r2
 800544e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005450:	787b      	ldrb	r3, [r7, #1]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005456:	887a      	ldrh	r2, [r7, #2]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800545c:	e003      	b.n	8005466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800545e:	887b      	ldrh	r3, [r7, #2]
 8005460:	041a      	lsls	r2, r3, #16
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	619a      	str	r2, [r3, #24]
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e07f      	b.n	8005586 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fc f8aa 	bl	80015f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2224      	movs	r2, #36	; 0x24
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d107      	bne.n	80054ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ea:	609a      	str	r2, [r3, #8]
 80054ec:	e006      	b.n	80054fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80054fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d104      	bne.n	800550e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800550c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6859      	ldr	r1, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_I2C_Init+0x11c>)
 800551a:	430b      	orrs	r3, r1
 800551c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800552c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69d9      	ldr	r1, [r3, #28]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1a      	ldr	r2, [r3, #32]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	02008000 	.word	0x02008000

08005594 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	817b      	strh	r3, [r7, #10]
 80055a6:	460b      	mov	r3, r1
 80055a8:	813b      	strh	r3, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	f040 80f9 	bne.w	80057ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_I2C_Mem_Write+0x34>
 80055c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0ed      	b.n	80057b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_I2C_Mem_Write+0x4e>
 80055de:	2302      	movs	r3, #2
 80055e0:	e0e6      	b.n	80057b0 <HAL_I2C_Mem_Write+0x21c>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055ea:	f7fc fc4f 	bl	8001e8c <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2319      	movs	r3, #25
 80055f6:	2201      	movs	r2, #1
 80055f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 f955 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e0d1      	b.n	80057b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2221      	movs	r2, #33	; 0x21
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800562c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005634:	88f8      	ldrh	r0, [r7, #6]
 8005636:	893a      	ldrh	r2, [r7, #8]
 8005638:	8979      	ldrh	r1, [r7, #10]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	4603      	mov	r3, r0
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f8b9 	bl	80057bc <I2C_RequestMemoryWrite>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0a9      	b.n	80057b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	2bff      	cmp	r3, #255	; 0xff
 8005664:	d90e      	bls.n	8005684 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	22ff      	movs	r2, #255	; 0xff
 800566a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	b2da      	uxtb	r2, r3
 8005672:	8979      	ldrh	r1, [r7, #10]
 8005674:	2300      	movs	r3, #0
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fabd 	bl	8005bfc <I2C_TransferConfig>
 8005682:	e00f      	b.n	80056a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005692:	b2da      	uxtb	r2, r3
 8005694:	8979      	ldrh	r1, [r7, #10]
 8005696:	2300      	movs	r3, #0
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 faac 	bl	8005bfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f93f 	bl	800592c <I2C_WaitOnTXISFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e07b      	b.n	80057b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	781a      	ldrb	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d034      	beq.n	800575c <HAL_I2C_Mem_Write+0x1c8>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d130      	bne.n	800575c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	2200      	movs	r2, #0
 8005702:	2180      	movs	r1, #128	; 0x80
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f8d1 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e04d      	b.n	80057b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	2bff      	cmp	r3, #255	; 0xff
 800571c:	d90e      	bls.n	800573c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	22ff      	movs	r2, #255	; 0xff
 8005722:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005728:	b2da      	uxtb	r2, r3
 800572a:	8979      	ldrh	r1, [r7, #10]
 800572c:	2300      	movs	r3, #0
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 fa61 	bl	8005bfc <I2C_TransferConfig>
 800573a:	e00f      	b.n	800575c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	b2da      	uxtb	r2, r3
 800574c:	8979      	ldrh	r1, [r7, #10]
 800574e:	2300      	movs	r3, #0
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fa50 	bl	8005bfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d19e      	bne.n	80056a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f91e 	bl	80059ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e01a      	b.n	80057b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2220      	movs	r2, #32
 8005780:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6859      	ldr	r1, [r3, #4]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <HAL_I2C_Mem_Write+0x224>)
 800578e:	400b      	ands	r3, r1
 8005790:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e000      	b.n	80057b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	fe00e800 	.word	0xfe00e800

080057bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	4608      	mov	r0, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	817b      	strh	r3, [r7, #10]
 80057ce:	460b      	mov	r3, r1
 80057d0:	813b      	strh	r3, [r7, #8]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	8979      	ldrh	r1, [r7, #10]
 80057dc:	4b20      	ldr	r3, [pc, #128]	; (8005860 <I2C_RequestMemoryWrite+0xa4>)
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fa09 	bl	8005bfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	69b9      	ldr	r1, [r7, #24]
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f89c 	bl	800592c <I2C_WaitOnTXISFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e02c      	b.n	8005858 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005804:	893b      	ldrh	r3, [r7, #8]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	629a      	str	r2, [r3, #40]	; 0x28
 800580e:	e015      	b.n	800583c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005810:	893b      	ldrh	r3, [r7, #8]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	b29b      	uxth	r3, r3
 8005816:	b2da      	uxtb	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	69b9      	ldr	r1, [r7, #24]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f882 	bl	800592c <I2C_WaitOnTXISFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e012      	b.n	8005858 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005832:	893b      	ldrh	r3, [r7, #8]
 8005834:	b2da      	uxtb	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2200      	movs	r2, #0
 8005844:	2180      	movs	r1, #128	; 0x80
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f830 	bl	80058ac <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	80002000 	.word	0x80002000

08005864 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b02      	cmp	r3, #2
 8005878:	d103      	bne.n	8005882 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2200      	movs	r2, #0
 8005880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b01      	cmp	r3, #1
 800588e:	d007      	beq.n	80058a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	619a      	str	r2, [r3, #24]
  }
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058bc:	e022      	b.n	8005904 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d01e      	beq.n	8005904 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c6:	f7fc fae1 	bl	8001e8c <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d113      	bne.n	8005904 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e00f      	b.n	8005924 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4013      	ands	r3, r2
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	bf0c      	ite	eq
 8005914:	2301      	moveq	r3, #1
 8005916:	2300      	movne	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	429a      	cmp	r2, r3
 8005920:	d0cd      	beq.n	80058be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005938:	e02c      	b.n	8005994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f870 	bl	8005a24 <I2C_IsErrorOccurred>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e02a      	b.n	80059a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d01e      	beq.n	8005994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005956:	f7fc fa99 	bl	8001e8c <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	429a      	cmp	r2, r3
 8005964:	d302      	bcc.n	800596c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d113      	bne.n	8005994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005970:	f043 0220 	orr.w	r2, r3, #32
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e007      	b.n	80059a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d1cb      	bne.n	800593a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059b8:	e028      	b.n	8005a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68b9      	ldr	r1, [r7, #8]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f830 	bl	8005a24 <I2C_IsErrorOccurred>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e026      	b.n	8005a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ce:	f7fc fa5d 	bl	8001e8c <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d302      	bcc.n	80059e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d113      	bne.n	8005a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e007      	b.n	8005a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d1cf      	bne.n	80059ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	; 0x28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d075      	beq.n	8005b3c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2210      	movs	r2, #16
 8005a56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a58:	e056      	b.n	8005b08 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d052      	beq.n	8005b08 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a62:	f7fc fa13 	bl	8001e8c <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d302      	bcc.n	8005a78 <I2C_IsErrorOccurred+0x54>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d147      	bne.n	8005b08 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9a:	d12e      	bne.n	8005afa <I2C_IsErrorOccurred+0xd6>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa2:	d02a      	beq.n	8005afa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005aa4:	7cfb      	ldrb	r3, [r7, #19]
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d027      	beq.n	8005afa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ab8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005aba:	f7fc f9e7 	bl	8001e8c <HAL_GetTick>
 8005abe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ac0:	e01b      	b.n	8005afa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ac2:	f7fc f9e3 	bl	8001e8c <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b19      	cmp	r3, #25
 8005ace:	d914      	bls.n	8005afa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	f043 0220 	orr.w	r2, r3, #32
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d1dc      	bne.n	8005ac2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d003      	beq.n	8005b1e <I2C_IsErrorOccurred+0xfa>
 8005b16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d09d      	beq.n	8005a5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d103      	bne.n	8005b2e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f043 0304 	orr.w	r3, r3, #4
 8005b34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	f043 0301 	orr.w	r3, r3, #1
 8005b54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	f043 0308 	orr.w	r3, r3, #8
 8005b76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f043 0302 	orr.w	r3, r3, #2
 8005b98:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01c      	beq.n	8005bec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff fe56 	bl	8005864 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <I2C_IsErrorOccurred+0x1d4>)
 8005bc4:	400b      	ands	r3, r1
 8005bc6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3728      	adds	r7, #40	; 0x28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	fe00e800 	.word	0xfe00e800

08005bfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	607b      	str	r3, [r7, #4]
 8005c06:	460b      	mov	r3, r1
 8005c08:	817b      	strh	r3, [r7, #10]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c14:	7a7b      	ldrb	r3, [r7, #9]
 8005c16:	041b      	lsls	r3, r3, #16
 8005c18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c1c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c2a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	0d5b      	lsrs	r3, r3, #21
 8005c36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005c3a:	4b08      	ldr	r3, [pc, #32]	; (8005c5c <I2C_TransferConfig+0x60>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	ea02 0103 	and.w	r1, r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	03ff63ff 	.word	0x03ff63ff

08005c60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d138      	bne.n	8005ce8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e032      	b.n	8005cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	; 0x24
 8005c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e000      	b.n	8005cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ce8:	2302      	movs	r3, #2
  }
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b085      	sub	sp, #20
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d139      	bne.n	8005d80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e033      	b.n	8005d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2224      	movs	r2, #36	; 0x24
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005d48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e000      	b.n	8005d82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e070      	b.n	8005e84 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fb fc82 	bl	80016c0 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005df2:	631a      	str	r2, [r3, #48]	; 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a19      	ldr	r2, [pc, #100]	; (8005e8c <HAL_JPEG_Init+0xfc>)
 8005e28:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a18      	ldr	r2, [pc, #96]	; (8005e90 <HAL_JPEG_Init+0x100>)
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fb37 	bl	80064b0 <JPEG_Set_HuffEnc_Mem>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d004      	beq.n	8005e52 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e018      	b.n	8005e84 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e60:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	0800cf0c 	.word	0x0800cf0c
 8005e90:	0800cf4c 	.word	0x0800cf4c

08005e94 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b08b      	sub	sp, #44	; 0x2c
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	e020      	b.n	8005eee <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	4413      	add	r3, r2
 8005ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ec0:	d90f      	bls.n	8005ee2 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e055      	b.n	8005f72 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	440b      	add	r3, r1
 8005ed0:	3201      	adds	r2, #1
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	701a      	strb	r2, [r3, #0]
      p++;
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	623b      	str	r3, [r7, #32]
      i--;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1ee      	bne.n	8005ec6 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	3301      	adds	r3, #1
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	2b0f      	cmp	r3, #15
 8005ef2:	d9db      	bls.n	8005eac <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	4413      	add	r3, r2
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6a3a      	ldr	r2, [r7, #32]
 8005f02:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	617b      	str	r3, [r7, #20]
  p = 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8005f12:	e027      	b.n	8005f64 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	601a      	str	r2, [r3, #0]
      p++;
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	3301      	adds	r3, #1
 8005f24:	623b      	str	r3, [r7, #32]
      code++;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	4413      	add	r3, r2
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d0eb      	beq.n	8005f14 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2b1f      	cmp	r3, #31
 8005f40:	d901      	bls.n	8005f46 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e015      	b.n	8005f72 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8005f46:	2201      	movs	r2, #1
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d301      	bcc.n	8005f58 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e00c      	b.n	8005f72 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	61bb      	str	r3, [r7, #24]
    si++;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	3301      	adds	r3, #1
 8005f62:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	4413      	add	r3, r2
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1dd      	bne.n	8005f2c <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	372c      	adds	r7, #44	; 0x2c
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005f8a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8005f8e:	6018      	str	r0, [r3, #0]
 8005f90:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005f94:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8005f98:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8005f9a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005f9e:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	f107 0308 	add.w	r3, r7, #8
 8005fa8:	f107 020c 	add.w	r2, r7, #12
 8005fac:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8005fb0:	f7ff ff70 	bl	8005e94 <JPEG_Bits_To_SizeCodes>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8005fba:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8005fc2:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8005fc6:	e075      	b.n	80060b4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8005fce:	e067      	b.n	80060a0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8005fd0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005fd4:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005fde:	4413      	add	r3, r2
 8005fe0:	3310      	adds	r3, #16
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 8005fe8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d103      	bne.n	8005ff8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8005ff0:	23a0      	movs	r3, #160	; 0xa0
 8005ff2:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8005ff6:	e021      	b.n	800603c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8005ff8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005ffc:	2bf0      	cmp	r3, #240	; 0xf0
 8005ffe:	d103      	bne.n	8006008 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8006000:	23a1      	movs	r3, #161	; 0xa1
 8006002:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8006006:	e019      	b.n	800603c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8006008:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 8006016:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8006022:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	461a      	mov	r2, r3
 8006030:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8006034:	4413      	add	r3, r2
 8006036:	3b01      	subs	r3, #1
 8006038:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800603c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8006040:	2ba1      	cmp	r3, #161	; 0xa1
 8006042:	d901      	bls.n	8006048 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8006044:	2301      	movs	r3, #1
 8006046:	e035      	b.n	80060b4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006048:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800604c:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8006050:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8006054:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006058:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800605c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8006060:	6819      	ldr	r1, [r3, #0]
 8006062:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8006066:	3328      	adds	r3, #40	; 0x28
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800606e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8006072:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8006076:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800607a:	4413      	add	r3, r2
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	3b01      	subs	r3, #1
 8006080:	b2d9      	uxtb	r1, r3
 8006082:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8006086:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8006090:	4413      	add	r3, r2
 8006092:	460a      	mov	r2, r1
 8006094:	701a      	strb	r2, [r3, #0]
      k++;
 8006096:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800609a:	3301      	adds	r3, #1
 800609c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 80060a0:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80060a4:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d38e      	bcc.n	8005fd0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80060ca:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80060ce:	6018      	str	r0, [r3, #0]
 80060d0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80060d4:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80060d8:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80060da:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80060de:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80060e8:	f107 0208 	add.w	r2, r7, #8
 80060ec:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 80060f0:	f7ff fed0 	bl	8005e94 <JPEG_Bits_To_SizeCodes>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 80060fa:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8006102:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8006106:	e048      	b.n	800619a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 800610e:	e03d      	b.n	800618c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8006110:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006114:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800611e:	4413      	add	r3, r2
 8006120:	3310      	adds	r3, #16
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8006128:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800612c:	2b0b      	cmp	r3, #11
 800612e:	d901      	bls.n	8006134 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8006130:	2301      	movs	r3, #1
 8006132:	e032      	b.n	800619a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8006134:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006138:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 800613c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8006140:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006144:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006148:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800614c:	6819      	ldr	r1, [r3, #0]
 800614e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8006152:	3302      	adds	r3, #2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800615a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800615e:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8006162:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8006166:	4413      	add	r3, r2
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	3b01      	subs	r3, #1
 800616c:	b2d9      	uxtb	r1, r3
 800616e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006172:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800617c:	4413      	add	r3, r2
 800617e:	460a      	mov	r2, r1
 8006180:	701a      	strb	r2, [r3, #0]
      k++;
 8006182:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8006186:	3301      	adds	r3, #1
 8006188:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 800618c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8006190:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8006194:	429a      	cmp	r2, r3
 8006196:	d3bb      	bcc.n	8006110 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b09a      	sub	sp, #104	; 0x68
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d106      	bne.n	80061cc <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80061c6:	3318      	adds	r3, #24
 80061c8:	663b      	str	r3, [r7, #96]	; 0x60
 80061ca:	e00f      	b.n	80061ec <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d106      	bne.n	80061e8 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80061e2:	3318      	adds	r3, #24
 80061e4:	663b      	str	r3, [r7, #96]	; 0x60
 80061e6:	e001      	b.n	80061ec <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e059      	b.n	80062a0 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d055      	beq.n	800629e <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80061f2:	f107 0314 	add.w	r3, r7, #20
 80061f6:	4619      	mov	r1, r3
 80061f8:	68b8      	ldr	r0, [r7, #8]
 80061fa:	f7ff ff60 	bl	80060be <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8006204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800620c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006210:	e046      	b.n	80062a0 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8006212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006214:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8006216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006218:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800621c:	601a      	str	r2, [r3, #0]
    addressDef++;
 800621e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006220:	3304      	adds	r3, #4
 8006222:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8006224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006226:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800622a:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800622c:	230c      	movs	r3, #12
 800622e:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8006230:	e032      	b.n	8006298 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8006232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006234:	3b01      	subs	r3, #1
 8006236:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8006238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800623a:	3b04      	subs	r3, #4
 800623c:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800623e:	f107 0214 	add.w	r2, r7, #20
 8006242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006244:	4413      	add	r3, r2
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800624e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006250:	3302      	adds	r3, #2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	3368      	adds	r3, #104	; 0x68
 8006256:	443b      	add	r3, r7
 8006258:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	4313      	orrs	r3, r2
 8006260:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8006262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006264:	3b01      	subs	r3, #1
 8006266:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8006268:	f107 0214 	add.w	r2, r7, #20
 800626c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800626e:	4413      	add	r3, r2
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800627a:	3302      	adds	r3, #2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	3368      	adds	r3, #104	; 0x68
 8006280:	443b      	add	r3, r7
 8006282:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	4313      	orrs	r3, r2
 800628a:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800628c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628e:	041a      	lsls	r2, r3, #16
 8006290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006292:	431a      	orrs	r2, r3
 8006294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006296:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8006298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800629a:	2b01      	cmp	r3, #1
 800629c:	d8c9      	bhi.n	8006232 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3768      	adds	r7, #104	; 0x68
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80062b4:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80062b8:	6018      	str	r0, [r3, #0]
 80062ba:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80062be:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80062c2:	6019      	str	r1, [r3, #0]
 80062c4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80062c8:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80062cc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80062ce:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80062d2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80062e2:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d10c      	bne.n	8006306 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80062ec:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80062f0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006300:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8006304:	e01d      	b.n	8006342 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8006306:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800630a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8006316:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800631a:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d10c      	bne.n	800633e <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8006324:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8006328:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8006334:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006338:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800633c:	e001      	b.n	8006342 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e0a8      	b.n	8006494 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8006342:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8006346:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80a0 	beq.w	8006492 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8006352:	f107 0214 	add.w	r2, r7, #20
 8006356:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800635a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 800635e:	4611      	mov	r1, r2
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	f7ff fe0c 	bl	8005f7e <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 800636c:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8006374:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8006378:	e08c      	b.n	8006494 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800637a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800637e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8006382:	2300      	movs	r3, #0
 8006384:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8006388:	e00e      	b.n	80063a8 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800638a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800638e:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8006392:	601a      	str	r2, [r3, #0]
      addressDef++;
 8006394:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8006398:	3304      	adds	r3, #4
 800639a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800639e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80063a2:	3301      	adds	r3, #1
 80063a4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80063a8:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d9ec      	bls.n	800638a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80063b0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80063b4:	4a3a      	ldr	r2, [pc, #232]	; (80064a0 <JPEG_Set_HuffAC_Mem+0x1f8>)
 80063b6:	601a      	str	r2, [r3, #0]
    addressDef++;
 80063b8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80063bc:	3304      	adds	r3, #4
 80063be:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 80063c2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80063c6:	4a37      	ldr	r2, [pc, #220]	; (80064a4 <JPEG_Set_HuffAC_Mem+0x1fc>)
 80063c8:	601a      	str	r2, [r3, #0]
    addressDef++;
 80063ca:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80063ce:	3304      	adds	r3, #4
 80063d0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 80063d4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80063d8:	4a33      	ldr	r2, [pc, #204]	; (80064a8 <JPEG_Set_HuffAC_Mem+0x200>)
 80063da:	601a      	str	r2, [r3, #0]
    addressDef++;
 80063dc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80063e0:	3304      	adds	r3, #4
 80063e2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 80063e6:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80063ea:	4a30      	ldr	r2, [pc, #192]	; (80064ac <JPEG_Set_HuffAC_Mem+0x204>)
 80063ec:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80063ee:	23a2      	movs	r3, #162	; 0xa2
 80063f0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 80063f4:	e049      	b.n	800648a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80063f6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80063fa:	3b01      	subs	r3, #1
 80063fc:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8006400:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8006404:	3b04      	subs	r3, #4
 8006406:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800640a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800640e:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8006412:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8006416:	4413      	add	r3, r2
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006420:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8006424:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8006428:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800642c:	3328      	adds	r3, #40	; 0x28
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	440b      	add	r3, r1
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	4313      	orrs	r3, r2
 8006438:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 800643c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8006440:	3b01      	subs	r3, #1
 8006442:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8006446:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800644a:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800644e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8006452:	4413      	add	r3, r2
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	021b      	lsls	r3, r3, #8
 8006458:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800645c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8006460:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8006464:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8006468:	3328      	adds	r3, #40	; 0x28
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	440b      	add	r3, r1
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8006478:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800647c:	041a      	lsls	r2, r3, #16
 800647e:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8006482:	431a      	orrs	r2, r3
 8006484:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8006488:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800648a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800648e:	2b01      	cmp	r3, #1
 8006490:	d8b1      	bhi.n	80063f6 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	0fd10fd0 	.word	0x0fd10fd0
 80064a4:	0fd30fd2 	.word	0x0fd30fd2
 80064a8:	0fd50fd4 	.word	0x0fd50fd4
 80064ac:	0fd70fd6 	.word	0x0fd70fd6

080064b0 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f84d 	bl	8006558 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80064c6:	461a      	mov	r2, r3
 80064c8:	491f      	ldr	r1, [pc, #124]	; (8006548 <JPEG_Set_HuffEnc_Mem+0x98>)
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff feec 	bl	80062a8 <JPEG_Set_HuffAC_Mem>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	e030      	b.n	8006540 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80064e6:	461a      	mov	r2, r3
 80064e8:	4918      	ldr	r1, [pc, #96]	; (800654c <JPEG_Set_HuffEnc_Mem+0x9c>)
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff fedc 	bl	80062a8 <JPEG_Set_HuffAC_Mem>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	e020      	b.n	8006540 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8006506:	461a      	mov	r2, r3
 8006508:	4911      	ldr	r1, [pc, #68]	; (8006550 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff fe4a 	bl	80061a4 <JPEG_Set_HuffDC_Mem>
 8006510:	4603      	mov	r3, r0
 8006512:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	e010      	b.n	8006540 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8006526:	461a      	mov	r2, r3
 8006528:	490a      	ldr	r1, [pc, #40]	; (8006554 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fe3a 	bl	80061a4 <JPEG_Set_HuffDC_Mem>
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	e000      	b.n	8006540 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	0800cda4 	.word	0x0800cda4
 800654c:	0800ce58 	.word	0x0800ce58
 8006550:	0800cd6c 	.word	0x0800cd6c
 8006554:	0800cd88 	.word	0x0800cd88

08006558 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8006558:	b480      	push	{r7}
 800655a:	b08b      	sub	sp, #44	; 0x2c
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8006560:	4b80      	ldr	r3, [pc, #512]	; (8006764 <JPEG_Set_Huff_DHTMem+0x20c>)
 8006562:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8006564:	4b80      	ldr	r3, [pc, #512]	; (8006768 <JPEG_Set_Huff_DHTMem+0x210>)
 8006566:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8006568:	4b80      	ldr	r3, [pc, #512]	; (800676c <JPEG_Set_Huff_DHTMem+0x214>)
 800656a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800656c:	4b80      	ldr	r3, [pc, #512]	; (8006770 <JPEG_Set_Huff_DHTMem+0x218>)
 800656e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006578:	330c      	adds	r3, #12
 800657a:	623b      	str	r3, [r7, #32]
  index = 16;
 800657c:	2310      	movs	r3, #16
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006580:	e01d      	b.n	80065be <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	3b01      	subs	r3, #1
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	5cd3      	ldrb	r3, [r2, r3]
 800658a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658e:	3b02      	subs	r3, #2
 8006590:	6979      	ldr	r1, [r7, #20]
 8006592:	5ccb      	ldrb	r3, [r1, r3]
 8006594:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006596:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	3b03      	subs	r3, #3
 800659c:	6979      	ldr	r1, [r7, #20]
 800659e:	5ccb      	ldrb	r3, [r1, r3]
 80065a0:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80065a2:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80065a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a6:	3a04      	subs	r2, #4
 80065a8:	6979      	ldr	r1, [r7, #20]
 80065aa:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80065ac:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	601a      	str	r2, [r3, #0]
    address--;
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	3b04      	subs	r3, #4
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d8de      	bhi.n	8006582 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80065cc:	3318      	adds	r3, #24
 80065ce:	623b      	str	r3, [r7, #32]
  index = 12;
 80065d0:	230c      	movs	r3, #12
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80065d4:	e021      	b.n	800661a <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	3b01      	subs	r3, #1
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4413      	add	r3, r2
 80065de:	7c1b      	ldrb	r3, [r3, #16]
 80065e0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	3b02      	subs	r3, #2
 80065e6:	6979      	ldr	r1, [r7, #20]
 80065e8:	440b      	add	r3, r1
 80065ea:	7c1b      	ldrb	r3, [r3, #16]
 80065ec:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80065ee:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	3b03      	subs	r3, #3
 80065f4:	6979      	ldr	r1, [r7, #20]
 80065f6:	440b      	add	r3, r1
 80065f8:	7c1b      	ldrb	r3, [r3, #16]
 80065fa:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80065fc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80065fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006600:	3a04      	subs	r2, #4
 8006602:	6979      	ldr	r1, [r7, #20]
 8006604:	440a      	add	r2, r1
 8006606:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8006608:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	601a      	str	r2, [r3, #0]
    address--;
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	3b04      	subs	r3, #4
 8006612:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	3b04      	subs	r3, #4
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	2b03      	cmp	r3, #3
 800661e:	d8da      	bhi.n	80065d6 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006628:	3328      	adds	r3, #40	; 0x28
 800662a:	623b      	str	r3, [r7, #32]
  index = 16;
 800662c:	2310      	movs	r3, #16
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006630:	e01d      	b.n	800666e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	3b01      	subs	r3, #1
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	5cd3      	ldrb	r3, [r2, r3]
 800663a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	3b02      	subs	r3, #2
 8006640:	69f9      	ldr	r1, [r7, #28]
 8006642:	5ccb      	ldrb	r3, [r1, r3]
 8006644:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8006646:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	3b03      	subs	r3, #3
 800664c:	69f9      	ldr	r1, [r7, #28]
 800664e:	5ccb      	ldrb	r3, [r1, r3]
 8006650:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8006652:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8006654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006656:	3a04      	subs	r2, #4
 8006658:	69f9      	ldr	r1, [r7, #28]
 800665a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800665c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	601a      	str	r2, [r3, #0]
    address--;
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	3b04      	subs	r3, #4
 8006666:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	3b04      	subs	r3, #4
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	2b03      	cmp	r3, #3
 8006672:	d8de      	bhi.n	8006632 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800667c:	33cc      	adds	r3, #204	; 0xcc
 800667e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b3b      	ldr	r3, [pc, #236]	; (8006774 <JPEG_Set_Huff_DHTMem+0x21c>)
 8006686:	4013      	ands	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006690:	021a      	lsls	r2, r3, #8
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  *address = value;
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	3b04      	subs	r3, #4
 80066aa:	623b      	str	r3, [r7, #32]
  index = 160;
 80066ac:	23a0      	movs	r3, #160	; 0xa0
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80066b0:	e021      	b.n	80066f6 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	3b01      	subs	r3, #1
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	4413      	add	r3, r2
 80066ba:	7c1b      	ldrb	r3, [r3, #16]
 80066bc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	3b02      	subs	r3, #2
 80066c2:	69f9      	ldr	r1, [r7, #28]
 80066c4:	440b      	add	r3, r1
 80066c6:	7c1b      	ldrb	r3, [r3, #16]
 80066c8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80066ca:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	3b03      	subs	r3, #3
 80066d0:	69f9      	ldr	r1, [r7, #28]
 80066d2:	440b      	add	r3, r1
 80066d4:	7c1b      	ldrb	r3, [r3, #16]
 80066d6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80066d8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80066da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066dc:	3a04      	subs	r2, #4
 80066de:	69f9      	ldr	r1, [r7, #28]
 80066e0:	440a      	add	r2, r1
 80066e2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80066e4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	601a      	str	r2, [r3, #0]
    address--;
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	3b04      	subs	r3, #4
 80066ee:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	3b04      	subs	r3, #4
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80066f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d8da      	bhi.n	80066b2 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006704:	33cc      	adds	r3, #204	; 0xcc
 8006706:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	061a      	lsls	r2, r3, #24
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	431a      	orrs	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	041b      	lsls	r3, r3, #16
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006732:	33dc      	adds	r3, #220	; 0xdc
 8006734:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <JPEG_Set_Huff_DHTMem+0x21c>)
 800673c:	4013      	ands	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	7bdb      	ldrb	r3, [r3, #15]
 8006744:	021a      	lsls	r2, r3, #8
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4313      	orrs	r3, r2
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	7b92      	ldrb	r2, [r2, #14]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	3b04      	subs	r3, #4
 800675c:	623b      	str	r3, [r7, #32]
  index = 12;
 800675e:	230c      	movs	r3, #12
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006762:	e027      	b.n	80067b4 <JPEG_Set_Huff_DHTMem+0x25c>
 8006764:	0800cda4 	.word	0x0800cda4
 8006768:	0800ce58 	.word	0x0800ce58
 800676c:	0800cd6c 	.word	0x0800cd6c
 8006770:	0800cd88 	.word	0x0800cd88
 8006774:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	3301      	adds	r3, #1
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	5cd3      	ldrb	r3, [r2, r3]
 8006780:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8006782:	6939      	ldr	r1, [r7, #16]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	440b      	add	r3, r1
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800678c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	3b01      	subs	r3, #1
 8006792:	6939      	ldr	r1, [r7, #16]
 8006794:	5ccb      	ldrb	r3, [r1, r3]
 8006796:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8006798:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800679a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679c:	3a02      	subs	r2, #2
 800679e:	6939      	ldr	r1, [r7, #16]
 80067a0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80067a2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	601a      	str	r2, [r3, #0]
    address--;
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	3b04      	subs	r3, #4
 80067ac:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	3b04      	subs	r3, #4
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d8de      	bhi.n	8006778 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80067c2:	33dc      	adds	r3, #220	; 0xdc
 80067c4:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	7c5b      	ldrb	r3, [r3, #17]
 80067d2:	061a      	lsls	r2, r3, #24
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	7c1b      	ldrb	r3, [r3, #16]
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80067f0:	33e8      	adds	r3, #232	; 0xe8
 80067f2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	4b6d      	ldr	r3, [pc, #436]	; (80069b0 <JPEG_Set_Huff_DHTMem+0x458>)
 80067fa:	4013      	ands	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	7edb      	ldrb	r3, [r3, #27]
 8006802:	021a      	lsls	r2, r3, #8
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	7e92      	ldrb	r2, [r2, #26]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	3b04      	subs	r3, #4
 800681a:	623b      	str	r3, [r7, #32]
  index = 8;
 800681c:	2308      	movs	r3, #8
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006820:	e021      	b.n	8006866 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	3301      	adds	r3, #1
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	7c1b      	ldrb	r3, [r3, #16]
 800682c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800682e:	6939      	ldr	r1, [r7, #16]
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	440b      	add	r3, r1
 8006834:	3310      	adds	r3, #16
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800683a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	3b01      	subs	r3, #1
 8006840:	6939      	ldr	r1, [r7, #16]
 8006842:	440b      	add	r3, r1
 8006844:	7c1b      	ldrb	r3, [r3, #16]
 8006846:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8006848:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800684a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684c:	3a02      	subs	r2, #2
 800684e:	6939      	ldr	r1, [r7, #16]
 8006850:	440a      	add	r2, r1
 8006852:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006854:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	601a      	str	r2, [r3, #0]
    address--;
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	3b04      	subs	r3, #4
 800685e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	3b04      	subs	r3, #4
 8006864:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	2b03      	cmp	r3, #3
 800686a:	d8da      	bhi.n	8006822 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8006874:	33e8      	adds	r3, #232	; 0xe8
 8006876:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	061a      	lsls	r2, r3, #24
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	431a      	orrs	r2, r3
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	041b      	lsls	r3, r3, #16
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
  *address = value;
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80068a2:	33f8      	adds	r3, #248	; 0xf8
 80068a4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4b41      	ldr	r3, [pc, #260]	; (80069b0 <JPEG_Set_Huff_DHTMem+0x458>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	7bdb      	ldrb	r3, [r3, #15]
 80068b4:	021a      	lsls	r2, r3, #8
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	7b92      	ldrb	r2, [r2, #14]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
  *address = value;
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	3b04      	subs	r3, #4
 80068cc:	623b      	str	r3, [r7, #32]
  index = 12;
 80068ce:	230c      	movs	r3, #12
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80068d2:	e01d      	b.n	8006910 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	3301      	adds	r3, #1
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	5cd3      	ldrb	r3, [r2, r3]
 80068dc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80068de:	69b9      	ldr	r1, [r7, #24]
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	440b      	add	r3, r1
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80068e8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	3b01      	subs	r3, #1
 80068ee:	69b9      	ldr	r1, [r7, #24]
 80068f0:	5ccb      	ldrb	r3, [r1, r3]
 80068f2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80068f4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80068f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f8:	3a02      	subs	r2, #2
 80068fa:	69b9      	ldr	r1, [r7, #24]
 80068fc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80068fe:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	601a      	str	r2, [r3, #0]
    address--;
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	3b04      	subs	r3, #4
 8006908:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	3b04      	subs	r3, #4
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	2b03      	cmp	r3, #3
 8006914:	d8de      	bhi.n	80068d4 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800691e:	33f8      	adds	r3, #248	; 0xf8
 8006920:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	b29b      	uxth	r3, r3
 8006928:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	7c5b      	ldrb	r3, [r3, #17]
 800692e:	061a      	lsls	r2, r3, #24
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	431a      	orrs	r2, r3
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	7c1b      	ldrb	r3, [r3, #16]
 8006938:	041b      	lsls	r3, r3, #16
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800694c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006950:	623b      	str	r3, [r7, #32]
  index = 160;
 8006952:	23a0      	movs	r3, #160	; 0xa0
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8006956:	e021      	b.n	800699c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	3301      	adds	r3, #1
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	4413      	add	r3, r2
 8006960:	7c1b      	ldrb	r3, [r3, #16]
 8006962:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8006964:	69b9      	ldr	r1, [r7, #24]
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	440b      	add	r3, r1
 800696a:	3310      	adds	r3, #16
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8006970:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	3b01      	subs	r3, #1
 8006976:	69b9      	ldr	r1, [r7, #24]
 8006978:	440b      	add	r3, r1
 800697a:	7c1b      	ldrb	r3, [r3, #16]
 800697c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800697e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	3a02      	subs	r2, #2
 8006984:	69b9      	ldr	r1, [r7, #24]
 8006986:	440a      	add	r2, r1
 8006988:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800698a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	601a      	str	r2, [r3, #0]
    address--;
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	3b04      	subs	r3, #4
 8006994:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	3b04      	subs	r3, #4
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d8da      	bhi.n	8006958 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	372c      	adds	r7, #44	; 0x2c
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	ffff0000 	.word	0xffff0000

080069b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80069bc:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <HAL_PWREx_ConfigSupply+0x70>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0304 	and.w	r3, r3, #4
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d00a      	beq.n	80069de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80069c8:	4b16      	ldr	r3, [pc, #88]	; (8006a24 <HAL_PWREx_ConfigSupply+0x70>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d001      	beq.n	80069da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e01f      	b.n	8006a1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e01d      	b.n	8006a1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <HAL_PWREx_ConfigSupply+0x70>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f023 0207 	bic.w	r2, r3, #7
 80069e6:	490f      	ldr	r1, [pc, #60]	; (8006a24 <HAL_PWREx_ConfigSupply+0x70>)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80069ee:	f7fb fa4d 	bl	8001e8c <HAL_GetTick>
 80069f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80069f4:	e009      	b.n	8006a0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80069f6:	f7fb fa49 	bl	8001e8c <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a04:	d901      	bls.n	8006a0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e007      	b.n	8006a1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_PWREx_ConfigSupply+0x70>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a16:	d1ee      	bne.n	80069f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	58024800 	.word	0x58024800

08006a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	; 0x30
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d102      	bne.n	8006a3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f000 bc1d 	b.w	8007276 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 8087 	beq.w	8006b58 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a4a:	4b99      	ldr	r3, [pc, #612]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a54:	4b96      	ldr	r3, [pc, #600]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d007      	beq.n	8006a70 <HAL_RCC_OscConfig+0x48>
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	2b18      	cmp	r3, #24
 8006a64:	d110      	bne.n	8006a88 <HAL_RCC_OscConfig+0x60>
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d10b      	bne.n	8006a88 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a70:	4b8f      	ldr	r3, [pc, #572]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d06c      	beq.n	8006b56 <HAL_RCC_OscConfig+0x12e>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d168      	bne.n	8006b56 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e3f6      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a90:	d106      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x78>
 8006a92:	4b87      	ldr	r3, [pc, #540]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a86      	ldr	r2, [pc, #536]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	e02e      	b.n	8006afe <HAL_RCC_OscConfig+0xd6>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10c      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x9a>
 8006aa8:	4b81      	ldr	r3, [pc, #516]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a80      	ldr	r2, [pc, #512]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	4b7e      	ldr	r3, [pc, #504]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a7d      	ldr	r2, [pc, #500]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	e01d      	b.n	8006afe <HAL_RCC_OscConfig+0xd6>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aca:	d10c      	bne.n	8006ae6 <HAL_RCC_OscConfig+0xbe>
 8006acc:	4b78      	ldr	r3, [pc, #480]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a77      	ldr	r2, [pc, #476]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	4b75      	ldr	r3, [pc, #468]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a74      	ldr	r2, [pc, #464]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	e00b      	b.n	8006afe <HAL_RCC_OscConfig+0xd6>
 8006ae6:	4b72      	ldr	r3, [pc, #456]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a71      	ldr	r2, [pc, #452]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	4b6f      	ldr	r3, [pc, #444]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a6e      	ldr	r2, [pc, #440]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d013      	beq.n	8006b2e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b06:	f7fb f9c1 	bl	8001e8c <HAL_GetTick>
 8006b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b0c:	e008      	b.n	8006b20 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b0e:	f7fb f9bd 	bl	8001e8c <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	2b64      	cmp	r3, #100	; 0x64
 8006b1a:	d901      	bls.n	8006b20 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e3aa      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b20:	4b63      	ldr	r3, [pc, #396]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0f0      	beq.n	8006b0e <HAL_RCC_OscConfig+0xe6>
 8006b2c:	e014      	b.n	8006b58 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b2e:	f7fb f9ad 	bl	8001e8c <HAL_GetTick>
 8006b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b34:	e008      	b.n	8006b48 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b36:	f7fb f9a9 	bl	8001e8c <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b64      	cmp	r3, #100	; 0x64
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e396      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b48:	4b59      	ldr	r3, [pc, #356]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1f0      	bne.n	8006b36 <HAL_RCC_OscConfig+0x10e>
 8006b54:	e000      	b.n	8006b58 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b56:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 80cb 	beq.w	8006cfc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b66:	4b52      	ldr	r3, [pc, #328]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b6e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b70:	4b4f      	ldr	r3, [pc, #316]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d007      	beq.n	8006b8c <HAL_RCC_OscConfig+0x164>
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	2b18      	cmp	r3, #24
 8006b80:	d156      	bne.n	8006c30 <HAL_RCC_OscConfig+0x208>
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d151      	bne.n	8006c30 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b8c:	4b48      	ldr	r3, [pc, #288]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x17c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e368      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ba4:	4b42      	ldr	r3, [pc, #264]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f023 0219 	bic.w	r2, r3, #25
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	493f      	ldr	r1, [pc, #252]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bb6:	f7fb f969 	bl	8001e8c <HAL_GetTick>
 8006bba:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bbe:	f7fb f965 	bl	8001e8c <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e352      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bd0:	4b37      	ldr	r3, [pc, #220]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0f0      	beq.n	8006bbe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bdc:	f7fb f986 	bl	8001eec <HAL_GetREVID>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f241 0203 	movw	r2, #4099	; 0x1003
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d817      	bhi.n	8006c1a <HAL_RCC_OscConfig+0x1f2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d108      	bne.n	8006c04 <HAL_RCC_OscConfig+0x1dc>
 8006bf2:	4b2f      	ldr	r3, [pc, #188]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006bfa:	4a2d      	ldr	r2, [pc, #180]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c02:	e07b      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c04:	4b2a      	ldr	r3, [pc, #168]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	031b      	lsls	r3, r3, #12
 8006c12:	4927      	ldr	r1, [pc, #156]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c18:	e070      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1a:	4b25      	ldr	r3, [pc, #148]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	061b      	lsls	r3, r3, #24
 8006c28:	4921      	ldr	r1, [pc, #132]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c2e:	e065      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d048      	beq.n	8006cca <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006c38:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f023 0219 	bic.w	r2, r3, #25
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	491a      	ldr	r1, [pc, #104]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4a:	f7fb f91f 	bl	8001e8c <HAL_GetTick>
 8006c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c52:	f7fb f91b 	bl	8001e8c <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e308      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c64:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0f0      	beq.n	8006c52 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c70:	f7fb f93c 	bl	8001eec <HAL_GetREVID>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d81a      	bhi.n	8006cb4 <HAL_RCC_OscConfig+0x28c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	2b40      	cmp	r3, #64	; 0x40
 8006c84:	d108      	bne.n	8006c98 <HAL_RCC_OscConfig+0x270>
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c8e:	4a08      	ldr	r2, [pc, #32]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c94:	6053      	str	r3, [r2, #4]
 8006c96:	e031      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	4902      	ldr	r1, [pc, #8]	; (8006cb0 <HAL_RCC_OscConfig+0x288>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	604b      	str	r3, [r1, #4]
 8006cac:	e026      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
 8006cae:	bf00      	nop
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	4b9a      	ldr	r3, [pc, #616]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	061b      	lsls	r3, r3, #24
 8006cc2:	4997      	ldr	r1, [pc, #604]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	604b      	str	r3, [r1, #4]
 8006cc8:	e018      	b.n	8006cfc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cca:	4b95      	ldr	r3, [pc, #596]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a94      	ldr	r2, [pc, #592]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd6:	f7fb f8d9 	bl	8001e8c <HAL_GetTick>
 8006cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cde:	f7fb f8d5 	bl	8001e8c <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e2c2      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006cf0:	4b8b      	ldr	r3, [pc, #556]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f0      	bne.n	8006cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80a9 	beq.w	8006e5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d0a:	4b85      	ldr	r3, [pc, #532]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d14:	4b82      	ldr	r3, [pc, #520]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d007      	beq.n	8006d30 <HAL_RCC_OscConfig+0x308>
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b18      	cmp	r3, #24
 8006d24:	d13a      	bne.n	8006d9c <HAL_RCC_OscConfig+0x374>
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d135      	bne.n	8006d9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d30:	4b7b      	ldr	r3, [pc, #492]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_OscConfig+0x320>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	2b80      	cmp	r3, #128	; 0x80
 8006d42:	d001      	beq.n	8006d48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e296      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d48:	f7fb f8d0 	bl	8001eec <HAL_GetREVID>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d817      	bhi.n	8006d86 <HAL_RCC_OscConfig+0x35e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d108      	bne.n	8006d70 <HAL_RCC_OscConfig+0x348>
 8006d5e:	4b70      	ldr	r3, [pc, #448]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d66:	4a6e      	ldr	r2, [pc, #440]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d6e:	e075      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d70:	4b6b      	ldr	r3, [pc, #428]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	069b      	lsls	r3, r3, #26
 8006d7e:	4968      	ldr	r1, [pc, #416]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d84:	e06a      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d86:	4b66      	ldr	r3, [pc, #408]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	061b      	lsls	r3, r3, #24
 8006d94:	4962      	ldr	r1, [pc, #392]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d9a:	e05f      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d042      	beq.n	8006e2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006da4:	4b5e      	ldr	r3, [pc, #376]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a5d      	ldr	r2, [pc, #372]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db0:	f7fb f86c 	bl	8001e8c <HAL_GetTick>
 8006db4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006db8:	f7fb f868 	bl	8001e8c <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e255      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006dca:	4b55      	ldr	r3, [pc, #340]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0f0      	beq.n	8006db8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dd6:	f7fb f889 	bl	8001eec <HAL_GetREVID>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	f241 0203 	movw	r2, #4099	; 0x1003
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d817      	bhi.n	8006e14 <HAL_RCC_OscConfig+0x3ec>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d108      	bne.n	8006dfe <HAL_RCC_OscConfig+0x3d6>
 8006dec:	4b4c      	ldr	r3, [pc, #304]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006df4:	4a4a      	ldr	r2, [pc, #296]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006df6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dfa:	6053      	str	r3, [r2, #4]
 8006dfc:	e02e      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
 8006dfe:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	069b      	lsls	r3, r3, #26
 8006e0c:	4944      	ldr	r1, [pc, #272]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	604b      	str	r3, [r1, #4]
 8006e12:	e023      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
 8006e14:	4b42      	ldr	r3, [pc, #264]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	493f      	ldr	r1, [pc, #252]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60cb      	str	r3, [r1, #12]
 8006e28:	e018      	b.n	8006e5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e2a:	4b3d      	ldr	r3, [pc, #244]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a3c      	ldr	r2, [pc, #240]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e36:	f7fb f829 	bl	8001e8c <HAL_GetTick>
 8006e3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e3e:	f7fb f825 	bl	8001e8c <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e212      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e50:	4b33      	ldr	r3, [pc, #204]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1f0      	bne.n	8006e3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d036      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d019      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e70:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e74:	4a2a      	ldr	r2, [pc, #168]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7c:	f7fb f806 	bl	8001e8c <HAL_GetTick>
 8006e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e84:	f7fb f802 	bl	8001e8c <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e1ef      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006e96:	4b22      	ldr	r3, [pc, #136]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0f0      	beq.n	8006e84 <HAL_RCC_OscConfig+0x45c>
 8006ea2:	e018      	b.n	8006ed6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ea4:	4b1e      	ldr	r3, [pc, #120]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb0:	f7fa ffec 	bl	8001e8c <HAL_GetTick>
 8006eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eb8:	f7fa ffe8 	bl	8001e8c <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e1d5      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006eca:	4b15      	ldr	r3, [pc, #84]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f0      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d039      	beq.n	8006f56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01c      	beq.n	8006f24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006eea:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006ef0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ef4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006ef6:	f7fa ffc9 	bl	8001e8c <HAL_GetTick>
 8006efa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006efe:	f7fa ffc5 	bl	8001e8c <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e1b2      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f10:	4b03      	ldr	r3, [pc, #12]	; (8006f20 <HAL_RCC_OscConfig+0x4f8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0f0      	beq.n	8006efe <HAL_RCC_OscConfig+0x4d6>
 8006f1c:	e01b      	b.n	8006f56 <HAL_RCC_OscConfig+0x52e>
 8006f1e:	bf00      	nop
 8006f20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f24:	4b9b      	ldr	r3, [pc, #620]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a9a      	ldr	r2, [pc, #616]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f30:	f7fa ffac 	bl	8001e8c <HAL_GetTick>
 8006f34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f38:	f7fa ffa8 	bl	8001e8c <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e195      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f4a:	4b92      	ldr	r3, [pc, #584]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f0      	bne.n	8006f38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f000 8081 	beq.w	8007066 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f64:	4b8c      	ldr	r3, [pc, #560]	; (8007198 <HAL_RCC_OscConfig+0x770>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a8b      	ldr	r2, [pc, #556]	; (8007198 <HAL_RCC_OscConfig+0x770>)
 8006f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f70:	f7fa ff8c 	bl	8001e8c <HAL_GetTick>
 8006f74:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f78:	f7fa ff88 	bl	8001e8c <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b64      	cmp	r3, #100	; 0x64
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e175      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f8a:	4b83      	ldr	r3, [pc, #524]	; (8007198 <HAL_RCC_OscConfig+0x770>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0f0      	beq.n	8006f78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d106      	bne.n	8006fac <HAL_RCC_OscConfig+0x584>
 8006f9e:	4b7d      	ldr	r3, [pc, #500]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	4a7c      	ldr	r2, [pc, #496]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006faa:	e02d      	b.n	8007008 <HAL_RCC_OscConfig+0x5e0>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10c      	bne.n	8006fce <HAL_RCC_OscConfig+0x5a6>
 8006fb4:	4b77      	ldr	r3, [pc, #476]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb8:	4a76      	ldr	r2, [pc, #472]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006fc0:	4b74      	ldr	r3, [pc, #464]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc4:	4a73      	ldr	r2, [pc, #460]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fc6:	f023 0304 	bic.w	r3, r3, #4
 8006fca:	6713      	str	r3, [r2, #112]	; 0x70
 8006fcc:	e01c      	b.n	8007008 <HAL_RCC_OscConfig+0x5e0>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b05      	cmp	r3, #5
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x5c8>
 8006fd6:	4b6f      	ldr	r3, [pc, #444]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	4a6e      	ldr	r2, [pc, #440]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fdc:	f043 0304 	orr.w	r3, r3, #4
 8006fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe2:	4b6c      	ldr	r3, [pc, #432]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fe6:	4a6b      	ldr	r2, [pc, #428]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006fe8:	f043 0301 	orr.w	r3, r3, #1
 8006fec:	6713      	str	r3, [r2, #112]	; 0x70
 8006fee:	e00b      	b.n	8007008 <HAL_RCC_OscConfig+0x5e0>
 8006ff0:	4b68      	ldr	r3, [pc, #416]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	4a67      	ldr	r2, [pc, #412]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffc:	4b65      	ldr	r3, [pc, #404]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	4a64      	ldr	r2, [pc, #400]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007002:	f023 0304 	bic.w	r3, r3, #4
 8007006:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d015      	beq.n	800703c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007010:	f7fa ff3c 	bl	8001e8c <HAL_GetTick>
 8007014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007016:	e00a      	b.n	800702e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007018:	f7fa ff38 	bl	8001e8c <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	f241 3288 	movw	r2, #5000	; 0x1388
 8007026:	4293      	cmp	r3, r2
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e123      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800702e:	4b59      	ldr	r3, [pc, #356]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0ee      	beq.n	8007018 <HAL_RCC_OscConfig+0x5f0>
 800703a:	e014      	b.n	8007066 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703c:	f7fa ff26 	bl	8001e8c <HAL_GetTick>
 8007040:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007042:	e00a      	b.n	800705a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007044:	f7fa ff22 	bl	8001e8c <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e10d      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800705a:	4b4e      	ldr	r3, [pc, #312]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800705c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1ee      	bne.n	8007044 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8102 	beq.w	8007274 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007070:	4b48      	ldr	r3, [pc, #288]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007078:	2b18      	cmp	r3, #24
 800707a:	f000 80bd 	beq.w	80071f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	2b02      	cmp	r3, #2
 8007084:	f040 809e 	bne.w	80071c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007088:	4b42      	ldr	r3, [pc, #264]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a41      	ldr	r2, [pc, #260]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800708e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007094:	f7fa fefa 	bl	8001e8c <HAL_GetTick>
 8007098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800709c:	f7fa fef6 	bl	8001e8c <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e0e3      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80070ae:	4b39      	ldr	r3, [pc, #228]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1f0      	bne.n	800709c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070ba:	4b36      	ldr	r3, [pc, #216]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 80070bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070be:	4b37      	ldr	r3, [pc, #220]	; (800719c <HAL_RCC_OscConfig+0x774>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80070ca:	0112      	lsls	r2, r2, #4
 80070cc:	430a      	orrs	r2, r1
 80070ce:	4931      	ldr	r1, [pc, #196]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	628b      	str	r3, [r1, #40]	; 0x28
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	3b01      	subs	r3, #1
 80070da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	3b01      	subs	r3, #1
 80070e4:	025b      	lsls	r3, r3, #9
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	3b01      	subs	r3, #1
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070f6:	431a      	orrs	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	3b01      	subs	r3, #1
 80070fe:	061b      	lsls	r3, r3, #24
 8007100:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007104:	4923      	ldr	r1, [pc, #140]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007106:	4313      	orrs	r3, r2
 8007108:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800710a:	4b22      	ldr	r3, [pc, #136]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	4a21      	ldr	r2, [pc, #132]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007116:	4b1f      	ldr	r3, [pc, #124]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711a:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <HAL_RCC_OscConfig+0x778>)
 800711c:	4013      	ands	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007122:	00d2      	lsls	r2, r2, #3
 8007124:	491b      	ldr	r1, [pc, #108]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007126:	4313      	orrs	r3, r2
 8007128:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800712a:	4b1a      	ldr	r3, [pc, #104]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712e:	f023 020c 	bic.w	r2, r3, #12
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007136:	4917      	ldr	r1, [pc, #92]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007138:	4313      	orrs	r3, r2
 800713a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800713c:	4b15      	ldr	r3, [pc, #84]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	f023 0202 	bic.w	r2, r3, #2
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007148:	4912      	ldr	r1, [pc, #72]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800714a:	4313      	orrs	r3, r2
 800714c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800714e:	4b11      	ldr	r3, [pc, #68]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	4a10      	ldr	r2, [pc, #64]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800715a:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	4a0d      	ldr	r2, [pc, #52]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007164:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 800716c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007170:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007172:	4b08      	ldr	r3, [pc, #32]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	4a07      	ldr	r2, [pc, #28]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007178:	f043 0301 	orr.w	r3, r3, #1
 800717c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a04      	ldr	r2, [pc, #16]	; (8007194 <HAL_RCC_OscConfig+0x76c>)
 8007184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718a:	f7fa fe7f 	bl	8001e8c <HAL_GetTick>
 800718e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007190:	e011      	b.n	80071b6 <HAL_RCC_OscConfig+0x78e>
 8007192:	bf00      	nop
 8007194:	58024400 	.word	0x58024400
 8007198:	58024800 	.word	0x58024800
 800719c:	fffffc0c 	.word	0xfffffc0c
 80071a0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071a4:	f7fa fe72 	bl	8001e8c <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e05f      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80071b6:	4b32      	ldr	r3, [pc, #200]	; (8007280 <HAL_RCC_OscConfig+0x858>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0f0      	beq.n	80071a4 <HAL_RCC_OscConfig+0x77c>
 80071c2:	e057      	b.n	8007274 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c4:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <HAL_RCC_OscConfig+0x858>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a2d      	ldr	r2, [pc, #180]	; (8007280 <HAL_RCC_OscConfig+0x858>)
 80071ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d0:	f7fa fe5c 	bl	8001e8c <HAL_GetTick>
 80071d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071d6:	e008      	b.n	80071ea <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d8:	f7fa fe58 	bl	8001e8c <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e045      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071ea:	4b25      	ldr	r3, [pc, #148]	; (8007280 <HAL_RCC_OscConfig+0x858>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1f0      	bne.n	80071d8 <HAL_RCC_OscConfig+0x7b0>
 80071f6:	e03d      	b.n	8007274 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80071f8:	4b21      	ldr	r3, [pc, #132]	; (8007280 <HAL_RCC_OscConfig+0x858>)
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80071fe:	4b20      	ldr	r3, [pc, #128]	; (8007280 <HAL_RCC_OscConfig+0x858>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	2b01      	cmp	r3, #1
 800720a:	d031      	beq.n	8007270 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f003 0203 	and.w	r2, r3, #3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007216:	429a      	cmp	r2, r3
 8007218:	d12a      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	091b      	lsrs	r3, r3, #4
 800721e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007226:	429a      	cmp	r2, r3
 8007228:	d122      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007236:	429a      	cmp	r2, r3
 8007238:	d11a      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	0a5b      	lsrs	r3, r3, #9
 800723e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007246:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007248:	429a      	cmp	r2, r3
 800724a:	d111      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	0c1b      	lsrs	r3, r3, #16
 8007250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800725a:	429a      	cmp	r2, r3
 800725c:	d108      	bne.n	8007270 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d001      	beq.n	8007274 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e000      	b.n	8007276 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3730      	adds	r7, #48	; 0x30
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	58024400 	.word	0x58024400

08007284 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e19c      	b.n	80075d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007298:	4b8a      	ldr	r3, [pc, #552]	; (80074c4 <HAL_RCC_ClockConfig+0x240>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d910      	bls.n	80072c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a6:	4b87      	ldr	r3, [pc, #540]	; (80074c4 <HAL_RCC_ClockConfig+0x240>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f023 020f 	bic.w	r2, r3, #15
 80072ae:	4985      	ldr	r1, [pc, #532]	; (80074c4 <HAL_RCC_ClockConfig+0x240>)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b6:	4b83      	ldr	r3, [pc, #524]	; (80074c4 <HAL_RCC_ClockConfig+0x240>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d001      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e184      	b.n	80075d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d010      	beq.n	80072f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	4b7b      	ldr	r3, [pc, #492]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d908      	bls.n	80072f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80072e4:	4b78      	ldr	r3, [pc, #480]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	4975      	ldr	r1, [pc, #468]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d010      	beq.n	8007324 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695a      	ldr	r2, [r3, #20]
 8007306:	4b70      	ldr	r3, [pc, #448]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800730e:	429a      	cmp	r2, r3
 8007310:	d908      	bls.n	8007324 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007312:	4b6d      	ldr	r3, [pc, #436]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	496a      	ldr	r1, [pc, #424]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007320:	4313      	orrs	r3, r2
 8007322:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b00      	cmp	r3, #0
 800732e:	d010      	beq.n	8007352 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699a      	ldr	r2, [r3, #24]
 8007334:	4b64      	ldr	r3, [pc, #400]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800733c:	429a      	cmp	r2, r3
 800733e:	d908      	bls.n	8007352 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007340:	4b61      	ldr	r3, [pc, #388]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	495e      	ldr	r1, [pc, #376]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 800734e:	4313      	orrs	r3, r2
 8007350:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0320 	and.w	r3, r3, #32
 800735a:	2b00      	cmp	r3, #0
 800735c:	d010      	beq.n	8007380 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69da      	ldr	r2, [r3, #28]
 8007362:	4b59      	ldr	r3, [pc, #356]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800736a:	429a      	cmp	r2, r3
 800736c:	d908      	bls.n	8007380 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800736e:	4b56      	ldr	r3, [pc, #344]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	4953      	ldr	r1, [pc, #332]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 800737c:	4313      	orrs	r3, r2
 800737e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d010      	beq.n	80073ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	4b4d      	ldr	r3, [pc, #308]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	429a      	cmp	r2, r3
 800739a:	d908      	bls.n	80073ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800739c:	4b4a      	ldr	r3, [pc, #296]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f023 020f 	bic.w	r2, r3, #15
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	4947      	ldr	r1, [pc, #284]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d055      	beq.n	8007466 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80073ba:	4b43      	ldr	r3, [pc, #268]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	4940      	ldr	r1, [pc, #256]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d107      	bne.n	80073e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073d4:	4b3c      	ldr	r3, [pc, #240]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d121      	bne.n	8007424 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0f6      	b.n	80075d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d107      	bne.n	80073fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80073ec:	4b36      	ldr	r3, [pc, #216]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d115      	bne.n	8007424 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0ea      	b.n	80075d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d107      	bne.n	8007414 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007404:	4b30      	ldr	r3, [pc, #192]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e0de      	b.n	80075d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007414:	4b2c      	ldr	r3, [pc, #176]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e0d6      	b.n	80075d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007424:	4b28      	ldr	r3, [pc, #160]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f023 0207 	bic.w	r2, r3, #7
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	4925      	ldr	r1, [pc, #148]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007432:	4313      	orrs	r3, r2
 8007434:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007436:	f7fa fd29 	bl	8001e8c <HAL_GetTick>
 800743a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743c:	e00a      	b.n	8007454 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800743e:	f7fa fd25 	bl	8001e8c <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	f241 3288 	movw	r2, #5000	; 0x1388
 800744c:	4293      	cmp	r3, r2
 800744e:	d901      	bls.n	8007454 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e0be      	b.n	80075d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007454:	4b1c      	ldr	r3, [pc, #112]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	429a      	cmp	r2, r3
 8007464:	d1eb      	bne.n	800743e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d010      	beq.n	8007494 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	429a      	cmp	r2, r3
 8007480:	d208      	bcs.n	8007494 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007482:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	f023 020f 	bic.w	r2, r3, #15
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	490e      	ldr	r1, [pc, #56]	; (80074c8 <HAL_RCC_ClockConfig+0x244>)
 8007490:	4313      	orrs	r3, r2
 8007492:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007494:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <HAL_RCC_ClockConfig+0x240>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d214      	bcs.n	80074cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074a2:	4b08      	ldr	r3, [pc, #32]	; (80074c4 <HAL_RCC_ClockConfig+0x240>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f023 020f 	bic.w	r2, r3, #15
 80074aa:	4906      	ldr	r1, [pc, #24]	; (80074c4 <HAL_RCC_ClockConfig+0x240>)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074b2:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <HAL_RCC_ClockConfig+0x240>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 030f 	and.w	r3, r3, #15
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d005      	beq.n	80074cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e086      	b.n	80075d2 <HAL_RCC_ClockConfig+0x34e>
 80074c4:	52002000 	.word	0x52002000
 80074c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d010      	beq.n	80074fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691a      	ldr	r2, [r3, #16]
 80074dc:	4b3f      	ldr	r3, [pc, #252]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d208      	bcs.n	80074fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074e8:	4b3c      	ldr	r3, [pc, #240]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	4939      	ldr	r1, [pc, #228]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	695a      	ldr	r2, [r3, #20]
 800750a:	4b34      	ldr	r3, [pc, #208]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007512:	429a      	cmp	r2, r3
 8007514:	d208      	bcs.n	8007528 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007516:	4b31      	ldr	r3, [pc, #196]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	492e      	ldr	r1, [pc, #184]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 8007524:	4313      	orrs	r3, r2
 8007526:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0310 	and.w	r3, r3, #16
 8007530:	2b00      	cmp	r3, #0
 8007532:	d010      	beq.n	8007556 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	4b28      	ldr	r3, [pc, #160]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007540:	429a      	cmp	r2, r3
 8007542:	d208      	bcs.n	8007556 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007544:	4b25      	ldr	r3, [pc, #148]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	4922      	ldr	r1, [pc, #136]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 8007552:	4313      	orrs	r3, r2
 8007554:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d010      	beq.n	8007584 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69da      	ldr	r2, [r3, #28]
 8007566:	4b1d      	ldr	r3, [pc, #116]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800756e:	429a      	cmp	r2, r3
 8007570:	d208      	bcs.n	8007584 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007572:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	4917      	ldr	r1, [pc, #92]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 8007580:	4313      	orrs	r3, r2
 8007582:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007584:	f000 f89e 	bl	80076c4 <HAL_RCC_GetSysClockFreq>
 8007588:	4602      	mov	r2, r0
 800758a:	4b14      	ldr	r3, [pc, #80]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	0a1b      	lsrs	r3, r3, #8
 8007590:	f003 030f 	and.w	r3, r3, #15
 8007594:	4912      	ldr	r1, [pc, #72]	; (80075e0 <HAL_RCC_ClockConfig+0x35c>)
 8007596:	5ccb      	ldrb	r3, [r1, r3]
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	fa22 f303 	lsr.w	r3, r2, r3
 80075a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075a2:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <HAL_RCC_ClockConfig+0x358>)
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	4a0d      	ldr	r2, [pc, #52]	; (80075e0 <HAL_RCC_ClockConfig+0x35c>)
 80075ac:	5cd3      	ldrb	r3, [r2, r3]
 80075ae:	f003 031f 	and.w	r3, r3, #31
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	fa22 f303 	lsr.w	r3, r2, r3
 80075b8:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <HAL_RCC_ClockConfig+0x360>)
 80075ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075bc:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <HAL_RCC_ClockConfig+0x364>)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <HAL_RCC_ClockConfig+0x368>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fa fc16 	bl	8001df8 <HAL_InitTick>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	58024400 	.word	0x58024400
 80075e0:	0800cd54 	.word	0x0800cd54
 80075e4:	24000004 	.word	0x24000004
 80075e8:	24000000 	.word	0x24000000
 80075ec:	24000008 	.word	0x24000008

080075f0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08c      	sub	sp, #48	; 0x30
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d12a      	bne.n	8007658 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007602:	4b2d      	ldr	r3, [pc, #180]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 8007604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007608:	4a2b      	ldr	r2, [pc, #172]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 800760a:	f043 0301 	orr.w	r3, r3, #1
 800760e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007612:	4b29      	ldr	r3, [pc, #164]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 8007614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	61bb      	str	r3, [r7, #24]
 800761e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007620:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007626:	2302      	movs	r3, #2
 8007628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800762a:	2303      	movs	r3, #3
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800762e:	2300      	movs	r3, #0
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007632:	2300      	movs	r3, #0
 8007634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007636:	f107 031c 	add.w	r3, r7, #28
 800763a:	4619      	mov	r1, r3
 800763c:	481f      	ldr	r0, [pc, #124]	; (80076bc <HAL_RCC_MCOConfig+0xcc>)
 800763e:	f7fd fd4f 	bl	80050e0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007642:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800764a:	68b9      	ldr	r1, [r7, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	430b      	orrs	r3, r1
 8007650:	4919      	ldr	r1, [pc, #100]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 8007652:	4313      	orrs	r3, r2
 8007654:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007656:	e02a      	b.n	80076ae <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007658:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 800765a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800765e:	4a16      	ldr	r2, [pc, #88]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 8007660:	f043 0304 	orr.w	r3, r3, #4
 8007664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007668:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 800766a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800766e:	f003 0304 	and.w	r3, r3, #4
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800767a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767c:	2302      	movs	r3, #2
 800767e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007680:	2303      	movs	r3, #3
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007684:	2300      	movs	r3, #0
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007688:	2300      	movs	r3, #0
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800768c:	f107 031c 	add.w	r3, r7, #28
 8007690:	4619      	mov	r1, r3
 8007692:	480b      	ldr	r0, [pc, #44]	; (80076c0 <HAL_RCC_MCOConfig+0xd0>)
 8007694:	f7fd fd24 	bl	80050e0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007698:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	01d9      	lsls	r1, r3, #7
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	430b      	orrs	r3, r1
 80076a8:	4903      	ldr	r1, [pc, #12]	; (80076b8 <HAL_RCC_MCOConfig+0xc8>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	610b      	str	r3, [r1, #16]
}
 80076ae:	bf00      	nop
 80076b0:	3730      	adds	r7, #48	; 0x30
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	58024400 	.word	0x58024400
 80076bc:	58020000 	.word	0x58020000
 80076c0:	58020800 	.word	0x58020800

080076c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b089      	sub	sp, #36	; 0x24
 80076c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076ca:	4bb3      	ldr	r3, [pc, #716]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076d2:	2b18      	cmp	r3, #24
 80076d4:	f200 8155 	bhi.w	8007982 <HAL_RCC_GetSysClockFreq+0x2be>
 80076d8:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	08007745 	.word	0x08007745
 80076e4:	08007983 	.word	0x08007983
 80076e8:	08007983 	.word	0x08007983
 80076ec:	08007983 	.word	0x08007983
 80076f0:	08007983 	.word	0x08007983
 80076f4:	08007983 	.word	0x08007983
 80076f8:	08007983 	.word	0x08007983
 80076fc:	08007983 	.word	0x08007983
 8007700:	0800776b 	.word	0x0800776b
 8007704:	08007983 	.word	0x08007983
 8007708:	08007983 	.word	0x08007983
 800770c:	08007983 	.word	0x08007983
 8007710:	08007983 	.word	0x08007983
 8007714:	08007983 	.word	0x08007983
 8007718:	08007983 	.word	0x08007983
 800771c:	08007983 	.word	0x08007983
 8007720:	08007771 	.word	0x08007771
 8007724:	08007983 	.word	0x08007983
 8007728:	08007983 	.word	0x08007983
 800772c:	08007983 	.word	0x08007983
 8007730:	08007983 	.word	0x08007983
 8007734:	08007983 	.word	0x08007983
 8007738:	08007983 	.word	0x08007983
 800773c:	08007983 	.word	0x08007983
 8007740:	08007777 	.word	0x08007777
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007744:	4b94      	ldr	r3, [pc, #592]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d009      	beq.n	8007764 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007750:	4b91      	ldr	r3, [pc, #580]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	08db      	lsrs	r3, r3, #3
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	4a90      	ldr	r2, [pc, #576]	; (800799c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
 8007760:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007762:	e111      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007764:	4b8d      	ldr	r3, [pc, #564]	; (800799c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007766:	61bb      	str	r3, [r7, #24]
    break;
 8007768:	e10e      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800776a:	4b8d      	ldr	r3, [pc, #564]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800776c:	61bb      	str	r3, [r7, #24]
    break;
 800776e:	e10b      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007770:	4b8c      	ldr	r3, [pc, #560]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007772:	61bb      	str	r3, [r7, #24]
    break;
 8007774:	e108      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007776:	4b88      	ldr	r3, [pc, #544]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007780:	4b85      	ldr	r3, [pc, #532]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	091b      	lsrs	r3, r3, #4
 8007786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800778a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800778c:	4b82      	ldr	r3, [pc, #520]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007796:	4b80      	ldr	r3, [pc, #512]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	08db      	lsrs	r3, r3, #3
 800779c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	fb02 f303 	mul.w	r3, r2, r3
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 80e1 	beq.w	800797c <HAL_RCC_GetSysClockFreq+0x2b8>
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	f000 8083 	beq.w	80078c8 <HAL_RCC_GetSysClockFreq+0x204>
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	f200 80a1 	bhi.w	800790c <HAL_RCC_GetSysClockFreq+0x248>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_RCC_GetSysClockFreq+0x114>
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d056      	beq.n	8007884 <HAL_RCC_GetSysClockFreq+0x1c0>
 80077d6:	e099      	b.n	800790c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077d8:	4b6f      	ldr	r3, [pc, #444]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d02d      	beq.n	8007840 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077e4:	4b6c      	ldr	r3, [pc, #432]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	08db      	lsrs	r3, r3, #3
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	4a6b      	ldr	r2, [pc, #428]	; (800799c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077f0:	fa22 f303 	lsr.w	r3, r2, r3
 80077f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	ee07 3a90 	vmov	s15, r3
 80077fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800780e:	4b62      	ldr	r3, [pc, #392]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800781e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007822:	eddf 5a61 	vldr	s11, [pc, #388]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800782a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800782e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800783a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800783e:	e087      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800784a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80079ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800784e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007852:	4b51      	ldr	r3, [pc, #324]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007862:	ed97 6a02 	vldr	s12, [r7, #8]
 8007866:	eddf 5a50 	vldr	s11, [pc, #320]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800786a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800786e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800787a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007882:	e065      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80079b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007896:	4b40      	ldr	r3, [pc, #256]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80078aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c6:	e043      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80079b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80078d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078da:	4b2f      	ldr	r3, [pc, #188]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80078ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800790a:	e021      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007916:	eddf 6a26 	vldr	s13, [pc, #152]	; 80079b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800791a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791e:	4b1e      	ldr	r3, [pc, #120]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007926:	ee07 3a90 	vmov	s15, r3
 800792a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800792e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007932:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80079a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800793a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800793e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800794a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800794e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	0a5b      	lsrs	r3, r3, #9
 8007956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795a:	3301      	adds	r3, #1
 800795c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	ee07 3a90 	vmov	s15, r3
 8007964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007968:	edd7 6a07 	vldr	s13, [r7, #28]
 800796c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007974:	ee17 3a90 	vmov	r3, s15
 8007978:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800797a:	e005      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	61bb      	str	r3, [r7, #24]
    break;
 8007980:	e002      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007984:	61bb      	str	r3, [r7, #24]
    break;
 8007986:	bf00      	nop
  }

  return sysclockfreq;
 8007988:	69bb      	ldr	r3, [r7, #24]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3724      	adds	r7, #36	; 0x24
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	58024400 	.word	0x58024400
 800799c:	03d09000 	.word	0x03d09000
 80079a0:	003d0900 	.word	0x003d0900
 80079a4:	007a1200 	.word	0x007a1200
 80079a8:	46000000 	.word	0x46000000
 80079ac:	4c742400 	.word	0x4c742400
 80079b0:	4a742400 	.word	0x4a742400
 80079b4:	4af42400 	.word	0x4af42400

080079b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80079be:	f7ff fe81 	bl	80076c4 <HAL_RCC_GetSysClockFreq>
 80079c2:	4602      	mov	r2, r0
 80079c4:	4b10      	ldr	r3, [pc, #64]	; (8007a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	0a1b      	lsrs	r3, r3, #8
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	490f      	ldr	r1, [pc, #60]	; (8007a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80079d0:	5ccb      	ldrb	r3, [r1, r3]
 80079d2:	f003 031f 	and.w	r3, r3, #31
 80079d6:	fa22 f303 	lsr.w	r3, r2, r3
 80079da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079dc:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <HAL_RCC_GetHCLKFreq+0x50>)
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	f003 030f 	and.w	r3, r3, #15
 80079e4:	4a09      	ldr	r2, [pc, #36]	; (8007a0c <HAL_RCC_GetHCLKFreq+0x54>)
 80079e6:	5cd3      	ldrb	r3, [r2, r3]
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	fa22 f303 	lsr.w	r3, r2, r3
 80079f2:	4a07      	ldr	r2, [pc, #28]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80079f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079f6:	4a07      	ldr	r2, [pc, #28]	; (8007a14 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x58>)
 80079fe:	681b      	ldr	r3, [r3, #0]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	58024400 	.word	0x58024400
 8007a0c:	0800cd54 	.word	0x0800cd54
 8007a10:	24000004 	.word	0x24000004
 8007a14:	24000000 	.word	0x24000000

08007a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007a1c:	f7ff ffcc 	bl	80079b8 <HAL_RCC_GetHCLKFreq>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	091b      	lsrs	r3, r3, #4
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	4904      	ldr	r1, [pc, #16]	; (8007a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a2e:	5ccb      	ldrb	r3, [r1, r3]
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	58024400 	.word	0x58024400
 8007a40:	0800cd54 	.word	0x0800cd54

08007a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007a48:	f7ff ffb6 	bl	80079b8 <HAL_RCC_GetHCLKFreq>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	4904      	ldr	r1, [pc, #16]	; (8007a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a5a:	5ccb      	ldrb	r3, [r1, r3]
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	58024400 	.word	0x58024400
 8007a6c:	0800cd54 	.word	0x0800cd54

08007a70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a78:	2300      	movs	r3, #0
 8007a7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d03f      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a94:	d02a      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007a96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a9a:	d824      	bhi.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aa0:	d018      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aa6:	d81e      	bhi.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ab0:	d007      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007ab2:	e018      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab4:	4ba3      	ldr	r3, [pc, #652]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	4aa2      	ldr	r2, [pc, #648]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ac0:	e015      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 f9d5 	bl	8008e78 <RCCEx_PLL2_Config>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ad2:	e00c      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3324      	adds	r3, #36	; 0x24
 8007ad8:	2102      	movs	r1, #2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 fa7e 	bl	8008fdc <RCCEx_PLL3_Config>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ae4:	e003      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aea:	e000      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007af4:	4b93      	ldr	r3, [pc, #588]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b00:	4990      	ldr	r1, [pc, #576]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	650b      	str	r3, [r1, #80]	; 0x50
 8007b06:	e001      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d03d      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1c:	2b04      	cmp	r3, #4
 8007b1e:	d826      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007b20:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007b3d 	.word	0x08007b3d
 8007b2c:	08007b4b 	.word	0x08007b4b
 8007b30:	08007b5d 	.word	0x08007b5d
 8007b34:	08007b75 	.word	0x08007b75
 8007b38:	08007b75 	.word	0x08007b75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b3c:	4b81      	ldr	r3, [pc, #516]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	4a80      	ldr	r2, [pc, #512]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b48:	e015      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	2100      	movs	r1, #0
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 f991 	bl	8008e78 <RCCEx_PLL2_Config>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b5a:	e00c      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	2100      	movs	r1, #0
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 fa3a 	bl	8008fdc <RCCEx_PLL3_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b6c:	e003      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]
      break;
 8007b72:	e000      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b7c:	4b71      	ldr	r3, [pc, #452]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b80:	f023 0207 	bic.w	r2, r3, #7
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b88:	496e      	ldr	r1, [pc, #440]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b8e:	e001      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d042      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba8:	d02b      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bae:	d825      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007bb0:	2bc0      	cmp	r3, #192	; 0xc0
 8007bb2:	d028      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007bb4:	2bc0      	cmp	r3, #192	; 0xc0
 8007bb6:	d821      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007bb8:	2b80      	cmp	r3, #128	; 0x80
 8007bba:	d016      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007bbc:	2b80      	cmp	r3, #128	; 0x80
 8007bbe:	d81d      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007bc4:	2b40      	cmp	r3, #64	; 0x40
 8007bc6:	d007      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007bc8:	e018      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bca:	4b5e      	ldr	r3, [pc, #376]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	4a5d      	ldr	r2, [pc, #372]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007bd6:	e017      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 f94a 	bl	8008e78 <RCCEx_PLL2_Config>
 8007be4:	4603      	mov	r3, r0
 8007be6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007be8:	e00e      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3324      	adds	r3, #36	; 0x24
 8007bee:	2100      	movs	r1, #0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f001 f9f3 	bl	8008fdc <RCCEx_PLL3_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007bfa:	e005      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007c00:	e002      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c02:	bf00      	nop
 8007c04:	e000      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d109      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c0e:	4b4d      	ldr	r3, [pc, #308]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1a:	494a      	ldr	r1, [pc, #296]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	650b      	str	r3, [r1, #80]	; 0x50
 8007c20:	e001      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
 8007c24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d049      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c3c:	d030      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007c3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c42:	d82a      	bhi.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007c44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c48:	d02c      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007c4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c4e:	d824      	bhi.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c54:	d018      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c5a:	d81e      	bhi.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007c60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c64:	d007      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007c66:	e018      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c68:	4b36      	ldr	r3, [pc, #216]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	4a35      	ldr	r2, [pc, #212]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c74:	e017      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f001 f8fb 	bl	8008e78 <RCCEx_PLL2_Config>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007c86:	e00e      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3324      	adds	r3, #36	; 0x24
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f001 f9a4 	bl	8008fdc <RCCEx_PLL3_Config>
 8007c94:	4603      	mov	r3, r0
 8007c96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c98:	e005      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9e:	e002      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007ca0:	bf00      	nop
 8007ca2:	e000      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007cac:	4b25      	ldr	r3, [pc, #148]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007cba:	4922      	ldr	r1, [pc, #136]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	658b      	str	r3, [r1, #88]	; 0x58
 8007cc0:	e001      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d04b      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cdc:	d030      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ce2:	d82a      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ce4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ce8:	d02e      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007cea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007cee:	d824      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007cf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cf4:	d018      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cfa:	d81e      	bhi.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d04:	d007      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007d06:	e018      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d08:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0c:	4a0d      	ldr	r2, [pc, #52]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d14:	e019      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 f8ab 	bl	8008e78 <RCCEx_PLL2_Config>
 8007d22:	4603      	mov	r3, r0
 8007d24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d26:	e010      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3324      	adds	r3, #36	; 0x24
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 f954 	bl	8008fdc <RCCEx_PLL3_Config>
 8007d34:	4603      	mov	r3, r0
 8007d36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d38:	e007      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3e:	e004      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007d40:	bf00      	nop
 8007d42:	e002      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007d44:	58024400 	.word	0x58024400
      break;
 8007d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d50:	4b99      	ldr	r3, [pc, #612]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d5e:	4996      	ldr	r1, [pc, #600]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	658b      	str	r3, [r1, #88]	; 0x58
 8007d64:	e001      	b.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d032      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7a:	2b30      	cmp	r3, #48	; 0x30
 8007d7c:	d01c      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007d7e:	2b30      	cmp	r3, #48	; 0x30
 8007d80:	d817      	bhi.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	d00c      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	d813      	bhi.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d016      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d10f      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d92:	4b89      	ldr	r3, [pc, #548]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	4a88      	ldr	r2, [pc, #544]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007d9e:	e00e      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3304      	adds	r3, #4
 8007da4:	2102      	movs	r1, #2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 f866 	bl	8008e78 <RCCEx_PLL2_Config>
 8007dac:	4603      	mov	r3, r0
 8007dae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007db0:	e005      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
      break;
 8007db6:	e002      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007db8:	bf00      	nop
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d109      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007dc4:	4b7c      	ldr	r3, [pc, #496]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd0:	4979      	ldr	r1, [pc, #484]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007dd6:	e001      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d047      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007df0:	d030      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007df6:	d82a      	bhi.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007df8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dfc:	d02c      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007dfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e02:	d824      	bhi.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e08:	d018      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e0e:	d81e      	bhi.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e18:	d007      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007e1a:	e018      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e1c:	4b66      	ldr	r3, [pc, #408]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e20:	4a65      	ldr	r2, [pc, #404]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e28:	e017      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f001 f821 	bl	8008e78 <RCCEx_PLL2_Config>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e3a:	e00e      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3324      	adds	r3, #36	; 0x24
 8007e40:	2100      	movs	r1, #0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 f8ca 	bl	8008fdc <RCCEx_PLL3_Config>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e4c:	e005      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	75fb      	strb	r3, [r7, #23]
      break;
 8007e52:	e002      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e60:	4b55      	ldr	r3, [pc, #340]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6c:	4952      	ldr	r1, [pc, #328]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	650b      	str	r3, [r1, #80]	; 0x50
 8007e72:	e001      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d049      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e8c:	d02e      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007e8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e92:	d828      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007e94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e98:	d02a      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007e9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e9e:	d822      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007ea0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ea4:	d026      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007ea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eaa:	d81c      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb0:	d010      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007eb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb6:	d816      	bhi.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01d      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ec0:	d111      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 ffd5 	bl	8008e78 <RCCEx_PLL2_Config>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ed2:	e012      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3324      	adds	r3, #36	; 0x24
 8007ed8:	2101      	movs	r1, #1
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 f87e 	bl	8008fdc <RCCEx_PLL3_Config>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ee4:	e009      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8007eea:	e006      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007eec:	bf00      	nop
 8007eee:	e004      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007ef0:	bf00      	nop
 8007ef2:	e002      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007ef4:	bf00      	nop
 8007ef6:	e000      	b.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d109      	bne.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f00:	4b2d      	ldr	r3, [pc, #180]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f04:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0c:	492a      	ldr	r1, [pc, #168]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	650b      	str	r3, [r1, #80]	; 0x50
 8007f12:	e001      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f14:	7dfb      	ldrb	r3, [r7, #23]
 8007f16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d04d      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f2e:	d02e      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f34:	d828      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3a:	d02a      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f40:	d822      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007f42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f46:	d026      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007f48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f4c:	d81c      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f52:	d010      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f58:	d816      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01d      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f62:	d111      	bne.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3304      	adds	r3, #4
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 ff84 	bl	8008e78 <RCCEx_PLL2_Config>
 8007f70:	4603      	mov	r3, r0
 8007f72:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f74:	e012      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3324      	adds	r3, #36	; 0x24
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f001 f82d 	bl	8008fdc <RCCEx_PLL3_Config>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f86:	e009      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f8c:	e006      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007f8e:	bf00      	nop
 8007f90:	e004      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007f92:	bf00      	nop
 8007f94:	e002      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007f96:	bf00      	nop
 8007f98:	e000      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007f9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10c      	bne.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007fa2:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fb0:	4901      	ldr	r1, [pc, #4]	; (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	658b      	str	r3, [r1, #88]	; 0x58
 8007fb6:	e003      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
 8007fbe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d02f      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd4:	d00e      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fda:	d814      	bhi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d015      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fe4:	d10f      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe6:	4baf      	ldr	r3, [pc, #700]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	4aae      	ldr	r2, [pc, #696]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007ff2:	e00c      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 ff3c 	bl	8008e78 <RCCEx_PLL2_Config>
 8008000:	4603      	mov	r3, r0
 8008002:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008004:	e003      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	75fb      	strb	r3, [r7, #23]
      break;
 800800a:	e000      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800800c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008014:	4ba3      	ldr	r3, [pc, #652]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008018:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008020:	49a0      	ldr	r1, [pc, #640]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008022:	4313      	orrs	r3, r2
 8008024:	650b      	str	r3, [r1, #80]	; 0x50
 8008026:	e001      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d032      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803c:	2b03      	cmp	r3, #3
 800803e:	d81b      	bhi.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008040:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008046:	bf00      	nop
 8008048:	0800807f 	.word	0x0800807f
 800804c:	08008059 	.word	0x08008059
 8008050:	08008067 	.word	0x08008067
 8008054:	0800807f 	.word	0x0800807f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008058:	4b92      	ldr	r3, [pc, #584]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	4a91      	ldr	r2, [pc, #580]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800805e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008064:	e00c      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3304      	adds	r3, #4
 800806a:	2102      	movs	r1, #2
 800806c:	4618      	mov	r0, r3
 800806e:	f000 ff03 	bl	8008e78 <RCCEx_PLL2_Config>
 8008072:	4603      	mov	r3, r0
 8008074:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008076:	e003      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	e000      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800807e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d109      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008086:	4b87      	ldr	r3, [pc, #540]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808a:	f023 0203 	bic.w	r2, r3, #3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008092:	4984      	ldr	r1, [pc, #528]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008094:	4313      	orrs	r3, r2
 8008096:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008098:	e001      	b.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 8086 	beq.w	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080ac:	4b7e      	ldr	r3, [pc, #504]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a7d      	ldr	r2, [pc, #500]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80080b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080b8:	f7f9 fee8 	bl	8001e8c <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080be:	e009      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080c0:	f7f9 fee4 	bl	8001e8c <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b64      	cmp	r3, #100	; 0x64
 80080cc:	d902      	bls.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	75fb      	strb	r3, [r7, #23]
        break;
 80080d2:	e005      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080d4:	4b74      	ldr	r3, [pc, #464]	; (80082a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0ef      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d166      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080e6:	4b6f      	ldr	r3, [pc, #444]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80080e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080f0:	4053      	eors	r3, r2
 80080f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d013      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080fa:	4b6a      	ldr	r3, [pc, #424]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80080fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008102:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008104:	4b67      	ldr	r3, [pc, #412]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008108:	4a66      	ldr	r2, [pc, #408]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800810a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800810e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008110:	4b64      	ldr	r3, [pc, #400]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008114:	4a63      	ldr	r2, [pc, #396]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800811a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800811c:	4a61      	ldr	r2, [pc, #388]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812c:	d115      	bne.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812e:	f7f9 fead 	bl	8001e8c <HAL_GetTick>
 8008132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008134:	e00b      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008136:	f7f9 fea9 	bl	8001e8c <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	f241 3288 	movw	r2, #5000	; 0x1388
 8008144:	4293      	cmp	r3, r2
 8008146:	d902      	bls.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	75fb      	strb	r3, [r7, #23]
            break;
 800814c:	e005      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800814e:	4b55      	ldr	r3, [pc, #340]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0ed      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800815a:	7dfb      	ldrb	r3, [r7, #23]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d126      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800816e:	d10d      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008170:	4b4c      	ldr	r3, [pc, #304]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800817e:	0919      	lsrs	r1, r3, #4
 8008180:	4b4a      	ldr	r3, [pc, #296]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008182:	400b      	ands	r3, r1
 8008184:	4947      	ldr	r1, [pc, #284]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008186:	4313      	orrs	r3, r2
 8008188:	610b      	str	r3, [r1, #16]
 800818a:	e005      	b.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800818c:	4b45      	ldr	r3, [pc, #276]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	4a44      	ldr	r2, [pc, #272]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008192:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008196:	6113      	str	r3, [r2, #16]
 8008198:	4b42      	ldr	r3, [pc, #264]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800819a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081a6:	493f      	ldr	r1, [pc, #252]	; (80082a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	670b      	str	r3, [r1, #112]	; 0x70
 80081ac:	e004      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	75bb      	strb	r3, [r7, #22]
 80081b2:	e001      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b4:	7dfb      	ldrb	r3, [r7, #23]
 80081b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8085 	beq.w	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ca:	2b28      	cmp	r3, #40	; 0x28
 80081cc:	d866      	bhi.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80081ce:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	080082b1 	.word	0x080082b1
 80081d8:	0800829d 	.word	0x0800829d
 80081dc:	0800829d 	.word	0x0800829d
 80081e0:	0800829d 	.word	0x0800829d
 80081e4:	0800829d 	.word	0x0800829d
 80081e8:	0800829d 	.word	0x0800829d
 80081ec:	0800829d 	.word	0x0800829d
 80081f0:	0800829d 	.word	0x0800829d
 80081f4:	08008279 	.word	0x08008279
 80081f8:	0800829d 	.word	0x0800829d
 80081fc:	0800829d 	.word	0x0800829d
 8008200:	0800829d 	.word	0x0800829d
 8008204:	0800829d 	.word	0x0800829d
 8008208:	0800829d 	.word	0x0800829d
 800820c:	0800829d 	.word	0x0800829d
 8008210:	0800829d 	.word	0x0800829d
 8008214:	0800828b 	.word	0x0800828b
 8008218:	0800829d 	.word	0x0800829d
 800821c:	0800829d 	.word	0x0800829d
 8008220:	0800829d 	.word	0x0800829d
 8008224:	0800829d 	.word	0x0800829d
 8008228:	0800829d 	.word	0x0800829d
 800822c:	0800829d 	.word	0x0800829d
 8008230:	0800829d 	.word	0x0800829d
 8008234:	080082b1 	.word	0x080082b1
 8008238:	0800829d 	.word	0x0800829d
 800823c:	0800829d 	.word	0x0800829d
 8008240:	0800829d 	.word	0x0800829d
 8008244:	0800829d 	.word	0x0800829d
 8008248:	0800829d 	.word	0x0800829d
 800824c:	0800829d 	.word	0x0800829d
 8008250:	0800829d 	.word	0x0800829d
 8008254:	080082b1 	.word	0x080082b1
 8008258:	0800829d 	.word	0x0800829d
 800825c:	0800829d 	.word	0x0800829d
 8008260:	0800829d 	.word	0x0800829d
 8008264:	0800829d 	.word	0x0800829d
 8008268:	0800829d 	.word	0x0800829d
 800826c:	0800829d 	.word	0x0800829d
 8008270:	0800829d 	.word	0x0800829d
 8008274:	080082b1 	.word	0x080082b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	2101      	movs	r1, #1
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fdfa 	bl	8008e78 <RCCEx_PLL2_Config>
 8008284:	4603      	mov	r3, r0
 8008286:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008288:	e013      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3324      	adds	r3, #36	; 0x24
 800828e:	2101      	movs	r1, #1
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fea3 	bl	8008fdc <RCCEx_PLL3_Config>
 8008296:	4603      	mov	r3, r0
 8008298:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800829a:	e00a      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	75fb      	strb	r3, [r7, #23]
      break;
 80082a0:	e007      	b.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80082a2:	bf00      	nop
 80082a4:	58024400 	.word	0x58024400
 80082a8:	58024800 	.word	0x58024800
 80082ac:	00ffffcf 	.word	0x00ffffcf
      break;
 80082b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d109      	bne.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082b8:	4b96      	ldr	r3, [pc, #600]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082c4:	4993      	ldr	r1, [pc, #588]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	654b      	str	r3, [r1, #84]	; 0x54
 80082ca:	e001      	b.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d038      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e0:	2b05      	cmp	r3, #5
 80082e2:	d821      	bhi.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80082e4:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	0800832f 	.word	0x0800832f
 80082f0:	08008305 	.word	0x08008305
 80082f4:	08008317 	.word	0x08008317
 80082f8:	0800832f 	.word	0x0800832f
 80082fc:	0800832f 	.word	0x0800832f
 8008300:	0800832f 	.word	0x0800832f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3304      	adds	r3, #4
 8008308:	2101      	movs	r1, #1
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fdb4 	bl	8008e78 <RCCEx_PLL2_Config>
 8008310:	4603      	mov	r3, r0
 8008312:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008314:	e00c      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3324      	adds	r3, #36	; 0x24
 800831a:	2101      	movs	r1, #1
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fe5d 	bl	8008fdc <RCCEx_PLL3_Config>
 8008322:	4603      	mov	r3, r0
 8008324:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008326:	e003      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	75fb      	strb	r3, [r7, #23]
      break;
 800832c:	e000      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800832e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008336:	4b77      	ldr	r3, [pc, #476]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833a:	f023 0207 	bic.w	r2, r3, #7
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008342:	4974      	ldr	r1, [pc, #464]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008344:	4313      	orrs	r3, r2
 8008346:	654b      	str	r3, [r1, #84]	; 0x54
 8008348:	e001      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0304 	and.w	r3, r3, #4
 8008356:	2b00      	cmp	r3, #0
 8008358:	d03a      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008360:	2b05      	cmp	r3, #5
 8008362:	d821      	bhi.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008364:	a201      	add	r2, pc, #4	; (adr r2, 800836c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	080083af 	.word	0x080083af
 8008370:	08008385 	.word	0x08008385
 8008374:	08008397 	.word	0x08008397
 8008378:	080083af 	.word	0x080083af
 800837c:	080083af 	.word	0x080083af
 8008380:	080083af 	.word	0x080083af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3304      	adds	r3, #4
 8008388:	2101      	movs	r1, #1
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fd74 	bl	8008e78 <RCCEx_PLL2_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008394:	e00c      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3324      	adds	r3, #36	; 0x24
 800839a:	2101      	movs	r1, #1
 800839c:	4618      	mov	r0, r3
 800839e:	f000 fe1d 	bl	8008fdc <RCCEx_PLL3_Config>
 80083a2:	4603      	mov	r3, r0
 80083a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80083a6:	e003      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	75fb      	strb	r3, [r7, #23]
      break;
 80083ac:	e000      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80083ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083b6:	4b57      	ldr	r3, [pc, #348]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80083b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ba:	f023 0207 	bic.w	r2, r3, #7
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c4:	4953      	ldr	r1, [pc, #332]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	658b      	str	r3, [r1, #88]	; 0x58
 80083ca:	e001      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d04b      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083e6:	d02e      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80083e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083ec:	d828      	bhi.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80083ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f2:	d02a      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80083f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083f8:	d822      	bhi.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80083fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083fe:	d026      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008400:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008404:	d81c      	bhi.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800840a:	d010      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800840c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008410:	d816      	bhi.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d01d      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800841a:	d111      	bne.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3304      	adds	r3, #4
 8008420:	2100      	movs	r1, #0
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fd28 	bl	8008e78 <RCCEx_PLL2_Config>
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800842c:	e012      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3324      	adds	r3, #36	; 0x24
 8008432:	2102      	movs	r1, #2
 8008434:	4618      	mov	r0, r3
 8008436:	f000 fdd1 	bl	8008fdc <RCCEx_PLL3_Config>
 800843a:	4603      	mov	r3, r0
 800843c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800843e:	e009      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	75fb      	strb	r3, [r7, #23]
      break;
 8008444:	e006      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008446:	bf00      	nop
 8008448:	e004      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800844a:	bf00      	nop
 800844c:	e002      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800844e:	bf00      	nop
 8008450:	e000      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800845a:	4b2e      	ldr	r3, [pc, #184]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800845c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008468:	492a      	ldr	r1, [pc, #168]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800846a:	4313      	orrs	r3, r2
 800846c:	654b      	str	r3, [r1, #84]	; 0x54
 800846e:	e001      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d04d      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008486:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800848a:	d02e      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800848c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008490:	d828      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008496:	d02a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849c:	d822      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800849e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084a2:	d026      	beq.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80084a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084a8:	d81c      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80084aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ae:	d010      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80084b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084b4:	d816      	bhi.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01d      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80084ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084be:	d111      	bne.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3304      	adds	r3, #4
 80084c4:	2100      	movs	r1, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fcd6 	bl	8008e78 <RCCEx_PLL2_Config>
 80084cc:	4603      	mov	r3, r0
 80084ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80084d0:	e012      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3324      	adds	r3, #36	; 0x24
 80084d6:	2102      	movs	r1, #2
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fd7f 	bl	8008fdc <RCCEx_PLL3_Config>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80084e2:	e009      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	75fb      	strb	r3, [r7, #23]
      break;
 80084e8:	e006      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80084ea:	bf00      	nop
 80084ec:	e004      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80084ee:	bf00      	nop
 80084f0:	e002      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80084f2:	bf00      	nop
 80084f4:	e000      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80084f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10c      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008502:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800850c:	4901      	ldr	r1, [pc, #4]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800850e:	4313      	orrs	r3, r2
 8008510:	658b      	str	r3, [r1, #88]	; 0x58
 8008512:	e003      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008514:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008518:	7dfb      	ldrb	r3, [r7, #23]
 800851a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008524:	2b00      	cmp	r3, #0
 8008526:	d04b      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800852e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008532:	d02e      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008534:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008538:	d828      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800853a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800853e:	d02a      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008544:	d822      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008546:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800854a:	d026      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800854c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008550:	d81c      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008556:	d010      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800855c:	d816      	bhi.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d01d      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008566:	d111      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3304      	adds	r3, #4
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fc82 	bl	8008e78 <RCCEx_PLL2_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008578:	e012      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3324      	adds	r3, #36	; 0x24
 800857e:	2102      	movs	r1, #2
 8008580:	4618      	mov	r0, r3
 8008582:	f000 fd2b 	bl	8008fdc <RCCEx_PLL3_Config>
 8008586:	4603      	mov	r3, r0
 8008588:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800858a:	e009      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	75fb      	strb	r3, [r7, #23]
      break;
 8008590:	e006      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008592:	bf00      	nop
 8008594:	e004      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008596:	bf00      	nop
 8008598:	e002      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800859a:	bf00      	nop
 800859c:	e000      	b.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800859e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10a      	bne.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085a6:	4b9d      	ldr	r3, [pc, #628]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085b4:	4999      	ldr	r1, [pc, #612]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	658b      	str	r3, [r1, #88]	; 0x58
 80085ba:	e001      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085bc:	7dfb      	ldrb	r3, [r7, #23]
 80085be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01a      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d6:	d10a      	bne.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3324      	adds	r3, #36	; 0x24
 80085dc:	2102      	movs	r1, #2
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fcfc 	bl	8008fdc <RCCEx_PLL3_Config>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80085ee:	4b8b      	ldr	r3, [pc, #556]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085fc:	4987      	ldr	r1, [pc, #540]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0310 	and.w	r3, r3, #16
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01a      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008618:	d10a      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3324      	adds	r3, #36	; 0x24
 800861e:	2102      	movs	r1, #2
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fcdb 	bl	8008fdc <RCCEx_PLL3_Config>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008630:	4b7a      	ldr	r3, [pc, #488]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800863e:	4977      	ldr	r1, [pc, #476]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008640:	4313      	orrs	r3, r2
 8008642:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d034      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800865a:	d01d      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800865c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008660:	d817      	bhi.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866a:	d009      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800866c:	e011      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3304      	adds	r3, #4
 8008672:	2100      	movs	r1, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fbff 	bl	8008e78 <RCCEx_PLL2_Config>
 800867a:	4603      	mov	r3, r0
 800867c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800867e:	e00c      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3324      	adds	r3, #36	; 0x24
 8008684:	2102      	movs	r1, #2
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fca8 	bl	8008fdc <RCCEx_PLL3_Config>
 800868c:	4603      	mov	r3, r0
 800868e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008690:	e003      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	75fb      	strb	r3, [r7, #23]
      break;
 8008696:	e000      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d10a      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086a0:	4b5e      	ldr	r3, [pc, #376]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086ae:	495b      	ldr	r1, [pc, #364]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	658b      	str	r3, [r1, #88]	; 0x58
 80086b4:	e001      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d033      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086d0:	d01c      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80086d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086d6:	d816      	bhi.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80086d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086dc:	d003      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80086de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086e2:	d007      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80086e4:	e00f      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e6:	4b4d      	ldr	r3, [pc, #308]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	4a4c      	ldr	r2, [pc, #304]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80086ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80086f2:	e00c      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3324      	adds	r3, #36	; 0x24
 80086f8:	2101      	movs	r1, #1
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fc6e 	bl	8008fdc <RCCEx_PLL3_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008704:	e003      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	75fb      	strb	r3, [r7, #23]
      break;
 800870a:	e000      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800870c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10a      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008714:	4b41      	ldr	r3, [pc, #260]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008722:	493e      	ldr	r1, [pc, #248]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008724:	4313      	orrs	r3, r2
 8008726:	654b      	str	r3, [r1, #84]	; 0x54
 8008728:	e001      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d029      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008746:	d007      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008748:	e00f      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800874a:	4b34      	ldr	r3, [pc, #208]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	4a33      	ldr	r2, [pc, #204]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008754:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008756:	e00b      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3304      	adds	r3, #4
 800875c:	2102      	movs	r1, #2
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fb8a 	bl	8008e78 <RCCEx_PLL2_Config>
 8008764:	4603      	mov	r3, r0
 8008766:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008768:	e002      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	75fb      	strb	r3, [r7, #23]
      break;
 800876e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008770:	7dfb      	ldrb	r3, [r7, #23]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d109      	bne.n	800878a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008776:	4b29      	ldr	r3, [pc, #164]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800877a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008782:	4926      	ldr	r1, [pc, #152]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008784:	4313      	orrs	r3, r2
 8008786:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008788:	e001      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3324      	adds	r3, #36	; 0x24
 800879e:	2102      	movs	r1, #2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fc1b 	bl	8008fdc <RCCEx_PLL3_Config>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d033      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087c4:	d017      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80087c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087ca:	d811      	bhi.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80087cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d0:	d013      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80087d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d6:	d80b      	bhi.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d010      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80087dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e0:	d106      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e2:	4b0e      	ldr	r3, [pc, #56]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	4a0d      	ldr	r2, [pc, #52]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80087e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80087ee:	e007      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	75fb      	strb	r3, [r7, #23]
      break;
 80087f4:	e004      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80087f6:	bf00      	nop
 80087f8:	e002      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80087fa:	bf00      	nop
 80087fc:	e000      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80087fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10c      	bne.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008806:	4b05      	ldr	r3, [pc, #20]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008812:	4902      	ldr	r1, [pc, #8]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008814:	4313      	orrs	r3, r2
 8008816:	654b      	str	r3, [r1, #84]	; 0x54
 8008818:	e004      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800881a:	bf00      	nop
 800881c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008830:	4b31      	ldr	r3, [pc, #196]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008834:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883c:	492e      	ldr	r1, [pc, #184]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800883e:	4313      	orrs	r3, r2
 8008840:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d009      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800884e:	4b2a      	ldr	r3, [pc, #168]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800885c:	4926      	ldr	r1, [pc, #152]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800885e:	4313      	orrs	r3, r2
 8008860:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d008      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800886e:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008872:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800887a:	491f      	ldr	r1, [pc, #124]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800887c:	4313      	orrs	r3, r2
 800887e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00d      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800888c:	4b1a      	ldr	r3, [pc, #104]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	4a19      	ldr	r2, [pc, #100]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008892:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008896:	6113      	str	r3, [r2, #16]
 8008898:	4b17      	ldr	r3, [pc, #92]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800889a:	691a      	ldr	r2, [r3, #16]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80088a2:	4915      	ldr	r1, [pc, #84]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	da08      	bge.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80088b0:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80088b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088bc:	490e      	ldr	r1, [pc, #56]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d009      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80088ce:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80088d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088dc:	4906      	ldr	r1, [pc, #24]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80088e2:	7dbb      	ldrb	r3, [r7, #22]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e000      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	58024400 	.word	0x58024400

080088fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008900:	f7ff f85a 	bl	80079b8 <HAL_RCC_GetHCLKFreq>
 8008904:	4602      	mov	r2, r0
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	091b      	lsrs	r3, r3, #4
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	4904      	ldr	r1, [pc, #16]	; (8008924 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008912:	5ccb      	ldrb	r3, [r1, r3]
 8008914:	f003 031f 	and.w	r3, r3, #31
 8008918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800891c:	4618      	mov	r0, r3
 800891e:	bd80      	pop	{r7, pc}
 8008920:	58024400 	.word	0x58024400
 8008924:	0800cd54 	.word	0x0800cd54

08008928 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008928:	b480      	push	{r7}
 800892a:	b089      	sub	sp, #36	; 0x24
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008930:	4ba1      	ldr	r3, [pc, #644]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800893a:	4b9f      	ldr	r3, [pc, #636]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	0b1b      	lsrs	r3, r3, #12
 8008940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008944:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008946:	4b9c      	ldr	r3, [pc, #624]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	091b      	lsrs	r3, r3, #4
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008952:	4b99      	ldr	r3, [pc, #612]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008956:	08db      	lsrs	r3, r3, #3
 8008958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	fb02 f303 	mul.w	r3, r2, r3
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 8111 	beq.w	8008b98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b02      	cmp	r3, #2
 800897a:	f000 8083 	beq.w	8008a84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	2b02      	cmp	r3, #2
 8008982:	f200 80a1 	bhi.w	8008ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d056      	beq.n	8008a40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008992:	e099      	b.n	8008ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008994:	4b88      	ldr	r3, [pc, #544]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	d02d      	beq.n	80089fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089a0:	4b85      	ldr	r3, [pc, #532]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	08db      	lsrs	r3, r3, #3
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	4a84      	ldr	r2, [pc, #528]	; (8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089ac:	fa22 f303 	lsr.w	r3, r2, r3
 80089b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ca:	4b7b      	ldr	r3, [pc, #492]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089da:	ed97 6a03 	vldr	s12, [r7, #12]
 80089de:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80089fa:	e087      	b.n	8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0e:	4b6a      	ldr	r3, [pc, #424]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a16:	ee07 3a90 	vmov	s15, r3
 8008a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a3e:	e065      	b.n	8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a52:	4b59      	ldr	r3, [pc, #356]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a82:	e043      	b.n	8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a96:	4b48      	ldr	r3, [pc, #288]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ac6:	e021      	b.n	8008b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ada:	4b37      	ldr	r3, [pc, #220]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008b0c:	4b2a      	ldr	r3, [pc, #168]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	0a5b      	lsrs	r3, r3, #9
 8008b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b32:	ee17 2a90 	vmov	r2, s15
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008b3a:	4b1f      	ldr	r3, [pc, #124]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3e:	0c1b      	lsrs	r3, r3, #16
 8008b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b44:	ee07 3a90 	vmov	s15, r3
 8008b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b60:	ee17 2a90 	vmov	r2, s15
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008b68:	4b13      	ldr	r3, [pc, #76]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	0e1b      	lsrs	r3, r3, #24
 8008b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b72:	ee07 3a90 	vmov	s15, r3
 8008b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b8e:	ee17 2a90 	vmov	r2, s15
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b96:	e008      	b.n	8008baa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	609a      	str	r2, [r3, #8]
}
 8008baa:	bf00      	nop
 8008bac:	3724      	adds	r7, #36	; 0x24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	58024400 	.word	0x58024400
 8008bbc:	03d09000 	.word	0x03d09000
 8008bc0:	46000000 	.word	0x46000000
 8008bc4:	4c742400 	.word	0x4c742400
 8008bc8:	4a742400 	.word	0x4a742400
 8008bcc:	4af42400 	.word	0x4af42400

08008bd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b089      	sub	sp, #36	; 0x24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bd8:	4ba1      	ldr	r3, [pc, #644]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008be2:	4b9f      	ldr	r3, [pc, #636]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be6:	0d1b      	lsrs	r3, r3, #20
 8008be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008bee:	4b9c      	ldr	r3, [pc, #624]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008bfa:	4b99      	ldr	r3, [pc, #612]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfe:	08db      	lsrs	r3, r3, #3
 8008c00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	fb02 f303 	mul.w	r3, r2, r3
 8008c0a:	ee07 3a90 	vmov	s15, r3
 8008c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 8111 	beq.w	8008e40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	f000 8083 	beq.w	8008d2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	f200 80a1 	bhi.w	8008d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d003      	beq.n	8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d056      	beq.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c3a:	e099      	b.n	8008d70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c3c:	4b88      	ldr	r3, [pc, #544]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0320 	and.w	r3, r3, #32
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d02d      	beq.n	8008ca4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c48:	4b85      	ldr	r3, [pc, #532]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	08db      	lsrs	r3, r3, #3
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	4a84      	ldr	r2, [pc, #528]	; (8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c54:	fa22 f303 	lsr.w	r3, r2, r3
 8008c58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	ee07 3a90 	vmov	s15, r3
 8008c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c72:	4b7b      	ldr	r3, [pc, #492]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7a:	ee07 3a90 	vmov	s15, r3
 8008c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008ca2:	e087      	b.n	8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb6:	4b6a      	ldr	r3, [pc, #424]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbe:	ee07 3a90 	vmov	s15, r3
 8008cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ce6:	e065      	b.n	8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cfa:	4b59      	ldr	r3, [pc, #356]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d2a:	e043      	b.n	8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3e:	4b48      	ldr	r3, [pc, #288]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d46:	ee07 3a90 	vmov	s15, r3
 8008d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d6e:	e021      	b.n	8008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d82:	4b37      	ldr	r3, [pc, #220]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8a:	ee07 3a90 	vmov	s15, r3
 8008d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008db2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008db4:	4b2a      	ldr	r3, [pc, #168]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db8:	0a5b      	lsrs	r3, r3, #9
 8008dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dda:	ee17 2a90 	vmov	r2, s15
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008de2:	4b1f      	ldr	r3, [pc, #124]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	0c1b      	lsrs	r3, r3, #16
 8008de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dec:	ee07 3a90 	vmov	s15, r3
 8008df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008df8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e08:	ee17 2a90 	vmov	r2, s15
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008e10:	4b13      	ldr	r3, [pc, #76]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e14:	0e1b      	lsrs	r3, r3, #24
 8008e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e1a:	ee07 3a90 	vmov	s15, r3
 8008e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e36:	ee17 2a90 	vmov	r2, s15
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e3e:	e008      	b.n	8008e52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	609a      	str	r2, [r3, #8]
}
 8008e52:	bf00      	nop
 8008e54:	3724      	adds	r7, #36	; 0x24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	58024400 	.word	0x58024400
 8008e64:	03d09000 	.word	0x03d09000
 8008e68:	46000000 	.word	0x46000000
 8008e6c:	4c742400 	.word	0x4c742400
 8008e70:	4a742400 	.word	0x4a742400
 8008e74:	4af42400 	.word	0x4af42400

08008e78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e86:	4b53      	ldr	r3, [pc, #332]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d101      	bne.n	8008e96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e099      	b.n	8008fca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e96:	4b4f      	ldr	r3, [pc, #316]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a4e      	ldr	r2, [pc, #312]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008e9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ea2:	f7f8 fff3 	bl	8001e8c <HAL_GetTick>
 8008ea6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ea8:	e008      	b.n	8008ebc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008eaa:	f7f8 ffef 	bl	8001e8c <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d901      	bls.n	8008ebc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e086      	b.n	8008fca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ebc:	4b45      	ldr	r3, [pc, #276]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1f0      	bne.n	8008eaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ec8:	4b42      	ldr	r3, [pc, #264]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	031b      	lsls	r3, r3, #12
 8008ed6:	493f      	ldr	r1, [pc, #252]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	628b      	str	r3, [r1, #40]	; 0x28
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	025b      	lsls	r3, r3, #9
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	041b      	lsls	r3, r3, #16
 8008efa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	061b      	lsls	r3, r3, #24
 8008f08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f0c:	4931      	ldr	r1, [pc, #196]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f12:	4b30      	ldr	r3, [pc, #192]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	492d      	ldr	r1, [pc, #180]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f24:	4b2b      	ldr	r3, [pc, #172]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	f023 0220 	bic.w	r2, r3, #32
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	4928      	ldr	r1, [pc, #160]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f36:	4b27      	ldr	r3, [pc, #156]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3a:	4a26      	ldr	r2, [pc, #152]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f3c:	f023 0310 	bic.w	r3, r3, #16
 8008f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f42:	4b24      	ldr	r3, [pc, #144]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f46:	4b24      	ldr	r3, [pc, #144]	; (8008fd8 <RCCEx_PLL2_Config+0x160>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	69d2      	ldr	r2, [r2, #28]
 8008f4e:	00d2      	lsls	r2, r2, #3
 8008f50:	4920      	ldr	r1, [pc, #128]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f56:	4b1f      	ldr	r3, [pc, #124]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	4a1e      	ldr	r2, [pc, #120]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f5c:	f043 0310 	orr.w	r3, r3, #16
 8008f60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f68:	4b1a      	ldr	r3, [pc, #104]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6c:	4a19      	ldr	r2, [pc, #100]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f74:	e00f      	b.n	8008f96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d106      	bne.n	8008f8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f7c:	4b15      	ldr	r3, [pc, #84]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f80:	4a14      	ldr	r2, [pc, #80]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f88:	e005      	b.n	8008f96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f8a:	4b12      	ldr	r3, [pc, #72]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8e:	4a11      	ldr	r2, [pc, #68]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f96:	4b0f      	ldr	r3, [pc, #60]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a0e      	ldr	r2, [pc, #56]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008f9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa2:	f7f8 ff73 	bl	8001e8c <HAL_GetTick>
 8008fa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fa8:	e008      	b.n	8008fbc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008faa:	f7f8 ff6f 	bl	8001e8c <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d901      	bls.n	8008fbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e006      	b.n	8008fca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <RCCEx_PLL2_Config+0x15c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0f0      	beq.n	8008faa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	58024400 	.word	0x58024400
 8008fd8:	ffff0007 	.word	0xffff0007

08008fdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fea:	4b53      	ldr	r3, [pc, #332]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d101      	bne.n	8008ffa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e099      	b.n	800912e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ffa:	4b4f      	ldr	r3, [pc, #316]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a4e      	ldr	r2, [pc, #312]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8009000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009006:	f7f8 ff41 	bl	8001e8c <HAL_GetTick>
 800900a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800900c:	e008      	b.n	8009020 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800900e:	f7f8 ff3d 	bl	8001e8c <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	2b02      	cmp	r3, #2
 800901a:	d901      	bls.n	8009020 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e086      	b.n	800912e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009020:	4b45      	ldr	r3, [pc, #276]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1f0      	bne.n	800900e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800902c:	4b42      	ldr	r3, [pc, #264]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 800902e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009030:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	051b      	lsls	r3, r3, #20
 800903a:	493f      	ldr	r1, [pc, #252]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 800903c:	4313      	orrs	r3, r2
 800903e:	628b      	str	r3, [r1, #40]	; 0x28
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	3b01      	subs	r3, #1
 8009046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	3b01      	subs	r3, #1
 8009050:	025b      	lsls	r3, r3, #9
 8009052:	b29b      	uxth	r3, r3
 8009054:	431a      	orrs	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	3b01      	subs	r3, #1
 800905c:	041b      	lsls	r3, r3, #16
 800905e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	3b01      	subs	r3, #1
 800906a:	061b      	lsls	r3, r3, #24
 800906c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009070:	4931      	ldr	r1, [pc, #196]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8009072:	4313      	orrs	r3, r2
 8009074:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009076:	4b30      	ldr	r3, [pc, #192]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	492d      	ldr	r1, [pc, #180]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8009084:	4313      	orrs	r3, r2
 8009086:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009088:	4b2b      	ldr	r3, [pc, #172]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	4928      	ldr	r1, [pc, #160]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8009096:	4313      	orrs	r3, r2
 8009098:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800909a:	4b27      	ldr	r3, [pc, #156]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	4a26      	ldr	r2, [pc, #152]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090a6:	4b24      	ldr	r3, [pc, #144]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090aa:	4b24      	ldr	r3, [pc, #144]	; (800913c <RCCEx_PLL3_Config+0x160>)
 80090ac:	4013      	ands	r3, r2
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	69d2      	ldr	r2, [r2, #28]
 80090b2:	00d2      	lsls	r2, r2, #3
 80090b4:	4920      	ldr	r1, [pc, #128]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090ba:	4b1f      	ldr	r3, [pc, #124]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090be:	4a1e      	ldr	r2, [pc, #120]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d106      	bne.n	80090da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090cc:	4b1a      	ldr	r3, [pc, #104]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	4a19      	ldr	r2, [pc, #100]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090d8:	e00f      	b.n	80090fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d106      	bne.n	80090ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090e0:	4b15      	ldr	r3, [pc, #84]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	4a14      	ldr	r2, [pc, #80]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090ec:	e005      	b.n	80090fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f2:	4a11      	ldr	r2, [pc, #68]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a0e      	ldr	r2, [pc, #56]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8009100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009106:	f7f8 fec1 	bl	8001e8c <HAL_GetTick>
 800910a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800910c:	e008      	b.n	8009120 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800910e:	f7f8 febd 	bl	8001e8c <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	2b02      	cmp	r3, #2
 800911a:	d901      	bls.n	8009120 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e006      	b.n	800912e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <RCCEx_PLL3_Config+0x15c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0f0      	beq.n	800910e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	58024400 	.word	0x58024400
 800913c:	ffff0007 	.word	0xffff0007

08009140 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b01      	cmp	r3, #1
 8009152:	d001      	beq.n	8009158 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e04c      	b.n	80091f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a26      	ldr	r2, [pc, #152]	; (8009200 <HAL_TIM_Base_Start+0xc0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d022      	beq.n	80091b0 <HAL_TIM_Base_Start+0x70>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009172:	d01d      	beq.n	80091b0 <HAL_TIM_Base_Start+0x70>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a22      	ldr	r2, [pc, #136]	; (8009204 <HAL_TIM_Base_Start+0xc4>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d018      	beq.n	80091b0 <HAL_TIM_Base_Start+0x70>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a21      	ldr	r2, [pc, #132]	; (8009208 <HAL_TIM_Base_Start+0xc8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d013      	beq.n	80091b0 <HAL_TIM_Base_Start+0x70>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a1f      	ldr	r2, [pc, #124]	; (800920c <HAL_TIM_Base_Start+0xcc>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d00e      	beq.n	80091b0 <HAL_TIM_Base_Start+0x70>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a1e      	ldr	r2, [pc, #120]	; (8009210 <HAL_TIM_Base_Start+0xd0>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d009      	beq.n	80091b0 <HAL_TIM_Base_Start+0x70>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a1c      	ldr	r2, [pc, #112]	; (8009214 <HAL_TIM_Base_Start+0xd4>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d004      	beq.n	80091b0 <HAL_TIM_Base_Start+0x70>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a1b      	ldr	r2, [pc, #108]	; (8009218 <HAL_TIM_Base_Start+0xd8>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d115      	bne.n	80091dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	4b19      	ldr	r3, [pc, #100]	; (800921c <HAL_TIM_Base_Start+0xdc>)
 80091b8:	4013      	ands	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d015      	beq.n	80091ee <HAL_TIM_Base_Start+0xae>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c8:	d011      	beq.n	80091ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f042 0201 	orr.w	r2, r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091da:	e008      	b.n	80091ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	e000      	b.n	80091f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	40010000 	.word	0x40010000
 8009204:	40000400 	.word	0x40000400
 8009208:	40000800 	.word	0x40000800
 800920c:	40000c00 	.word	0x40000c00
 8009210:	40010400 	.word	0x40010400
 8009214:	40001800 	.word	0x40001800
 8009218:	40014000 	.word	0x40014000
 800921c:	00010007 	.word	0x00010007

08009220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e049      	b.n	80092c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7f8 fa5c 	bl	8001704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3304      	adds	r3, #4
 800925c:	4619      	mov	r1, r3
 800925e:	4610      	mov	r0, r2
 8009260:	f000 f94a 	bl	80094f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e0ff      	b.n	80094ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b14      	cmp	r3, #20
 80092fa:	f200 80f0 	bhi.w	80094de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80092fe:	a201      	add	r2, pc, #4	; (adr r2, 8009304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009304:	08009359 	.word	0x08009359
 8009308:	080094df 	.word	0x080094df
 800930c:	080094df 	.word	0x080094df
 8009310:	080094df 	.word	0x080094df
 8009314:	08009399 	.word	0x08009399
 8009318:	080094df 	.word	0x080094df
 800931c:	080094df 	.word	0x080094df
 8009320:	080094df 	.word	0x080094df
 8009324:	080093db 	.word	0x080093db
 8009328:	080094df 	.word	0x080094df
 800932c:	080094df 	.word	0x080094df
 8009330:	080094df 	.word	0x080094df
 8009334:	0800941b 	.word	0x0800941b
 8009338:	080094df 	.word	0x080094df
 800933c:	080094df 	.word	0x080094df
 8009340:	080094df 	.word	0x080094df
 8009344:	0800945d 	.word	0x0800945d
 8009348:	080094df 	.word	0x080094df
 800934c:	080094df 	.word	0x080094df
 8009350:	080094df 	.word	0x080094df
 8009354:	0800949d 	.word	0x0800949d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68b9      	ldr	r1, [r7, #8]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f964 	bl	800962c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699a      	ldr	r2, [r3, #24]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0208 	orr.w	r2, r2, #8
 8009372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699a      	ldr	r2, [r3, #24]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f022 0204 	bic.w	r2, r2, #4
 8009382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	6999      	ldr	r1, [r3, #24]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	691a      	ldr	r2, [r3, #16]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	619a      	str	r2, [r3, #24]
      break;
 8009396:	e0a5      	b.n	80094e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 f9d4 	bl	800974c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699a      	ldr	r2, [r3, #24]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699a      	ldr	r2, [r3, #24]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6999      	ldr	r1, [r3, #24]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	021a      	lsls	r2, r3, #8
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	619a      	str	r2, [r3, #24]
      break;
 80093d8:	e084      	b.n	80094e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fa3d 	bl	8009860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69da      	ldr	r2, [r3, #28]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f042 0208 	orr.w	r2, r2, #8
 80093f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69da      	ldr	r2, [r3, #28]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 0204 	bic.w	r2, r2, #4
 8009404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69d9      	ldr	r1, [r3, #28]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	691a      	ldr	r2, [r3, #16]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	61da      	str	r2, [r3, #28]
      break;
 8009418:	e064      	b.n	80094e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 faa5 	bl	8009970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69da      	ldr	r2, [r3, #28]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69d9      	ldr	r1, [r3, #28]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	021a      	lsls	r2, r3, #8
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	61da      	str	r2, [r3, #28]
      break;
 800945a:	e043      	b.n	80094e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68b9      	ldr	r1, [r7, #8]
 8009462:	4618      	mov	r0, r3
 8009464:	f000 faee 	bl	8009a44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0208 	orr.w	r2, r2, #8
 8009476:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 0204 	bic.w	r2, r2, #4
 8009486:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	691a      	ldr	r2, [r3, #16]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800949a:	e023      	b.n	80094e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68b9      	ldr	r1, [r7, #8]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 fb32 	bl	8009b0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	021a      	lsls	r2, r3, #8
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	430a      	orrs	r2, r1
 80094da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80094dc:	e002      	b.n	80094e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
      break;
 80094e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop

080094f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a40      	ldr	r2, [pc, #256]	; (800960c <TIM_Base_SetConfig+0x114>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d013      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009516:	d00f      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a3d      	ldr	r2, [pc, #244]	; (8009610 <TIM_Base_SetConfig+0x118>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d00b      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a3c      	ldr	r2, [pc, #240]	; (8009614 <TIM_Base_SetConfig+0x11c>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d007      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a3b      	ldr	r2, [pc, #236]	; (8009618 <TIM_Base_SetConfig+0x120>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d003      	beq.n	8009538 <TIM_Base_SetConfig+0x40>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a3a      	ldr	r2, [pc, #232]	; (800961c <TIM_Base_SetConfig+0x124>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d108      	bne.n	800954a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a2f      	ldr	r2, [pc, #188]	; (800960c <TIM_Base_SetConfig+0x114>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d01f      	beq.n	8009592 <TIM_Base_SetConfig+0x9a>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009558:	d01b      	beq.n	8009592 <TIM_Base_SetConfig+0x9a>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a2c      	ldr	r2, [pc, #176]	; (8009610 <TIM_Base_SetConfig+0x118>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d017      	beq.n	8009592 <TIM_Base_SetConfig+0x9a>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a2b      	ldr	r2, [pc, #172]	; (8009614 <TIM_Base_SetConfig+0x11c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d013      	beq.n	8009592 <TIM_Base_SetConfig+0x9a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a2a      	ldr	r2, [pc, #168]	; (8009618 <TIM_Base_SetConfig+0x120>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d00f      	beq.n	8009592 <TIM_Base_SetConfig+0x9a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a29      	ldr	r2, [pc, #164]	; (800961c <TIM_Base_SetConfig+0x124>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00b      	beq.n	8009592 <TIM_Base_SetConfig+0x9a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a28      	ldr	r2, [pc, #160]	; (8009620 <TIM_Base_SetConfig+0x128>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d007      	beq.n	8009592 <TIM_Base_SetConfig+0x9a>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a27      	ldr	r2, [pc, #156]	; (8009624 <TIM_Base_SetConfig+0x12c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d003      	beq.n	8009592 <TIM_Base_SetConfig+0x9a>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a26      	ldr	r2, [pc, #152]	; (8009628 <TIM_Base_SetConfig+0x130>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d108      	bne.n	80095a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a10      	ldr	r2, [pc, #64]	; (800960c <TIM_Base_SetConfig+0x114>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00f      	beq.n	80095f0 <TIM_Base_SetConfig+0xf8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a12      	ldr	r2, [pc, #72]	; (800961c <TIM_Base_SetConfig+0x124>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00b      	beq.n	80095f0 <TIM_Base_SetConfig+0xf8>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a11      	ldr	r2, [pc, #68]	; (8009620 <TIM_Base_SetConfig+0x128>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d007      	beq.n	80095f0 <TIM_Base_SetConfig+0xf8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a10      	ldr	r2, [pc, #64]	; (8009624 <TIM_Base_SetConfig+0x12c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d003      	beq.n	80095f0 <TIM_Base_SetConfig+0xf8>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a0f      	ldr	r2, [pc, #60]	; (8009628 <TIM_Base_SetConfig+0x130>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d103      	bne.n	80095f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	615a      	str	r2, [r3, #20]
}
 80095fe:	bf00      	nop
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	40010000 	.word	0x40010000
 8009610:	40000400 	.word	0x40000400
 8009614:	40000800 	.word	0x40000800
 8009618:	40000c00 	.word	0x40000c00
 800961c:	40010400 	.word	0x40010400
 8009620:	40014000 	.word	0x40014000
 8009624:	40014400 	.word	0x40014400
 8009628:	40014800 	.word	0x40014800

0800962c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	f023 0201 	bic.w	r2, r3, #1
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4b37      	ldr	r3, [pc, #220]	; (8009734 <TIM_OC1_SetConfig+0x108>)
 8009658:	4013      	ands	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0303 	bic.w	r3, r3, #3
 8009662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f023 0302 	bic.w	r3, r3, #2
 8009674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	4313      	orrs	r3, r2
 800967e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a2d      	ldr	r2, [pc, #180]	; (8009738 <TIM_OC1_SetConfig+0x10c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00f      	beq.n	80096a8 <TIM_OC1_SetConfig+0x7c>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a2c      	ldr	r2, [pc, #176]	; (800973c <TIM_OC1_SetConfig+0x110>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00b      	beq.n	80096a8 <TIM_OC1_SetConfig+0x7c>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a2b      	ldr	r2, [pc, #172]	; (8009740 <TIM_OC1_SetConfig+0x114>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d007      	beq.n	80096a8 <TIM_OC1_SetConfig+0x7c>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a2a      	ldr	r2, [pc, #168]	; (8009744 <TIM_OC1_SetConfig+0x118>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_OC1_SetConfig+0x7c>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a29      	ldr	r2, [pc, #164]	; (8009748 <TIM_OC1_SetConfig+0x11c>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d10c      	bne.n	80096c2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f023 0308 	bic.w	r3, r3, #8
 80096ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f023 0304 	bic.w	r3, r3, #4
 80096c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a1c      	ldr	r2, [pc, #112]	; (8009738 <TIM_OC1_SetConfig+0x10c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d00f      	beq.n	80096ea <TIM_OC1_SetConfig+0xbe>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a1b      	ldr	r2, [pc, #108]	; (800973c <TIM_OC1_SetConfig+0x110>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d00b      	beq.n	80096ea <TIM_OC1_SetConfig+0xbe>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a1a      	ldr	r2, [pc, #104]	; (8009740 <TIM_OC1_SetConfig+0x114>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d007      	beq.n	80096ea <TIM_OC1_SetConfig+0xbe>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a19      	ldr	r2, [pc, #100]	; (8009744 <TIM_OC1_SetConfig+0x118>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d003      	beq.n	80096ea <TIM_OC1_SetConfig+0xbe>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a18      	ldr	r2, [pc, #96]	; (8009748 <TIM_OC1_SetConfig+0x11c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d111      	bne.n	800970e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	4313      	orrs	r3, r2
 8009702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	4313      	orrs	r3, r2
 800970c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	621a      	str	r2, [r3, #32]
}
 8009728:	bf00      	nop
 800972a:	371c      	adds	r7, #28
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	fffeff8f 	.word	0xfffeff8f
 8009738:	40010000 	.word	0x40010000
 800973c:	40010400 	.word	0x40010400
 8009740:	40014000 	.word	0x40014000
 8009744:	40014400 	.word	0x40014400
 8009748:	40014800 	.word	0x40014800

0800974c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800974c:	b480      	push	{r7}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	f023 0210 	bic.w	r2, r3, #16
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	4b34      	ldr	r3, [pc, #208]	; (8009848 <TIM_OC2_SetConfig+0xfc>)
 8009778:	4013      	ands	r3, r2
 800977a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f023 0320 	bic.w	r3, r3, #32
 8009796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	011b      	lsls	r3, r3, #4
 800979e:	697a      	ldr	r2, [r7, #20]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a29      	ldr	r2, [pc, #164]	; (800984c <TIM_OC2_SetConfig+0x100>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d003      	beq.n	80097b4 <TIM_OC2_SetConfig+0x68>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a28      	ldr	r2, [pc, #160]	; (8009850 <TIM_OC2_SetConfig+0x104>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d10d      	bne.n	80097d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	011b      	lsls	r3, r3, #4
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a1e      	ldr	r2, [pc, #120]	; (800984c <TIM_OC2_SetConfig+0x100>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d00f      	beq.n	80097f8 <TIM_OC2_SetConfig+0xac>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a1d      	ldr	r2, [pc, #116]	; (8009850 <TIM_OC2_SetConfig+0x104>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00b      	beq.n	80097f8 <TIM_OC2_SetConfig+0xac>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a1c      	ldr	r2, [pc, #112]	; (8009854 <TIM_OC2_SetConfig+0x108>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d007      	beq.n	80097f8 <TIM_OC2_SetConfig+0xac>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a1b      	ldr	r2, [pc, #108]	; (8009858 <TIM_OC2_SetConfig+0x10c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d003      	beq.n	80097f8 <TIM_OC2_SetConfig+0xac>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a1a      	ldr	r2, [pc, #104]	; (800985c <TIM_OC2_SetConfig+0x110>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d113      	bne.n	8009820 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	4313      	orrs	r3, r2
 8009812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	4313      	orrs	r3, r2
 800981e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	621a      	str	r2, [r3, #32]
}
 800983a:	bf00      	nop
 800983c:	371c      	adds	r7, #28
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	feff8fff 	.word	0xfeff8fff
 800984c:	40010000 	.word	0x40010000
 8009850:	40010400 	.word	0x40010400
 8009854:	40014000 	.word	0x40014000
 8009858:	40014400 	.word	0x40014400
 800985c:	40014800 	.word	0x40014800

08009860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4b33      	ldr	r3, [pc, #204]	; (8009958 <TIM_OC3_SetConfig+0xf8>)
 800988c:	4013      	ands	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0303 	bic.w	r3, r3, #3
 8009896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	021b      	lsls	r3, r3, #8
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a28      	ldr	r2, [pc, #160]	; (800995c <TIM_OC3_SetConfig+0xfc>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d003      	beq.n	80098c6 <TIM_OC3_SetConfig+0x66>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a27      	ldr	r2, [pc, #156]	; (8009960 <TIM_OC3_SetConfig+0x100>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d10d      	bne.n	80098e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	021b      	lsls	r3, r3, #8
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a1d      	ldr	r2, [pc, #116]	; (800995c <TIM_OC3_SetConfig+0xfc>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00f      	beq.n	800990a <TIM_OC3_SetConfig+0xaa>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a1c      	ldr	r2, [pc, #112]	; (8009960 <TIM_OC3_SetConfig+0x100>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d00b      	beq.n	800990a <TIM_OC3_SetConfig+0xaa>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a1b      	ldr	r2, [pc, #108]	; (8009964 <TIM_OC3_SetConfig+0x104>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d007      	beq.n	800990a <TIM_OC3_SetConfig+0xaa>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a1a      	ldr	r2, [pc, #104]	; (8009968 <TIM_OC3_SetConfig+0x108>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d003      	beq.n	800990a <TIM_OC3_SetConfig+0xaa>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a19      	ldr	r2, [pc, #100]	; (800996c <TIM_OC3_SetConfig+0x10c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d113      	bne.n	8009932 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	4313      	orrs	r3, r2
 8009924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	011b      	lsls	r3, r3, #4
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4313      	orrs	r3, r2
 8009930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	697a      	ldr	r2, [r7, #20]
 800994a:	621a      	str	r2, [r3, #32]
}
 800994c:	bf00      	nop
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	fffeff8f 	.word	0xfffeff8f
 800995c:	40010000 	.word	0x40010000
 8009960:	40010400 	.word	0x40010400
 8009964:	40014000 	.word	0x40014000
 8009968:	40014400 	.word	0x40014400
 800996c:	40014800 	.word	0x40014800

08009970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4b24      	ldr	r3, [pc, #144]	; (8009a2c <TIM_OC4_SetConfig+0xbc>)
 800999c:	4013      	ands	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	021b      	lsls	r3, r3, #8
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	031b      	lsls	r3, r3, #12
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a19      	ldr	r2, [pc, #100]	; (8009a30 <TIM_OC4_SetConfig+0xc0>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00f      	beq.n	80099f0 <TIM_OC4_SetConfig+0x80>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a18      	ldr	r2, [pc, #96]	; (8009a34 <TIM_OC4_SetConfig+0xc4>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d00b      	beq.n	80099f0 <TIM_OC4_SetConfig+0x80>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a17      	ldr	r2, [pc, #92]	; (8009a38 <TIM_OC4_SetConfig+0xc8>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d007      	beq.n	80099f0 <TIM_OC4_SetConfig+0x80>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a16      	ldr	r2, [pc, #88]	; (8009a3c <TIM_OC4_SetConfig+0xcc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d003      	beq.n	80099f0 <TIM_OC4_SetConfig+0x80>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a15      	ldr	r2, [pc, #84]	; (8009a40 <TIM_OC4_SetConfig+0xd0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d109      	bne.n	8009a04 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	019b      	lsls	r3, r3, #6
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	685a      	ldr	r2, [r3, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	621a      	str	r2, [r3, #32]
}
 8009a1e:	bf00      	nop
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
 8009a2a:	bf00      	nop
 8009a2c:	feff8fff 	.word	0xfeff8fff
 8009a30:	40010000 	.word	0x40010000
 8009a34:	40010400 	.word	0x40010400
 8009a38:	40014000 	.word	0x40014000
 8009a3c:	40014400 	.word	0x40014400
 8009a40:	40014800 	.word	0x40014800

08009a44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4b21      	ldr	r3, [pc, #132]	; (8009af4 <TIM_OC5_SetConfig+0xb0>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	041b      	lsls	r3, r3, #16
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a18      	ldr	r2, [pc, #96]	; (8009af8 <TIM_OC5_SetConfig+0xb4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00f      	beq.n	8009aba <TIM_OC5_SetConfig+0x76>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a17      	ldr	r2, [pc, #92]	; (8009afc <TIM_OC5_SetConfig+0xb8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00b      	beq.n	8009aba <TIM_OC5_SetConfig+0x76>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a16      	ldr	r2, [pc, #88]	; (8009b00 <TIM_OC5_SetConfig+0xbc>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d007      	beq.n	8009aba <TIM_OC5_SetConfig+0x76>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a15      	ldr	r2, [pc, #84]	; (8009b04 <TIM_OC5_SetConfig+0xc0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d003      	beq.n	8009aba <TIM_OC5_SetConfig+0x76>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a14      	ldr	r2, [pc, #80]	; (8009b08 <TIM_OC5_SetConfig+0xc4>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d109      	bne.n	8009ace <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	021b      	lsls	r3, r3, #8
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	621a      	str	r2, [r3, #32]
}
 8009ae8:	bf00      	nop
 8009aea:	371c      	adds	r7, #28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	fffeff8f 	.word	0xfffeff8f
 8009af8:	40010000 	.word	0x40010000
 8009afc:	40010400 	.word	0x40010400
 8009b00:	40014000 	.word	0x40014000
 8009b04:	40014400 	.word	0x40014400
 8009b08:	40014800 	.word	0x40014800

08009b0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b087      	sub	sp, #28
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4b22      	ldr	r3, [pc, #136]	; (8009bc0 <TIM_OC6_SetConfig+0xb4>)
 8009b38:	4013      	ands	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	021b      	lsls	r3, r3, #8
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	051b      	lsls	r3, r3, #20
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a19      	ldr	r2, [pc, #100]	; (8009bc4 <TIM_OC6_SetConfig+0xb8>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d00f      	beq.n	8009b84 <TIM_OC6_SetConfig+0x78>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a18      	ldr	r2, [pc, #96]	; (8009bc8 <TIM_OC6_SetConfig+0xbc>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d00b      	beq.n	8009b84 <TIM_OC6_SetConfig+0x78>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a17      	ldr	r2, [pc, #92]	; (8009bcc <TIM_OC6_SetConfig+0xc0>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d007      	beq.n	8009b84 <TIM_OC6_SetConfig+0x78>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a16      	ldr	r2, [pc, #88]	; (8009bd0 <TIM_OC6_SetConfig+0xc4>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d003      	beq.n	8009b84 <TIM_OC6_SetConfig+0x78>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a15      	ldr	r2, [pc, #84]	; (8009bd4 <TIM_OC6_SetConfig+0xc8>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d109      	bne.n	8009b98 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	029b      	lsls	r3, r3, #10
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685a      	ldr	r2, [r3, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	621a      	str	r2, [r3, #32]
}
 8009bb2:	bf00      	nop
 8009bb4:	371c      	adds	r7, #28
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	feff8fff 	.word	0xfeff8fff
 8009bc4:	40010000 	.word	0x40010000
 8009bc8:	40010400 	.word	0x40010400
 8009bcc:	40014000 	.word	0x40014000
 8009bd0:	40014400 	.word	0x40014400
 8009bd4:	40014800 	.word	0x40014800

08009bd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d101      	bne.n	8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bec:	2302      	movs	r3, #2
 8009bee:	e06d      	b.n	8009ccc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a30      	ldr	r2, [pc, #192]	; (8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d004      	beq.n	8009c24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a2f      	ldr	r2, [pc, #188]	; (8009cdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d108      	bne.n	8009c36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	68fa      	ldr	r2, [r7, #12]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a20      	ldr	r2, [pc, #128]	; (8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d022      	beq.n	8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c62:	d01d      	beq.n	8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a1d      	ldr	r2, [pc, #116]	; (8009ce0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d018      	beq.n	8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a1c      	ldr	r2, [pc, #112]	; (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d013      	beq.n	8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1a      	ldr	r2, [pc, #104]	; (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00e      	beq.n	8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a15      	ldr	r2, [pc, #84]	; (8009cdc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d009      	beq.n	8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a16      	ldr	r2, [pc, #88]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d004      	beq.n	8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a15      	ldr	r2, [pc, #84]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d10c      	bne.n	8009cba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	40010000 	.word	0x40010000
 8009cdc:	40010400 	.word	0x40010400
 8009ce0:	40000400 	.word	0x40000400
 8009ce4:	40000800 	.word	0x40000800
 8009ce8:	40000c00 	.word	0x40000c00
 8009cec:	40001800 	.word	0x40001800
 8009cf0:	40014000 	.word	0x40014000

08009cf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d101      	bne.n	8009d10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e065      	b.n	8009ddc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d76:	4313      	orrs	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	041b      	lsls	r3, r3, #16
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a16      	ldr	r2, [pc, #88]	; (8009de8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d004      	beq.n	8009d9e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a14      	ldr	r2, [pc, #80]	; (8009dec <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d115      	bne.n	8009dca <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	051b      	lsls	r3, r3, #20
 8009daa:	4313      	orrs	r3, r2
 8009dac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	40010000 	.word	0x40010000
 8009dec:	40010400 	.word	0x40010400

08009df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e042      	b.n	8009e88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d106      	bne.n	8009e1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7f7 fcd3 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2224      	movs	r2, #36	; 0x24
 8009e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f022 0201 	bic.w	r2, r2, #1
 8009e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fc88 	bl	800a748 <UART_SetConfig>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e022      	b.n	8009e88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f001 f9e4 	bl	800b218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689a      	ldr	r2, [r3, #8]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0201 	orr.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f001 fa6b 	bl	800b35c <UART_CheckIdleState>
 8009e86:	4603      	mov	r3, r0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3708      	adds	r7, #8
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	; 0x28
 8009e94:	af02      	add	r7, sp, #8
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	603b      	str	r3, [r7, #0]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ea6:	2b20      	cmp	r3, #32
 8009ea8:	f040 8083 	bne.w	8009fb2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <HAL_UART_Transmit+0x28>
 8009eb2:	88fb      	ldrh	r3, [r7, #6]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e07b      	b.n	8009fb4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d101      	bne.n	8009eca <HAL_UART_Transmit+0x3a>
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	e074      	b.n	8009fb4 <HAL_UART_Transmit+0x124>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2221      	movs	r2, #33	; 0x21
 8009ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ee2:	f7f7 ffd3 	bl	8001e8c <HAL_GetTick>
 8009ee6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	88fa      	ldrh	r2, [r7, #6]
 8009eec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	88fa      	ldrh	r2, [r7, #6]
 8009ef4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f00:	d108      	bne.n	8009f14 <HAL_UART_Transmit+0x84>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	61bb      	str	r3, [r7, #24]
 8009f12:	e003      	b.n	8009f1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009f24:	e02c      	b.n	8009f80 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2180      	movs	r1, #128	; 0x80
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f001 fa5e 	bl	800b3f2 <UART_WaitOnFlagUntilTimeout>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e039      	b.n	8009fb4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10b      	bne.n	8009f5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	3302      	adds	r3, #2
 8009f5a:	61bb      	str	r3, [r7, #24]
 8009f5c:	e007      	b.n	8009f6e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	781a      	ldrb	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	3b01      	subs	r3, #1
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1cc      	bne.n	8009f26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2200      	movs	r2, #0
 8009f94:	2140      	movs	r1, #64	; 0x40
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f001 fa2b 	bl	800b3f2 <UART_WaitOnFlagUntilTimeout>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d001      	beq.n	8009fa6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e006      	b.n	8009fb4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2220      	movs	r2, #32
 8009faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e000      	b.n	8009fb4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009fb2:	2302      	movs	r3, #2
  }
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3720      	adds	r7, #32
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b0ba      	sub	sp, #232	; 0xe8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fe2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009fe6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009fea:	4013      	ands	r3, r2
 8009fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d11b      	bne.n	800a030 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ffc:	f003 0320 	and.w	r3, r3, #32
 800a000:	2b00      	cmp	r3, #0
 800a002:	d015      	beq.n	800a030 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a008:	f003 0320 	and.w	r3, r3, #32
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d105      	bne.n	800a01c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 835a 	beq.w	800a6da <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	4798      	blx	r3
      }
      return;
 800a02e:	e354      	b.n	800a6da <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a030:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 811f 	beq.w	800a278 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a03a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a03e:	4b8b      	ldr	r3, [pc, #556]	; (800a26c <HAL_UART_IRQHandler+0x2b0>)
 800a040:	4013      	ands	r3, r2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d106      	bne.n	800a054 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a046:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a04a:	4b89      	ldr	r3, [pc, #548]	; (800a270 <HAL_UART_IRQHandler+0x2b4>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f000 8112 	beq.w	800a278 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d011      	beq.n	800a084 <HAL_UART_IRQHandler+0xc8>
 800a060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00b      	beq.n	800a084 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2201      	movs	r2, #1
 800a072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a07a:	f043 0201 	orr.w	r2, r3, #1
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a088:	f003 0302 	and.w	r3, r3, #2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d011      	beq.n	800a0b4 <HAL_UART_IRQHandler+0xf8>
 800a090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2202      	movs	r2, #2
 800a0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0aa:	f043 0204 	orr.w	r2, r3, #4
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d011      	beq.n	800a0e4 <HAL_UART_IRQHandler+0x128>
 800a0c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00b      	beq.n	800a0e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2204      	movs	r2, #4
 800a0d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0da:	f043 0202 	orr.w	r2, r3, #2
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0e8:	f003 0308 	and.w	r3, r3, #8
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d017      	beq.n	800a120 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0f4:	f003 0320 	and.w	r3, r3, #32
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d105      	bne.n	800a108 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a0fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a100:	4b5a      	ldr	r3, [pc, #360]	; (800a26c <HAL_UART_IRQHandler+0x2b0>)
 800a102:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2208      	movs	r2, #8
 800a10e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a116:	f043 0208 	orr.w	r2, r3, #8
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d012      	beq.n	800a152 <HAL_UART_IRQHandler+0x196>
 800a12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00c      	beq.n	800a152 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a140:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a148:	f043 0220 	orr.w	r2, r3, #32
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f000 82c0 	beq.w	800a6de <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d013      	beq.n	800a192 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a16e:	f003 0320 	and.w	r3, r3, #32
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a17a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d007      	beq.n	800a192 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a198:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a6:	2b40      	cmp	r3, #64	; 0x40
 800a1a8:	d005      	beq.n	800a1b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d04f      	beq.n	800a256 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f001 face 	bl	800b758 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c6:	2b40      	cmp	r3, #64	; 0x40
 800a1c8:	d141      	bne.n	800a24e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3308      	adds	r3, #8
 800a1d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a1e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a1f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a1fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a206:	e841 2300 	strex	r3, r2, [r1]
 800a20a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a20e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1d9      	bne.n	800a1ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d013      	beq.n	800a246 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a222:	4a14      	ldr	r2, [pc, #80]	; (800a274 <HAL_UART_IRQHandler+0x2b8>)
 800a224:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7f9 fa00 	bl	8003630 <HAL_DMA_Abort_IT>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d017      	beq.n	800a266 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a240:	4610      	mov	r0, r2
 800a242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a244:	e00f      	b.n	800a266 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa74 	bl	800a734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a24c:	e00b      	b.n	800a266 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa70 	bl	800a734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a254:	e007      	b.n	800a266 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa6c 	bl	800a734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a264:	e23b      	b.n	800a6de <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a266:	bf00      	nop
    return;
 800a268:	e239      	b.n	800a6de <HAL_UART_IRQHandler+0x722>
 800a26a:	bf00      	nop
 800a26c:	10000001 	.word	0x10000001
 800a270:	04000120 	.word	0x04000120
 800a274:	0800b9ff 	.word	0x0800b9ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	f040 81ce 	bne.w	800a61e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a286:	f003 0310 	and.w	r3, r3, #16
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 81c7 	beq.w	800a61e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a294:	f003 0310 	and.w	r3, r3, #16
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 81c0 	beq.w	800a61e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2210      	movs	r2, #16
 800a2a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b0:	2b40      	cmp	r3, #64	; 0x40
 800a2b2:	f040 813b 	bne.w	800a52c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a8b      	ldr	r2, [pc, #556]	; (800a4ec <HAL_UART_IRQHandler+0x530>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d059      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a89      	ldr	r2, [pc, #548]	; (800a4f0 <HAL_UART_IRQHandler+0x534>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d053      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a87      	ldr	r2, [pc, #540]	; (800a4f4 <HAL_UART_IRQHandler+0x538>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d04d      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a85      	ldr	r2, [pc, #532]	; (800a4f8 <HAL_UART_IRQHandler+0x53c>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d047      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a83      	ldr	r2, [pc, #524]	; (800a4fc <HAL_UART_IRQHandler+0x540>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d041      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a81      	ldr	r2, [pc, #516]	; (800a500 <HAL_UART_IRQHandler+0x544>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d03b      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a7f      	ldr	r2, [pc, #508]	; (800a504 <HAL_UART_IRQHandler+0x548>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d035      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a7d      	ldr	r2, [pc, #500]	; (800a508 <HAL_UART_IRQHandler+0x54c>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d02f      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a7b      	ldr	r2, [pc, #492]	; (800a50c <HAL_UART_IRQHandler+0x550>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d029      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a79      	ldr	r2, [pc, #484]	; (800a510 <HAL_UART_IRQHandler+0x554>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d023      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a77      	ldr	r2, [pc, #476]	; (800a514 <HAL_UART_IRQHandler+0x558>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d01d      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a75      	ldr	r2, [pc, #468]	; (800a518 <HAL_UART_IRQHandler+0x55c>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d017      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a73      	ldr	r2, [pc, #460]	; (800a51c <HAL_UART_IRQHandler+0x560>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d011      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a71      	ldr	r2, [pc, #452]	; (800a520 <HAL_UART_IRQHandler+0x564>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d00b      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a6f      	ldr	r2, [pc, #444]	; (800a524 <HAL_UART_IRQHandler+0x568>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d005      	beq.n	800a376 <HAL_UART_IRQHandler+0x3ba>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a6d      	ldr	r2, [pc, #436]	; (800a528 <HAL_UART_IRQHandler+0x56c>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d105      	bne.n	800a382 <HAL_UART_IRQHandler+0x3c6>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	b29b      	uxth	r3, r3
 800a380:	e004      	b.n	800a38c <HAL_UART_IRQHandler+0x3d0>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a390:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 81a4 	beq.w	800a6e2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a3a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	f080 819c 	bcs.w	800a6e2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a3b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3b8:	69db      	ldr	r3, [r3, #28]
 800a3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3be:	f000 8086 	beq.w	800a4ce <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a3ce:	e853 3f00 	ldrex	r3, [r3]
 800a3d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a3d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a3da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a3ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a3f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a3f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a3fc:	e841 2300 	strex	r3, r2, [r1]
 800a400:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1da      	bne.n	800a3c2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3308      	adds	r3, #8
 800a412:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a416:	e853 3f00 	ldrex	r3, [r3]
 800a41a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a41c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a41e:	f023 0301 	bic.w	r3, r3, #1
 800a422:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3308      	adds	r3, #8
 800a42c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a430:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a434:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a438:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a43c:	e841 2300 	strex	r3, r2, [r1]
 800a440:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a442:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1e1      	bne.n	800a40c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	3308      	adds	r3, #8
 800a44e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a452:	e853 3f00 	ldrex	r3, [r3]
 800a456:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a45a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a45e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3308      	adds	r3, #8
 800a468:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a46c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a46e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a472:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a47a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e3      	bne.n	800a448 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2220      	movs	r2, #32
 800a484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a49e:	f023 0310 	bic.w	r3, r3, #16
 800a4a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a4b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e4      	bne.n	800a48e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7f8 fd93 	bl	8002ff4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7f6 ff12 	bl	800130c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a4e8:	e0fb      	b.n	800a6e2 <HAL_UART_IRQHandler+0x726>
 800a4ea:	bf00      	nop
 800a4ec:	40020010 	.word	0x40020010
 800a4f0:	40020028 	.word	0x40020028
 800a4f4:	40020040 	.word	0x40020040
 800a4f8:	40020058 	.word	0x40020058
 800a4fc:	40020070 	.word	0x40020070
 800a500:	40020088 	.word	0x40020088
 800a504:	400200a0 	.word	0x400200a0
 800a508:	400200b8 	.word	0x400200b8
 800a50c:	40020410 	.word	0x40020410
 800a510:	40020428 	.word	0x40020428
 800a514:	40020440 	.word	0x40020440
 800a518:	40020458 	.word	0x40020458
 800a51c:	40020470 	.word	0x40020470
 800a520:	40020488 	.word	0x40020488
 800a524:	400204a0 	.word	0x400204a0
 800a528:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a538:	b29b      	uxth	r3, r3
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a546:	b29b      	uxth	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 80cc 	beq.w	800a6e6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a54e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 80c7 	beq.w	800a6e6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a568:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a56c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	461a      	mov	r2, r3
 800a576:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a57a:	647b      	str	r3, [r7, #68]	; 0x44
 800a57c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a582:	e841 2300 	strex	r3, r2, [r1]
 800a586:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1e4      	bne.n	800a558 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3308      	adds	r3, #8
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a598:	e853 3f00 	ldrex	r3, [r3]
 800a59c:	623b      	str	r3, [r7, #32]
   return(result);
 800a59e:	6a3a      	ldr	r2, [r7, #32]
 800a5a0:	4b54      	ldr	r3, [pc, #336]	; (800a6f4 <HAL_UART_IRQHandler+0x738>)
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a5b2:	633a      	str	r2, [r7, #48]	; 0x30
 800a5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ba:	e841 2300 	strex	r3, r2, [r1]
 800a5be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1e3      	bne.n	800a58e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2220      	movs	r2, #32
 800a5ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	e853 3f00 	ldrex	r3, [r3]
 800a5e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f023 0310 	bic.w	r3, r3, #16
 800a5ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a5fc:	61fb      	str	r3, [r7, #28]
 800a5fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a600:	69b9      	ldr	r1, [r7, #24]
 800a602:	69fa      	ldr	r2, [r7, #28]
 800a604:	e841 2300 	strex	r3, r2, [r1]
 800a608:	617b      	str	r3, [r7, #20]
   return(result);
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1e4      	bne.n	800a5da <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7f6 fe78 	bl	800130c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a61c:	e063      	b.n	800a6e6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a61e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00e      	beq.n	800a648 <HAL_UART_IRQHandler+0x68c>
 800a62a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a62e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a632:	2b00      	cmp	r3, #0
 800a634:	d008      	beq.n	800a648 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a63e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f001 fa1d 	bl	800ba80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a646:	e051      	b.n	800a6ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a650:	2b00      	cmp	r3, #0
 800a652:	d014      	beq.n	800a67e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d105      	bne.n	800a66c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d008      	beq.n	800a67e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a670:	2b00      	cmp	r3, #0
 800a672:	d03a      	beq.n	800a6ea <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	4798      	blx	r3
    }
    return;
 800a67c:	e035      	b.n	800a6ea <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d009      	beq.n	800a69e <HAL_UART_IRQHandler+0x6e2>
 800a68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 f9c7 	bl	800ba2a <UART_EndTransmit_IT>
    return;
 800a69c:	e026      	b.n	800a6ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a69e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d009      	beq.n	800a6be <HAL_UART_IRQHandler+0x702>
 800a6aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d003      	beq.n	800a6be <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f001 f9f6 	bl	800baa8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6bc:	e016      	b.n	800a6ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d010      	beq.n	800a6ec <HAL_UART_IRQHandler+0x730>
 800a6ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	da0c      	bge.n	800a6ec <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f001 f9de 	bl	800ba94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6d8:	e008      	b.n	800a6ec <HAL_UART_IRQHandler+0x730>
      return;
 800a6da:	bf00      	nop
 800a6dc:	e006      	b.n	800a6ec <HAL_UART_IRQHandler+0x730>
    return;
 800a6de:	bf00      	nop
 800a6e0:	e004      	b.n	800a6ec <HAL_UART_IRQHandler+0x730>
      return;
 800a6e2:	bf00      	nop
 800a6e4:	e002      	b.n	800a6ec <HAL_UART_IRQHandler+0x730>
      return;
 800a6e6:	bf00      	nop
 800a6e8:	e000      	b.n	800a6ec <HAL_UART_IRQHandler+0x730>
    return;
 800a6ea:	bf00      	nop
  }
}
 800a6ec:	37e8      	adds	r7, #232	; 0xe8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	effffffe 	.word	0xeffffffe

0800a6f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a74c:	b092      	sub	sp, #72	; 0x48
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	689a      	ldr	r2, [r3, #8]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	431a      	orrs	r2, r3
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	431a      	orrs	r2, r3
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	4bbe      	ldr	r3, [pc, #760]	; (800aa70 <UART_SetConfig+0x328>)
 800a778:	4013      	ands	r3, r2
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	6812      	ldr	r2, [r2, #0]
 800a77e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a780:	430b      	orrs	r3, r1
 800a782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	68da      	ldr	r2, [r3, #12]
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4ab3      	ldr	r2, [pc, #716]	; (800aa74 <UART_SetConfig+0x32c>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d004      	beq.n	800a7b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	4baf      	ldr	r3, [pc, #700]	; (800aa78 <UART_SetConfig+0x330>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	6812      	ldr	r2, [r2, #0]
 800a7c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7c4:	430b      	orrs	r3, r1
 800a7c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	f023 010f 	bic.w	r1, r3, #15
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4aa6      	ldr	r2, [pc, #664]	; (800aa7c <UART_SetConfig+0x334>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d177      	bne.n	800a8d8 <UART_SetConfig+0x190>
 800a7e8:	4ba5      	ldr	r3, [pc, #660]	; (800aa80 <UART_SetConfig+0x338>)
 800a7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7f0:	2b28      	cmp	r3, #40	; 0x28
 800a7f2:	d86d      	bhi.n	800a8d0 <UART_SetConfig+0x188>
 800a7f4:	a201      	add	r2, pc, #4	; (adr r2, 800a7fc <UART_SetConfig+0xb4>)
 800a7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fa:	bf00      	nop
 800a7fc:	0800a8a1 	.word	0x0800a8a1
 800a800:	0800a8d1 	.word	0x0800a8d1
 800a804:	0800a8d1 	.word	0x0800a8d1
 800a808:	0800a8d1 	.word	0x0800a8d1
 800a80c:	0800a8d1 	.word	0x0800a8d1
 800a810:	0800a8d1 	.word	0x0800a8d1
 800a814:	0800a8d1 	.word	0x0800a8d1
 800a818:	0800a8d1 	.word	0x0800a8d1
 800a81c:	0800a8a9 	.word	0x0800a8a9
 800a820:	0800a8d1 	.word	0x0800a8d1
 800a824:	0800a8d1 	.word	0x0800a8d1
 800a828:	0800a8d1 	.word	0x0800a8d1
 800a82c:	0800a8d1 	.word	0x0800a8d1
 800a830:	0800a8d1 	.word	0x0800a8d1
 800a834:	0800a8d1 	.word	0x0800a8d1
 800a838:	0800a8d1 	.word	0x0800a8d1
 800a83c:	0800a8b1 	.word	0x0800a8b1
 800a840:	0800a8d1 	.word	0x0800a8d1
 800a844:	0800a8d1 	.word	0x0800a8d1
 800a848:	0800a8d1 	.word	0x0800a8d1
 800a84c:	0800a8d1 	.word	0x0800a8d1
 800a850:	0800a8d1 	.word	0x0800a8d1
 800a854:	0800a8d1 	.word	0x0800a8d1
 800a858:	0800a8d1 	.word	0x0800a8d1
 800a85c:	0800a8b9 	.word	0x0800a8b9
 800a860:	0800a8d1 	.word	0x0800a8d1
 800a864:	0800a8d1 	.word	0x0800a8d1
 800a868:	0800a8d1 	.word	0x0800a8d1
 800a86c:	0800a8d1 	.word	0x0800a8d1
 800a870:	0800a8d1 	.word	0x0800a8d1
 800a874:	0800a8d1 	.word	0x0800a8d1
 800a878:	0800a8d1 	.word	0x0800a8d1
 800a87c:	0800a8c1 	.word	0x0800a8c1
 800a880:	0800a8d1 	.word	0x0800a8d1
 800a884:	0800a8d1 	.word	0x0800a8d1
 800a888:	0800a8d1 	.word	0x0800a8d1
 800a88c:	0800a8d1 	.word	0x0800a8d1
 800a890:	0800a8d1 	.word	0x0800a8d1
 800a894:	0800a8d1 	.word	0x0800a8d1
 800a898:	0800a8d1 	.word	0x0800a8d1
 800a89c:	0800a8c9 	.word	0x0800a8c9
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8a6:	e222      	b.n	800acee <UART_SetConfig+0x5a6>
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ae:	e21e      	b.n	800acee <UART_SetConfig+0x5a6>
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b6:	e21a      	b.n	800acee <UART_SetConfig+0x5a6>
 800a8b8:	2310      	movs	r3, #16
 800a8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8be:	e216      	b.n	800acee <UART_SetConfig+0x5a6>
 800a8c0:	2320      	movs	r3, #32
 800a8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c6:	e212      	b.n	800acee <UART_SetConfig+0x5a6>
 800a8c8:	2340      	movs	r3, #64	; 0x40
 800a8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ce:	e20e      	b.n	800acee <UART_SetConfig+0x5a6>
 800a8d0:	2380      	movs	r3, #128	; 0x80
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d6:	e20a      	b.n	800acee <UART_SetConfig+0x5a6>
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a69      	ldr	r2, [pc, #420]	; (800aa84 <UART_SetConfig+0x33c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d130      	bne.n	800a944 <UART_SetConfig+0x1fc>
 800a8e2:	4b67      	ldr	r3, [pc, #412]	; (800aa80 <UART_SetConfig+0x338>)
 800a8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	d826      	bhi.n	800a93c <UART_SetConfig+0x1f4>
 800a8ee:	a201      	add	r2, pc, #4	; (adr r2, 800a8f4 <UART_SetConfig+0x1ac>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800a90d 	.word	0x0800a90d
 800a8f8:	0800a915 	.word	0x0800a915
 800a8fc:	0800a91d 	.word	0x0800a91d
 800a900:	0800a925 	.word	0x0800a925
 800a904:	0800a92d 	.word	0x0800a92d
 800a908:	0800a935 	.word	0x0800a935
 800a90c:	2300      	movs	r3, #0
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a912:	e1ec      	b.n	800acee <UART_SetConfig+0x5a6>
 800a914:	2304      	movs	r3, #4
 800a916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a91a:	e1e8      	b.n	800acee <UART_SetConfig+0x5a6>
 800a91c:	2308      	movs	r3, #8
 800a91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a922:	e1e4      	b.n	800acee <UART_SetConfig+0x5a6>
 800a924:	2310      	movs	r3, #16
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a92a:	e1e0      	b.n	800acee <UART_SetConfig+0x5a6>
 800a92c:	2320      	movs	r3, #32
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a932:	e1dc      	b.n	800acee <UART_SetConfig+0x5a6>
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93a:	e1d8      	b.n	800acee <UART_SetConfig+0x5a6>
 800a93c:	2380      	movs	r3, #128	; 0x80
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a942:	e1d4      	b.n	800acee <UART_SetConfig+0x5a6>
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a4f      	ldr	r2, [pc, #316]	; (800aa88 <UART_SetConfig+0x340>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d130      	bne.n	800a9b0 <UART_SetConfig+0x268>
 800a94e:	4b4c      	ldr	r3, [pc, #304]	; (800aa80 <UART_SetConfig+0x338>)
 800a950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a952:	f003 0307 	and.w	r3, r3, #7
 800a956:	2b05      	cmp	r3, #5
 800a958:	d826      	bhi.n	800a9a8 <UART_SetConfig+0x260>
 800a95a:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <UART_SetConfig+0x218>)
 800a95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a960:	0800a979 	.word	0x0800a979
 800a964:	0800a981 	.word	0x0800a981
 800a968:	0800a989 	.word	0x0800a989
 800a96c:	0800a991 	.word	0x0800a991
 800a970:	0800a999 	.word	0x0800a999
 800a974:	0800a9a1 	.word	0x0800a9a1
 800a978:	2300      	movs	r3, #0
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a97e:	e1b6      	b.n	800acee <UART_SetConfig+0x5a6>
 800a980:	2304      	movs	r3, #4
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a986:	e1b2      	b.n	800acee <UART_SetConfig+0x5a6>
 800a988:	2308      	movs	r3, #8
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98e:	e1ae      	b.n	800acee <UART_SetConfig+0x5a6>
 800a990:	2310      	movs	r3, #16
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a996:	e1aa      	b.n	800acee <UART_SetConfig+0x5a6>
 800a998:	2320      	movs	r3, #32
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99e:	e1a6      	b.n	800acee <UART_SetConfig+0x5a6>
 800a9a0:	2340      	movs	r3, #64	; 0x40
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a6:	e1a2      	b.n	800acee <UART_SetConfig+0x5a6>
 800a9a8:	2380      	movs	r3, #128	; 0x80
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ae:	e19e      	b.n	800acee <UART_SetConfig+0x5a6>
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a35      	ldr	r2, [pc, #212]	; (800aa8c <UART_SetConfig+0x344>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d130      	bne.n	800aa1c <UART_SetConfig+0x2d4>
 800a9ba:	4b31      	ldr	r3, [pc, #196]	; (800aa80 <UART_SetConfig+0x338>)
 800a9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	2b05      	cmp	r3, #5
 800a9c4:	d826      	bhi.n	800aa14 <UART_SetConfig+0x2cc>
 800a9c6:	a201      	add	r2, pc, #4	; (adr r2, 800a9cc <UART_SetConfig+0x284>)
 800a9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9cc:	0800a9e5 	.word	0x0800a9e5
 800a9d0:	0800a9ed 	.word	0x0800a9ed
 800a9d4:	0800a9f5 	.word	0x0800a9f5
 800a9d8:	0800a9fd 	.word	0x0800a9fd
 800a9dc:	0800aa05 	.word	0x0800aa05
 800a9e0:	0800aa0d 	.word	0x0800aa0d
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ea:	e180      	b.n	800acee <UART_SetConfig+0x5a6>
 800a9ec:	2304      	movs	r3, #4
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f2:	e17c      	b.n	800acee <UART_SetConfig+0x5a6>
 800a9f4:	2308      	movs	r3, #8
 800a9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fa:	e178      	b.n	800acee <UART_SetConfig+0x5a6>
 800a9fc:	2310      	movs	r3, #16
 800a9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa02:	e174      	b.n	800acee <UART_SetConfig+0x5a6>
 800aa04:	2320      	movs	r3, #32
 800aa06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa0a:	e170      	b.n	800acee <UART_SetConfig+0x5a6>
 800aa0c:	2340      	movs	r3, #64	; 0x40
 800aa0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa12:	e16c      	b.n	800acee <UART_SetConfig+0x5a6>
 800aa14:	2380      	movs	r3, #128	; 0x80
 800aa16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1a:	e168      	b.n	800acee <UART_SetConfig+0x5a6>
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a1b      	ldr	r2, [pc, #108]	; (800aa90 <UART_SetConfig+0x348>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d142      	bne.n	800aaac <UART_SetConfig+0x364>
 800aa26:	4b16      	ldr	r3, [pc, #88]	; (800aa80 <UART_SetConfig+0x338>)
 800aa28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa2a:	f003 0307 	and.w	r3, r3, #7
 800aa2e:	2b05      	cmp	r3, #5
 800aa30:	d838      	bhi.n	800aaa4 <UART_SetConfig+0x35c>
 800aa32:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <UART_SetConfig+0x2f0>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa51 	.word	0x0800aa51
 800aa3c:	0800aa59 	.word	0x0800aa59
 800aa40:	0800aa61 	.word	0x0800aa61
 800aa44:	0800aa69 	.word	0x0800aa69
 800aa48:	0800aa95 	.word	0x0800aa95
 800aa4c:	0800aa9d 	.word	0x0800aa9d
 800aa50:	2300      	movs	r3, #0
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa56:	e14a      	b.n	800acee <UART_SetConfig+0x5a6>
 800aa58:	2304      	movs	r3, #4
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5e:	e146      	b.n	800acee <UART_SetConfig+0x5a6>
 800aa60:	2308      	movs	r3, #8
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa66:	e142      	b.n	800acee <UART_SetConfig+0x5a6>
 800aa68:	2310      	movs	r3, #16
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6e:	e13e      	b.n	800acee <UART_SetConfig+0x5a6>
 800aa70:	cfff69f3 	.word	0xcfff69f3
 800aa74:	58000c00 	.word	0x58000c00
 800aa78:	11fff4ff 	.word	0x11fff4ff
 800aa7c:	40011000 	.word	0x40011000
 800aa80:	58024400 	.word	0x58024400
 800aa84:	40004400 	.word	0x40004400
 800aa88:	40004800 	.word	0x40004800
 800aa8c:	40004c00 	.word	0x40004c00
 800aa90:	40005000 	.word	0x40005000
 800aa94:	2320      	movs	r3, #32
 800aa96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9a:	e128      	b.n	800acee <UART_SetConfig+0x5a6>
 800aa9c:	2340      	movs	r3, #64	; 0x40
 800aa9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa2:	e124      	b.n	800acee <UART_SetConfig+0x5a6>
 800aaa4:	2380      	movs	r3, #128	; 0x80
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaaa:	e120      	b.n	800acee <UART_SetConfig+0x5a6>
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4acb      	ldr	r2, [pc, #812]	; (800ade0 <UART_SetConfig+0x698>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d176      	bne.n	800aba4 <UART_SetConfig+0x45c>
 800aab6:	4bcb      	ldr	r3, [pc, #812]	; (800ade4 <UART_SetConfig+0x69c>)
 800aab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aabe:	2b28      	cmp	r3, #40	; 0x28
 800aac0:	d86c      	bhi.n	800ab9c <UART_SetConfig+0x454>
 800aac2:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <UART_SetConfig+0x380>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800ab6d 	.word	0x0800ab6d
 800aacc:	0800ab9d 	.word	0x0800ab9d
 800aad0:	0800ab9d 	.word	0x0800ab9d
 800aad4:	0800ab9d 	.word	0x0800ab9d
 800aad8:	0800ab9d 	.word	0x0800ab9d
 800aadc:	0800ab9d 	.word	0x0800ab9d
 800aae0:	0800ab9d 	.word	0x0800ab9d
 800aae4:	0800ab9d 	.word	0x0800ab9d
 800aae8:	0800ab75 	.word	0x0800ab75
 800aaec:	0800ab9d 	.word	0x0800ab9d
 800aaf0:	0800ab9d 	.word	0x0800ab9d
 800aaf4:	0800ab9d 	.word	0x0800ab9d
 800aaf8:	0800ab9d 	.word	0x0800ab9d
 800aafc:	0800ab9d 	.word	0x0800ab9d
 800ab00:	0800ab9d 	.word	0x0800ab9d
 800ab04:	0800ab9d 	.word	0x0800ab9d
 800ab08:	0800ab7d 	.word	0x0800ab7d
 800ab0c:	0800ab9d 	.word	0x0800ab9d
 800ab10:	0800ab9d 	.word	0x0800ab9d
 800ab14:	0800ab9d 	.word	0x0800ab9d
 800ab18:	0800ab9d 	.word	0x0800ab9d
 800ab1c:	0800ab9d 	.word	0x0800ab9d
 800ab20:	0800ab9d 	.word	0x0800ab9d
 800ab24:	0800ab9d 	.word	0x0800ab9d
 800ab28:	0800ab85 	.word	0x0800ab85
 800ab2c:	0800ab9d 	.word	0x0800ab9d
 800ab30:	0800ab9d 	.word	0x0800ab9d
 800ab34:	0800ab9d 	.word	0x0800ab9d
 800ab38:	0800ab9d 	.word	0x0800ab9d
 800ab3c:	0800ab9d 	.word	0x0800ab9d
 800ab40:	0800ab9d 	.word	0x0800ab9d
 800ab44:	0800ab9d 	.word	0x0800ab9d
 800ab48:	0800ab8d 	.word	0x0800ab8d
 800ab4c:	0800ab9d 	.word	0x0800ab9d
 800ab50:	0800ab9d 	.word	0x0800ab9d
 800ab54:	0800ab9d 	.word	0x0800ab9d
 800ab58:	0800ab9d 	.word	0x0800ab9d
 800ab5c:	0800ab9d 	.word	0x0800ab9d
 800ab60:	0800ab9d 	.word	0x0800ab9d
 800ab64:	0800ab9d 	.word	0x0800ab9d
 800ab68:	0800ab95 	.word	0x0800ab95
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab72:	e0bc      	b.n	800acee <UART_SetConfig+0x5a6>
 800ab74:	2304      	movs	r3, #4
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7a:	e0b8      	b.n	800acee <UART_SetConfig+0x5a6>
 800ab7c:	2308      	movs	r3, #8
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab82:	e0b4      	b.n	800acee <UART_SetConfig+0x5a6>
 800ab84:	2310      	movs	r3, #16
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab8a:	e0b0      	b.n	800acee <UART_SetConfig+0x5a6>
 800ab8c:	2320      	movs	r3, #32
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab92:	e0ac      	b.n	800acee <UART_SetConfig+0x5a6>
 800ab94:	2340      	movs	r3, #64	; 0x40
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab9a:	e0a8      	b.n	800acee <UART_SetConfig+0x5a6>
 800ab9c:	2380      	movs	r3, #128	; 0x80
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba2:	e0a4      	b.n	800acee <UART_SetConfig+0x5a6>
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a8f      	ldr	r2, [pc, #572]	; (800ade8 <UART_SetConfig+0x6a0>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d130      	bne.n	800ac10 <UART_SetConfig+0x4c8>
 800abae:	4b8d      	ldr	r3, [pc, #564]	; (800ade4 <UART_SetConfig+0x69c>)
 800abb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b05      	cmp	r3, #5
 800abb8:	d826      	bhi.n	800ac08 <UART_SetConfig+0x4c0>
 800abba:	a201      	add	r2, pc, #4	; (adr r2, 800abc0 <UART_SetConfig+0x478>)
 800abbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc0:	0800abd9 	.word	0x0800abd9
 800abc4:	0800abe1 	.word	0x0800abe1
 800abc8:	0800abe9 	.word	0x0800abe9
 800abcc:	0800abf1 	.word	0x0800abf1
 800abd0:	0800abf9 	.word	0x0800abf9
 800abd4:	0800ac01 	.word	0x0800ac01
 800abd8:	2300      	movs	r3, #0
 800abda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abde:	e086      	b.n	800acee <UART_SetConfig+0x5a6>
 800abe0:	2304      	movs	r3, #4
 800abe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abe6:	e082      	b.n	800acee <UART_SetConfig+0x5a6>
 800abe8:	2308      	movs	r3, #8
 800abea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abee:	e07e      	b.n	800acee <UART_SetConfig+0x5a6>
 800abf0:	2310      	movs	r3, #16
 800abf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abf6:	e07a      	b.n	800acee <UART_SetConfig+0x5a6>
 800abf8:	2320      	movs	r3, #32
 800abfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abfe:	e076      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac00:	2340      	movs	r3, #64	; 0x40
 800ac02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac06:	e072      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac08:	2380      	movs	r3, #128	; 0x80
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac0e:	e06e      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a75      	ldr	r2, [pc, #468]	; (800adec <UART_SetConfig+0x6a4>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d130      	bne.n	800ac7c <UART_SetConfig+0x534>
 800ac1a:	4b72      	ldr	r3, [pc, #456]	; (800ade4 <UART_SetConfig+0x69c>)
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1e:	f003 0307 	and.w	r3, r3, #7
 800ac22:	2b05      	cmp	r3, #5
 800ac24:	d826      	bhi.n	800ac74 <UART_SetConfig+0x52c>
 800ac26:	a201      	add	r2, pc, #4	; (adr r2, 800ac2c <UART_SetConfig+0x4e4>)
 800ac28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2c:	0800ac45 	.word	0x0800ac45
 800ac30:	0800ac4d 	.word	0x0800ac4d
 800ac34:	0800ac55 	.word	0x0800ac55
 800ac38:	0800ac5d 	.word	0x0800ac5d
 800ac3c:	0800ac65 	.word	0x0800ac65
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	2300      	movs	r3, #0
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac4a:	e050      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac52:	e04c      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac54:	2308      	movs	r3, #8
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac5a:	e048      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac62:	e044      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac64:	2320      	movs	r3, #32
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac6a:	e040      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac6c:	2340      	movs	r3, #64	; 0x40
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac72:	e03c      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac74:	2380      	movs	r3, #128	; 0x80
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac7a:	e038      	b.n	800acee <UART_SetConfig+0x5a6>
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a5b      	ldr	r2, [pc, #364]	; (800adf0 <UART_SetConfig+0x6a8>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d130      	bne.n	800ace8 <UART_SetConfig+0x5a0>
 800ac86:	4b57      	ldr	r3, [pc, #348]	; (800ade4 <UART_SetConfig+0x69c>)
 800ac88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8a:	f003 0307 	and.w	r3, r3, #7
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d826      	bhi.n	800ace0 <UART_SetConfig+0x598>
 800ac92:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <UART_SetConfig+0x550>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acb1 	.word	0x0800acb1
 800ac9c:	0800acb9 	.word	0x0800acb9
 800aca0:	0800acc1 	.word	0x0800acc1
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd9 	.word	0x0800acd9
 800acb0:	2302      	movs	r3, #2
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acb6:	e01a      	b.n	800acee <UART_SetConfig+0x5a6>
 800acb8:	2304      	movs	r3, #4
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acbe:	e016      	b.n	800acee <UART_SetConfig+0x5a6>
 800acc0:	2308      	movs	r3, #8
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acc6:	e012      	b.n	800acee <UART_SetConfig+0x5a6>
 800acc8:	2310      	movs	r3, #16
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acce:	e00e      	b.n	800acee <UART_SetConfig+0x5a6>
 800acd0:	2320      	movs	r3, #32
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acd6:	e00a      	b.n	800acee <UART_SetConfig+0x5a6>
 800acd8:	2340      	movs	r3, #64	; 0x40
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acde:	e006      	b.n	800acee <UART_SetConfig+0x5a6>
 800ace0:	2380      	movs	r3, #128	; 0x80
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ace6:	e002      	b.n	800acee <UART_SetConfig+0x5a6>
 800ace8:	2380      	movs	r3, #128	; 0x80
 800acea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a3f      	ldr	r2, [pc, #252]	; (800adf0 <UART_SetConfig+0x6a8>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	f040 80f8 	bne.w	800aeea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acfa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800acfe:	2b20      	cmp	r3, #32
 800ad00:	dc46      	bgt.n	800ad90 <UART_SetConfig+0x648>
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	f2c0 8082 	blt.w	800ae0c <UART_SetConfig+0x6c4>
 800ad08:	3b02      	subs	r3, #2
 800ad0a:	2b1e      	cmp	r3, #30
 800ad0c:	d87e      	bhi.n	800ae0c <UART_SetConfig+0x6c4>
 800ad0e:	a201      	add	r2, pc, #4	; (adr r2, 800ad14 <UART_SetConfig+0x5cc>)
 800ad10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad14:	0800ad97 	.word	0x0800ad97
 800ad18:	0800ae0d 	.word	0x0800ae0d
 800ad1c:	0800ad9f 	.word	0x0800ad9f
 800ad20:	0800ae0d 	.word	0x0800ae0d
 800ad24:	0800ae0d 	.word	0x0800ae0d
 800ad28:	0800ae0d 	.word	0x0800ae0d
 800ad2c:	0800adaf 	.word	0x0800adaf
 800ad30:	0800ae0d 	.word	0x0800ae0d
 800ad34:	0800ae0d 	.word	0x0800ae0d
 800ad38:	0800ae0d 	.word	0x0800ae0d
 800ad3c:	0800ae0d 	.word	0x0800ae0d
 800ad40:	0800ae0d 	.word	0x0800ae0d
 800ad44:	0800ae0d 	.word	0x0800ae0d
 800ad48:	0800ae0d 	.word	0x0800ae0d
 800ad4c:	0800adbf 	.word	0x0800adbf
 800ad50:	0800ae0d 	.word	0x0800ae0d
 800ad54:	0800ae0d 	.word	0x0800ae0d
 800ad58:	0800ae0d 	.word	0x0800ae0d
 800ad5c:	0800ae0d 	.word	0x0800ae0d
 800ad60:	0800ae0d 	.word	0x0800ae0d
 800ad64:	0800ae0d 	.word	0x0800ae0d
 800ad68:	0800ae0d 	.word	0x0800ae0d
 800ad6c:	0800ae0d 	.word	0x0800ae0d
 800ad70:	0800ae0d 	.word	0x0800ae0d
 800ad74:	0800ae0d 	.word	0x0800ae0d
 800ad78:	0800ae0d 	.word	0x0800ae0d
 800ad7c:	0800ae0d 	.word	0x0800ae0d
 800ad80:	0800ae0d 	.word	0x0800ae0d
 800ad84:	0800ae0d 	.word	0x0800ae0d
 800ad88:	0800ae0d 	.word	0x0800ae0d
 800ad8c:	0800adff 	.word	0x0800adff
 800ad90:	2b40      	cmp	r3, #64	; 0x40
 800ad92:	d037      	beq.n	800ae04 <UART_SetConfig+0x6bc>
 800ad94:	e03a      	b.n	800ae0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ad96:	f7fd fdb1 	bl	80088fc <HAL_RCCEx_GetD3PCLK1Freq>
 800ad9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad9c:	e03c      	b.n	800ae18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fd fdc0 	bl	8008928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ada8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adac:	e034      	b.n	800ae18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adae:	f107 0318 	add.w	r3, r7, #24
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fd ff0c 	bl	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adbc:	e02c      	b.n	800ae18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adbe:	4b09      	ldr	r3, [pc, #36]	; (800ade4 <UART_SetConfig+0x69c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0320 	and.w	r3, r3, #32
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d016      	beq.n	800adf8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adca:	4b06      	ldr	r3, [pc, #24]	; (800ade4 <UART_SetConfig+0x69c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	08db      	lsrs	r3, r3, #3
 800add0:	f003 0303 	and.w	r3, r3, #3
 800add4:	4a07      	ldr	r2, [pc, #28]	; (800adf4 <UART_SetConfig+0x6ac>)
 800add6:	fa22 f303 	lsr.w	r3, r2, r3
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800addc:	e01c      	b.n	800ae18 <UART_SetConfig+0x6d0>
 800adde:	bf00      	nop
 800ade0:	40011400 	.word	0x40011400
 800ade4:	58024400 	.word	0x58024400
 800ade8:	40007800 	.word	0x40007800
 800adec:	40007c00 	.word	0x40007c00
 800adf0:	58000c00 	.word	0x58000c00
 800adf4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800adf8:	4b9d      	ldr	r3, [pc, #628]	; (800b070 <UART_SetConfig+0x928>)
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adfc:	e00c      	b.n	800ae18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800adfe:	4b9d      	ldr	r3, [pc, #628]	; (800b074 <UART_SetConfig+0x92c>)
 800ae00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae02:	e009      	b.n	800ae18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae0a:	e005      	b.n	800ae18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ae16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f000 81de 	beq.w	800b1dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae24:	4a94      	ldr	r2, [pc, #592]	; (800b078 <UART_SetConfig+0x930>)
 800ae26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae32:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	4413      	add	r3, r2
 800ae3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d305      	bcc.n	800ae50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d903      	bls.n	800ae58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ae56:	e1c1      	b.n	800b1dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	60bb      	str	r3, [r7, #8]
 800ae5e:	60fa      	str	r2, [r7, #12]
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae64:	4a84      	ldr	r2, [pc, #528]	; (800b078 <UART_SetConfig+0x930>)
 800ae66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	607a      	str	r2, [r7, #4]
 800ae72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae7a:	f7f5 fa81 	bl	8000380 <__aeabi_uldivmod>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4610      	mov	r0, r2
 800ae84:	4619      	mov	r1, r3
 800ae86:	f04f 0200 	mov.w	r2, #0
 800ae8a:	f04f 0300 	mov.w	r3, #0
 800ae8e:	020b      	lsls	r3, r1, #8
 800ae90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae94:	0202      	lsls	r2, r0, #8
 800ae96:	6979      	ldr	r1, [r7, #20]
 800ae98:	6849      	ldr	r1, [r1, #4]
 800ae9a:	0849      	lsrs	r1, r1, #1
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	4605      	mov	r5, r0
 800aea2:	eb12 0804 	adds.w	r8, r2, r4
 800aea6:	eb43 0905 	adc.w	r9, r3, r5
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	469a      	mov	sl, r3
 800aeb2:	4693      	mov	fp, r2
 800aeb4:	4652      	mov	r2, sl
 800aeb6:	465b      	mov	r3, fp
 800aeb8:	4640      	mov	r0, r8
 800aeba:	4649      	mov	r1, r9
 800aebc:	f7f5 fa60 	bl	8000380 <__aeabi_uldivmod>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4613      	mov	r3, r2
 800aec6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aece:	d308      	bcc.n	800aee2 <UART_SetConfig+0x79a>
 800aed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aed6:	d204      	bcs.n	800aee2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aede:	60da      	str	r2, [r3, #12]
 800aee0:	e17c      	b.n	800b1dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aee8:	e178      	b.n	800b1dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aef2:	f040 80c5 	bne.w	800b080 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aef6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aefa:	2b20      	cmp	r3, #32
 800aefc:	dc48      	bgt.n	800af90 <UART_SetConfig+0x848>
 800aefe:	2b00      	cmp	r3, #0
 800af00:	db7b      	blt.n	800affa <UART_SetConfig+0x8b2>
 800af02:	2b20      	cmp	r3, #32
 800af04:	d879      	bhi.n	800affa <UART_SetConfig+0x8b2>
 800af06:	a201      	add	r2, pc, #4	; (adr r2, 800af0c <UART_SetConfig+0x7c4>)
 800af08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0c:	0800af97 	.word	0x0800af97
 800af10:	0800af9f 	.word	0x0800af9f
 800af14:	0800affb 	.word	0x0800affb
 800af18:	0800affb 	.word	0x0800affb
 800af1c:	0800afa7 	.word	0x0800afa7
 800af20:	0800affb 	.word	0x0800affb
 800af24:	0800affb 	.word	0x0800affb
 800af28:	0800affb 	.word	0x0800affb
 800af2c:	0800afb7 	.word	0x0800afb7
 800af30:	0800affb 	.word	0x0800affb
 800af34:	0800affb 	.word	0x0800affb
 800af38:	0800affb 	.word	0x0800affb
 800af3c:	0800affb 	.word	0x0800affb
 800af40:	0800affb 	.word	0x0800affb
 800af44:	0800affb 	.word	0x0800affb
 800af48:	0800affb 	.word	0x0800affb
 800af4c:	0800afc7 	.word	0x0800afc7
 800af50:	0800affb 	.word	0x0800affb
 800af54:	0800affb 	.word	0x0800affb
 800af58:	0800affb 	.word	0x0800affb
 800af5c:	0800affb 	.word	0x0800affb
 800af60:	0800affb 	.word	0x0800affb
 800af64:	0800affb 	.word	0x0800affb
 800af68:	0800affb 	.word	0x0800affb
 800af6c:	0800affb 	.word	0x0800affb
 800af70:	0800affb 	.word	0x0800affb
 800af74:	0800affb 	.word	0x0800affb
 800af78:	0800affb 	.word	0x0800affb
 800af7c:	0800affb 	.word	0x0800affb
 800af80:	0800affb 	.word	0x0800affb
 800af84:	0800affb 	.word	0x0800affb
 800af88:	0800affb 	.word	0x0800affb
 800af8c:	0800afed 	.word	0x0800afed
 800af90:	2b40      	cmp	r3, #64	; 0x40
 800af92:	d02e      	beq.n	800aff2 <UART_SetConfig+0x8aa>
 800af94:	e031      	b.n	800affa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af96:	f7fc fd3f 	bl	8007a18 <HAL_RCC_GetPCLK1Freq>
 800af9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af9c:	e033      	b.n	800b006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af9e:	f7fc fd51 	bl	8007a44 <HAL_RCC_GetPCLK2Freq>
 800afa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afa4:	e02f      	b.n	800b006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fd fcbc 	bl	8008928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb4:	e027      	b.n	800b006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afb6:	f107 0318 	add.w	r3, r7, #24
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fd fe08 	bl	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afc4:	e01f      	b.n	800b006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afc6:	4b2d      	ldr	r3, [pc, #180]	; (800b07c <UART_SetConfig+0x934>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0320 	and.w	r3, r3, #32
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d009      	beq.n	800afe6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afd2:	4b2a      	ldr	r3, [pc, #168]	; (800b07c <UART_SetConfig+0x934>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	08db      	lsrs	r3, r3, #3
 800afd8:	f003 0303 	and.w	r3, r3, #3
 800afdc:	4a24      	ldr	r2, [pc, #144]	; (800b070 <UART_SetConfig+0x928>)
 800afde:	fa22 f303 	lsr.w	r3, r2, r3
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800afe4:	e00f      	b.n	800b006 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800afe6:	4b22      	ldr	r3, [pc, #136]	; (800b070 <UART_SetConfig+0x928>)
 800afe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afea:	e00c      	b.n	800b006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800afec:	4b21      	ldr	r3, [pc, #132]	; (800b074 <UART_SetConfig+0x92c>)
 800afee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff0:	e009      	b.n	800b006 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff8:	e005      	b.n	800b006 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b004:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 80e7 	beq.w	800b1dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	4a19      	ldr	r2, [pc, #100]	; (800b078 <UART_SetConfig+0x930>)
 800b014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b018:	461a      	mov	r2, r3
 800b01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b01c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b020:	005a      	lsls	r2, r3, #1
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	085b      	lsrs	r3, r3, #1
 800b028:	441a      	add	r2, r3
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b032:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	2b0f      	cmp	r3, #15
 800b038:	d916      	bls.n	800b068 <UART_SetConfig+0x920>
 800b03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b040:	d212      	bcs.n	800b068 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	b29b      	uxth	r3, r3
 800b046:	f023 030f 	bic.w	r3, r3, #15
 800b04a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	085b      	lsrs	r3, r3, #1
 800b050:	b29b      	uxth	r3, r3
 800b052:	f003 0307 	and.w	r3, r3, #7
 800b056:	b29a      	uxth	r2, r3
 800b058:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b05a:	4313      	orrs	r3, r2
 800b05c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b064:	60da      	str	r2, [r3, #12]
 800b066:	e0b9      	b.n	800b1dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b06e:	e0b5      	b.n	800b1dc <UART_SetConfig+0xa94>
 800b070:	03d09000 	.word	0x03d09000
 800b074:	003d0900 	.word	0x003d0900
 800b078:	0800cf8c 	.word	0x0800cf8c
 800b07c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b080:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b084:	2b20      	cmp	r3, #32
 800b086:	dc49      	bgt.n	800b11c <UART_SetConfig+0x9d4>
 800b088:	2b00      	cmp	r3, #0
 800b08a:	db7c      	blt.n	800b186 <UART_SetConfig+0xa3e>
 800b08c:	2b20      	cmp	r3, #32
 800b08e:	d87a      	bhi.n	800b186 <UART_SetConfig+0xa3e>
 800b090:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <UART_SetConfig+0x950>)
 800b092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b096:	bf00      	nop
 800b098:	0800b123 	.word	0x0800b123
 800b09c:	0800b12b 	.word	0x0800b12b
 800b0a0:	0800b187 	.word	0x0800b187
 800b0a4:	0800b187 	.word	0x0800b187
 800b0a8:	0800b133 	.word	0x0800b133
 800b0ac:	0800b187 	.word	0x0800b187
 800b0b0:	0800b187 	.word	0x0800b187
 800b0b4:	0800b187 	.word	0x0800b187
 800b0b8:	0800b143 	.word	0x0800b143
 800b0bc:	0800b187 	.word	0x0800b187
 800b0c0:	0800b187 	.word	0x0800b187
 800b0c4:	0800b187 	.word	0x0800b187
 800b0c8:	0800b187 	.word	0x0800b187
 800b0cc:	0800b187 	.word	0x0800b187
 800b0d0:	0800b187 	.word	0x0800b187
 800b0d4:	0800b187 	.word	0x0800b187
 800b0d8:	0800b153 	.word	0x0800b153
 800b0dc:	0800b187 	.word	0x0800b187
 800b0e0:	0800b187 	.word	0x0800b187
 800b0e4:	0800b187 	.word	0x0800b187
 800b0e8:	0800b187 	.word	0x0800b187
 800b0ec:	0800b187 	.word	0x0800b187
 800b0f0:	0800b187 	.word	0x0800b187
 800b0f4:	0800b187 	.word	0x0800b187
 800b0f8:	0800b187 	.word	0x0800b187
 800b0fc:	0800b187 	.word	0x0800b187
 800b100:	0800b187 	.word	0x0800b187
 800b104:	0800b187 	.word	0x0800b187
 800b108:	0800b187 	.word	0x0800b187
 800b10c:	0800b187 	.word	0x0800b187
 800b110:	0800b187 	.word	0x0800b187
 800b114:	0800b187 	.word	0x0800b187
 800b118:	0800b179 	.word	0x0800b179
 800b11c:	2b40      	cmp	r3, #64	; 0x40
 800b11e:	d02e      	beq.n	800b17e <UART_SetConfig+0xa36>
 800b120:	e031      	b.n	800b186 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b122:	f7fc fc79 	bl	8007a18 <HAL_RCC_GetPCLK1Freq>
 800b126:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b128:	e033      	b.n	800b192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b12a:	f7fc fc8b 	bl	8007a44 <HAL_RCC_GetPCLK2Freq>
 800b12e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b130:	e02f      	b.n	800b192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b136:	4618      	mov	r0, r3
 800b138:	f7fd fbf6 	bl	8008928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b140:	e027      	b.n	800b192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b142:	f107 0318 	add.w	r3, r7, #24
 800b146:	4618      	mov	r0, r3
 800b148:	f7fd fd42 	bl	8008bd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b150:	e01f      	b.n	800b192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b152:	4b2d      	ldr	r3, [pc, #180]	; (800b208 <UART_SetConfig+0xac0>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 0320 	and.w	r3, r3, #32
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d009      	beq.n	800b172 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b15e:	4b2a      	ldr	r3, [pc, #168]	; (800b208 <UART_SetConfig+0xac0>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	08db      	lsrs	r3, r3, #3
 800b164:	f003 0303 	and.w	r3, r3, #3
 800b168:	4a28      	ldr	r2, [pc, #160]	; (800b20c <UART_SetConfig+0xac4>)
 800b16a:	fa22 f303 	lsr.w	r3, r2, r3
 800b16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b170:	e00f      	b.n	800b192 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b172:	4b26      	ldr	r3, [pc, #152]	; (800b20c <UART_SetConfig+0xac4>)
 800b174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b176:	e00c      	b.n	800b192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b178:	4b25      	ldr	r3, [pc, #148]	; (800b210 <UART_SetConfig+0xac8>)
 800b17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b17c:	e009      	b.n	800b192 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b17e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b184:	e005      	b.n	800b192 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b186:	2300      	movs	r3, #0
 800b188:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b190:	bf00      	nop
    }

    if (pclk != 0U)
 800b192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b194:	2b00      	cmp	r3, #0
 800b196:	d021      	beq.n	800b1dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19c:	4a1d      	ldr	r2, [pc, #116]	; (800b214 <UART_SetConfig+0xacc>)
 800b19e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	085b      	lsrs	r3, r3, #1
 800b1b0:	441a      	add	r2, r3
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1be:	2b0f      	cmp	r3, #15
 800b1c0:	d909      	bls.n	800b1d6 <UART_SetConfig+0xa8e>
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1c8:	d205      	bcs.n	800b1d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	60da      	str	r2, [r3, #12]
 800b1d4:	e002      	b.n	800b1dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b1f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3748      	adds	r7, #72	; 0x48
 800b200:	46bd      	mov	sp, r7
 800b202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b206:	bf00      	nop
 800b208:	58024400 	.word	0x58024400
 800b20c:	03d09000 	.word	0x03d09000
 800b210:	003d0900 	.word	0x003d0900
 800b214:	0800cf8c 	.word	0x0800cf8c

0800b218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b224:	f003 0301 	and.w	r3, r3, #1
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00a      	beq.n	800b242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	430a      	orrs	r2, r1
 800b240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b246:	f003 0302 	and.w	r3, r3, #2
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00a      	beq.n	800b264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	430a      	orrs	r2, r1
 800b262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b268:	f003 0304 	and.w	r3, r3, #4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00a      	beq.n	800b286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	430a      	orrs	r2, r1
 800b284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28a:	f003 0308 	and.w	r3, r3, #8
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d00a      	beq.n	800b2a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	430a      	orrs	r2, r1
 800b2a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ac:	f003 0310 	and.w	r3, r3, #16
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	430a      	orrs	r2, r1
 800b2c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ce:	f003 0320 	and.w	r3, r3, #32
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00a      	beq.n	800b2ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	430a      	orrs	r2, r1
 800b2ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d01a      	beq.n	800b32e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	430a      	orrs	r2, r1
 800b30c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b316:	d10a      	bne.n	800b32e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	430a      	orrs	r2, r1
 800b34e:	605a      	str	r2, [r3, #4]
  }
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af02      	add	r7, sp, #8
 800b362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b36c:	f7f6 fd8e 	bl	8001e8c <HAL_GetTick>
 800b370:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 0308 	and.w	r3, r3, #8
 800b37c:	2b08      	cmp	r3, #8
 800b37e:	d10e      	bne.n	800b39e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f82f 	bl	800b3f2 <UART_WaitOnFlagUntilTimeout>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b39a:	2303      	movs	r3, #3
 800b39c:	e025      	b.n	800b3ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	2b04      	cmp	r3, #4
 800b3aa:	d10e      	bne.n	800b3ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f819 	bl	800b3f2 <UART_WaitOnFlagUntilTimeout>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	e00f      	b.n	800b3ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2220      	movs	r2, #32
 800b3ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2220      	movs	r2, #32
 800b3d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b09c      	sub	sp, #112	; 0x70
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	60f8      	str	r0, [r7, #12]
 800b3fa:	60b9      	str	r1, [r7, #8]
 800b3fc:	603b      	str	r3, [r7, #0]
 800b3fe:	4613      	mov	r3, r2
 800b400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b402:	e0a9      	b.n	800b558 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b40a:	f000 80a5 	beq.w	800b558 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b40e:	f7f6 fd3d 	bl	8001e8c <HAL_GetTick>
 800b412:	4602      	mov	r2, r0
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d302      	bcc.n	800b424 <UART_WaitOnFlagUntilTimeout+0x32>
 800b41e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b420:	2b00      	cmp	r3, #0
 800b422:	d140      	bne.n	800b4a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b42c:	e853 3f00 	ldrex	r3, [r3]
 800b430:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b434:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b438:	667b      	str	r3, [r7, #100]	; 0x64
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b442:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b444:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b446:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b44a:	e841 2300 	strex	r3, r2, [r1]
 800b44e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1e6      	bne.n	800b424 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3308      	adds	r3, #8
 800b45c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b460:	e853 3f00 	ldrex	r3, [r3]
 800b464:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b468:	f023 0301 	bic.w	r3, r3, #1
 800b46c:	663b      	str	r3, [r7, #96]	; 0x60
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3308      	adds	r3, #8
 800b474:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b476:	64ba      	str	r2, [r7, #72]	; 0x48
 800b478:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b47c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b47e:	e841 2300 	strex	r3, r2, [r1]
 800b482:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1e5      	bne.n	800b456 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2220      	movs	r2, #32
 800b48e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2220      	movs	r2, #32
 800b496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e069      	b.n	800b57a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f003 0304 	and.w	r3, r3, #4
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d051      	beq.n	800b558 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	69db      	ldr	r3, [r3, #28]
 800b4ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4c2:	d149      	bne.n	800b558 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	e853 3f00 	ldrex	r3, [r3]
 800b4da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4f4:	e841 2300 	strex	r3, r2, [r1]
 800b4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1e6      	bne.n	800b4ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3308      	adds	r3, #8
 800b506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	e853 3f00 	ldrex	r3, [r3]
 800b50e:	613b      	str	r3, [r7, #16]
   return(result);
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	f023 0301 	bic.w	r3, r3, #1
 800b516:	66bb      	str	r3, [r7, #104]	; 0x68
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3308      	adds	r3, #8
 800b51e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b520:	623a      	str	r2, [r7, #32]
 800b522:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b524:	69f9      	ldr	r1, [r7, #28]
 800b526:	6a3a      	ldr	r2, [r7, #32]
 800b528:	e841 2300 	strex	r3, r2, [r1]
 800b52c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1e5      	bne.n	800b500 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2220      	movs	r2, #32
 800b538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2220      	movs	r2, #32
 800b540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2220      	movs	r2, #32
 800b548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	e010      	b.n	800b57a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69da      	ldr	r2, [r3, #28]
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	4013      	ands	r3, r2
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	429a      	cmp	r2, r3
 800b566:	bf0c      	ite	eq
 800b568:	2301      	moveq	r3, #1
 800b56a:	2300      	movne	r3, #0
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	461a      	mov	r2, r3
 800b570:	79fb      	ldrb	r3, [r7, #7]
 800b572:	429a      	cmp	r2, r3
 800b574:	f43f af46 	beq.w	800b404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3770      	adds	r7, #112	; 0x70
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b096      	sub	sp, #88	; 0x58
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	4613      	mov	r3, r2
 800b590:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	68ba      	ldr	r2, [r7, #8]
 800b596:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	88fa      	ldrh	r2, [r7, #6]
 800b59c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2222      	movs	r2, #34	; 0x22
 800b5ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d02c      	beq.n	800b612 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5bc:	4a42      	ldr	r2, [pc, #264]	; (800b6c8 <UART_Start_Receive_DMA+0x144>)
 800b5be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5c4:	4a41      	ldr	r2, [pc, #260]	; (800b6cc <UART_Start_Receive_DMA+0x148>)
 800b5c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5cc:	4a40      	ldr	r2, [pc, #256]	; (800b6d0 <UART_Start_Receive_DMA+0x14c>)
 800b5ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3324      	adds	r3, #36	; 0x24
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	88fb      	ldrh	r3, [r7, #6]
 800b5ec:	f7f7 fa98 	bl	8002b20 <HAL_DMA_Start_IT>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00d      	beq.n	800b612 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2210      	movs	r2, #16
 800b5fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2220      	movs	r2, #32
 800b60a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	e055      	b.n	800b6be <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d018      	beq.n	800b654 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62a:	e853 3f00 	ldrex	r3, [r3]
 800b62e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b636:	657b      	str	r3, [r7, #84]	; 0x54
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	461a      	mov	r2, r3
 800b63e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b640:	64bb      	str	r3, [r7, #72]	; 0x48
 800b642:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b644:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b646:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b648:	e841 2300 	strex	r3, r2, [r1]
 800b64c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b64e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1e6      	bne.n	800b622 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3308      	adds	r3, #8
 800b65a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	e853 3f00 	ldrex	r3, [r3]
 800b662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	f043 0301 	orr.w	r3, r3, #1
 800b66a:	653b      	str	r3, [r7, #80]	; 0x50
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	3308      	adds	r3, #8
 800b672:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b674:	637a      	str	r2, [r7, #52]	; 0x34
 800b676:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b67a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b67c:	e841 2300 	strex	r3, r2, [r1]
 800b680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1e5      	bne.n	800b654 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3308      	adds	r3, #8
 800b68e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	e853 3f00 	ldrex	r3, [r3]
 800b696:	613b      	str	r3, [r7, #16]
   return(result);
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b69e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3308      	adds	r3, #8
 800b6a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6a8:	623a      	str	r2, [r7, #32]
 800b6aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ac:	69f9      	ldr	r1, [r7, #28]
 800b6ae:	6a3a      	ldr	r2, [r7, #32]
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e5      	bne.n	800b688 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3758      	adds	r7, #88	; 0x58
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	0800b825 	.word	0x0800b825
 800b6cc:	0800b947 	.word	0x0800b947
 800b6d0:	0800b97f 	.word	0x0800b97f

0800b6d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b08f      	sub	sp, #60	; 0x3c
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e2:	6a3b      	ldr	r3, [r7, #32]
 800b6e4:	e853 3f00 	ldrex	r3, [r3]
 800b6e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b6f0:	637b      	str	r3, [r7, #52]	; 0x34
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6fc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b702:	e841 2300 	strex	r3, r2, [r1]
 800b706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1e6      	bne.n	800b6dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b724:	633b      	str	r3, [r7, #48]	; 0x30
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3308      	adds	r3, #8
 800b72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b72e:	61ba      	str	r2, [r7, #24]
 800b730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	6979      	ldr	r1, [r7, #20]
 800b734:	69ba      	ldr	r2, [r7, #24]
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	613b      	str	r3, [r7, #16]
   return(result);
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e5      	bne.n	800b70e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2220      	movs	r2, #32
 800b746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b74a:	bf00      	nop
 800b74c:	373c      	adds	r7, #60	; 0x3c
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
	...

0800b758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b758:	b480      	push	{r7}
 800b75a:	b095      	sub	sp, #84	; 0x54
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b768:	e853 3f00 	ldrex	r3, [r3]
 800b76c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b774:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	461a      	mov	r2, r3
 800b77c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b77e:	643b      	str	r3, [r7, #64]	; 0x40
 800b780:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b786:	e841 2300 	strex	r3, r2, [r1]
 800b78a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1e6      	bne.n	800b760 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3308      	adds	r3, #8
 800b798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	e853 3f00 	ldrex	r3, [r3]
 800b7a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7a2:	69fa      	ldr	r2, [r7, #28]
 800b7a4:	4b1e      	ldr	r3, [pc, #120]	; (800b820 <UART_EndRxTransfer+0xc8>)
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ba:	e841 2300 	strex	r3, r2, [r1]
 800b7be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1e5      	bne.n	800b792 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d118      	bne.n	800b800 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	e853 3f00 	ldrex	r3, [r3]
 800b7da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	f023 0310 	bic.w	r3, r3, #16
 800b7e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ec:	61bb      	str	r3, [r7, #24]
 800b7ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f0:	6979      	ldr	r1, [r7, #20]
 800b7f2:	69ba      	ldr	r2, [r7, #24]
 800b7f4:	e841 2300 	strex	r3, r2, [r1]
 800b7f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1e6      	bne.n	800b7ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2220      	movs	r2, #32
 800b804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b814:	bf00      	nop
 800b816:	3754      	adds	r7, #84	; 0x54
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	effffffe 	.word	0xeffffffe

0800b824 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b09c      	sub	sp, #112	; 0x70
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	69db      	ldr	r3, [r3, #28]
 800b836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b83a:	d071      	beq.n	800b920 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b83e:	2200      	movs	r2, #0
 800b840:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b84c:	e853 3f00 	ldrex	r3, [r3]
 800b850:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b858:	66bb      	str	r3, [r7, #104]	; 0x68
 800b85a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b862:	65bb      	str	r3, [r7, #88]	; 0x58
 800b864:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b86a:	e841 2300 	strex	r3, r2, [r1]
 800b86e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e6      	bne.n	800b844 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3308      	adds	r3, #8
 800b87c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	e853 3f00 	ldrex	r3, [r3]
 800b884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b888:	f023 0301 	bic.w	r3, r3, #1
 800b88c:	667b      	str	r3, [r7, #100]	; 0x64
 800b88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3308      	adds	r3, #8
 800b894:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b896:	647a      	str	r2, [r7, #68]	; 0x44
 800b898:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b89c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e5      	bne.n	800b876 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	623b      	str	r3, [r7, #32]
   return(result);
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8c0:	663b      	str	r3, [r7, #96]	; 0x60
 800b8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3308      	adds	r3, #8
 800b8c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b8ca:	633a      	str	r2, [r7, #48]	; 0x30
 800b8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e5      	bne.n	800b8aa <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d118      	bne.n	800b920 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	e853 3f00 	ldrex	r3, [r3]
 800b8fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f023 0310 	bic.w	r3, r3, #16
 800b902:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	461a      	mov	r2, r3
 800b90a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b90c:	61fb      	str	r3, [r7, #28]
 800b90e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	69b9      	ldr	r1, [r7, #24]
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	617b      	str	r3, [r7, #20]
   return(result);
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e6      	bne.n	800b8ee <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b924:	2b01      	cmp	r3, #1
 800b926:	d107      	bne.n	800b938 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b92a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b92e:	4619      	mov	r1, r3
 800b930:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b932:	f7f5 fceb 	bl	800130c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b936:	e002      	b.n	800b93e <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800b938:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b93a:	f7fe fee7 	bl	800a70c <HAL_UART_RxCpltCallback>
}
 800b93e:	bf00      	nop
 800b940:	3770      	adds	r7, #112	; 0x70
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b952:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d109      	bne.n	800b970 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b962:	085b      	lsrs	r3, r3, #1
 800b964:	b29b      	uxth	r3, r3
 800b966:	4619      	mov	r1, r3
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7f5 fccf 	bl	800130c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b96e:	e002      	b.n	800b976 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f7fe fed5 	bl	800a720 <HAL_UART_RxHalfCpltCallback>
}
 800b976:	bf00      	nop
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}

0800b97e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b97e:	b580      	push	{r7, lr}
 800b980:	b086      	sub	sp, #24
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b992:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b99a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a6:	2b80      	cmp	r3, #128	; 0x80
 800b9a8:	d109      	bne.n	800b9be <UART_DMAError+0x40>
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	2b21      	cmp	r3, #33	; 0x21
 800b9ae:	d106      	bne.n	800b9be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b9b0:	697b      	ldr	r3, [r7, #20]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b9b8:	6978      	ldr	r0, [r7, #20]
 800b9ba:	f7ff fe8b 	bl	800b6d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c8:	2b40      	cmp	r3, #64	; 0x40
 800b9ca:	d109      	bne.n	800b9e0 <UART_DMAError+0x62>
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b22      	cmp	r3, #34	; 0x22
 800b9d0:	d106      	bne.n	800b9e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b9da:	6978      	ldr	r0, [r7, #20]
 800b9dc:	f7ff febc 	bl	800b758 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9e6:	f043 0210 	orr.w	r2, r3, #16
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9f0:	6978      	ldr	r0, [r7, #20]
 800b9f2:	f7fe fe9f 	bl	800a734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9f6:	bf00      	nop
 800b9f8:	3718      	adds	r7, #24
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b084      	sub	sp, #16
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f7fe fe89 	bl	800a734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba22:	bf00      	nop
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b088      	sub	sp, #32
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	e853 3f00 	ldrex	r3, [r3]
 800ba3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba46:	61fb      	str	r3, [r7, #28]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	61bb      	str	r3, [r7, #24]
 800ba52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba54:	6979      	ldr	r1, [r7, #20]
 800ba56:	69ba      	ldr	r2, [r7, #24]
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e6      	bne.n	800ba32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2220      	movs	r2, #32
 800ba68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7fe fe40 	bl	800a6f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba78:	bf00      	nop
 800ba7a:	3720      	adds	r7, #32
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d101      	bne.n	800bad2 <HAL_UARTEx_DisableFifoMode+0x16>
 800bace:	2302      	movs	r3, #2
 800bad0:	e027      	b.n	800bb22 <HAL_UARTEx_DisableFifoMode+0x66>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2224      	movs	r2, #36	; 0x24
 800bade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f022 0201 	bic.w	r2, r2, #1
 800baf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bb00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2220      	movs	r2, #32
 800bb14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b084      	sub	sp, #16
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d101      	bne.n	800bb46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb42:	2302      	movs	r3, #2
 800bb44:	e02d      	b.n	800bba2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2224      	movs	r2, #36	; 0x24
 800bb52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f022 0201 	bic.w	r2, r2, #1
 800bb6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	683a      	ldr	r2, [r7, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f8ac 	bl	800bce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2220      	movs	r2, #32
 800bb94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d101      	bne.n	800bbc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	e02d      	b.n	800bc1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2224      	movs	r2, #36	; 0x24
 800bbce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f022 0201 	bic.w	r2, r2, #1
 800bbe8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	683a      	ldr	r2, [r7, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f86e 	bl	800bce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2220      	movs	r2, #32
 800bc10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2200      	movs	r2, #0
 800bc18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b08c      	sub	sp, #48	; 0x30
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	60f8      	str	r0, [r7, #12]
 800bc2e:	60b9      	str	r1, [r7, #8]
 800bc30:	4613      	mov	r3, r2
 800bc32:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc3a:	2b20      	cmp	r3, #32
 800bc3c:	d14a      	bne.n	800bcd4 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800bc44:	88fb      	ldrh	r3, [r7, #6]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e043      	b.n	800bcd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d101      	bne.n	800bc5c <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800bc58:	2302      	movs	r3, #2
 800bc5a:	e03c      	b.n	800bcd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2201      	movs	r2, #1
 800bc68:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bc6a:	88fb      	ldrh	r3, [r7, #6]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	68b9      	ldr	r1, [r7, #8]
 800bc70:	68f8      	ldr	r0, [r7, #12]
 800bc72:	f7ff fc87 	bl	800b584 <UART_Start_Receive_DMA>
 800bc76:	4603      	mov	r3, r0
 800bc78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bc7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d124      	bne.n	800bcce <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d11d      	bne.n	800bcc8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2210      	movs	r2, #16
 800bc92:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	e853 3f00 	ldrex	r3, [r3]
 800bca0:	617b      	str	r3, [r7, #20]
   return(result);
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f043 0310 	orr.w	r3, r3, #16
 800bca8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb2:	627b      	str	r3, [r7, #36]	; 0x24
 800bcb4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb6:	6a39      	ldr	r1, [r7, #32]
 800bcb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcba:	e841 2300 	strex	r3, r2, [r1]
 800bcbe:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d1e6      	bne.n	800bc94 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800bcc6:	e002      	b.n	800bcce <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800bcce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bcd2:	e000      	b.n	800bcd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800bcd4:	2302      	movs	r3, #2
  }
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3730      	adds	r7, #48	; 0x30
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d108      	bne.n	800bd02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd00:	e031      	b.n	800bd66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd02:	2310      	movs	r3, #16
 800bd04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd06:	2310      	movs	r3, #16
 800bd08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	0e5b      	lsrs	r3, r3, #25
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	f003 0307 	and.w	r3, r3, #7
 800bd18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	0f5b      	lsrs	r3, r3, #29
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	f003 0307 	and.w	r3, r3, #7
 800bd28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd2a:	7bbb      	ldrb	r3, [r7, #14]
 800bd2c:	7b3a      	ldrb	r2, [r7, #12]
 800bd2e:	4911      	ldr	r1, [pc, #68]	; (800bd74 <UARTEx_SetNbDataToProcess+0x94>)
 800bd30:	5c8a      	ldrb	r2, [r1, r2]
 800bd32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd36:	7b3a      	ldrb	r2, [r7, #12]
 800bd38:	490f      	ldr	r1, [pc, #60]	; (800bd78 <UARTEx_SetNbDataToProcess+0x98>)
 800bd3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	7b7a      	ldrb	r2, [r7, #13]
 800bd4c:	4909      	ldr	r1, [pc, #36]	; (800bd74 <UARTEx_SetNbDataToProcess+0x94>)
 800bd4e:	5c8a      	ldrb	r2, [r1, r2]
 800bd50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd54:	7b7a      	ldrb	r2, [r7, #13]
 800bd56:	4908      	ldr	r1, [pc, #32]	; (800bd78 <UARTEx_SetNbDataToProcess+0x98>)
 800bd58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bd66:	bf00      	nop
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
 800bd72:	bf00      	nop
 800bd74:	0800cfa4 	.word	0x0800cfa4
 800bd78:	0800cfac 	.word	0x0800cfac

0800bd7c <__errno>:
 800bd7c:	4b01      	ldr	r3, [pc, #4]	; (800bd84 <__errno+0x8>)
 800bd7e:	6818      	ldr	r0, [r3, #0]
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	24000010 	.word	0x24000010

0800bd88 <__libc_init_array>:
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	4d0d      	ldr	r5, [pc, #52]	; (800bdc0 <__libc_init_array+0x38>)
 800bd8c:	4c0d      	ldr	r4, [pc, #52]	; (800bdc4 <__libc_init_array+0x3c>)
 800bd8e:	1b64      	subs	r4, r4, r5
 800bd90:	10a4      	asrs	r4, r4, #2
 800bd92:	2600      	movs	r6, #0
 800bd94:	42a6      	cmp	r6, r4
 800bd96:	d109      	bne.n	800bdac <__libc_init_array+0x24>
 800bd98:	4d0b      	ldr	r5, [pc, #44]	; (800bdc8 <__libc_init_array+0x40>)
 800bd9a:	4c0c      	ldr	r4, [pc, #48]	; (800bdcc <__libc_init_array+0x44>)
 800bd9c:	f000 ffbc 	bl	800cd18 <_init>
 800bda0:	1b64      	subs	r4, r4, r5
 800bda2:	10a4      	asrs	r4, r4, #2
 800bda4:	2600      	movs	r6, #0
 800bda6:	42a6      	cmp	r6, r4
 800bda8:	d105      	bne.n	800bdb6 <__libc_init_array+0x2e>
 800bdaa:	bd70      	pop	{r4, r5, r6, pc}
 800bdac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb0:	4798      	blx	r3
 800bdb2:	3601      	adds	r6, #1
 800bdb4:	e7ee      	b.n	800bd94 <__libc_init_array+0xc>
 800bdb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdba:	4798      	blx	r3
 800bdbc:	3601      	adds	r6, #1
 800bdbe:	e7f2      	b.n	800bda6 <__libc_init_array+0x1e>
 800bdc0:	0800d054 	.word	0x0800d054
 800bdc4:	0800d054 	.word	0x0800d054
 800bdc8:	0800d054 	.word	0x0800d054
 800bdcc:	0800d058 	.word	0x0800d058

0800bdd0 <memcpy>:
 800bdd0:	440a      	add	r2, r1
 800bdd2:	4291      	cmp	r1, r2
 800bdd4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdd8:	d100      	bne.n	800bddc <memcpy+0xc>
 800bdda:	4770      	bx	lr
 800bddc:	b510      	push	{r4, lr}
 800bdde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bde2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bde6:	4291      	cmp	r1, r2
 800bde8:	d1f9      	bne.n	800bdde <memcpy+0xe>
 800bdea:	bd10      	pop	{r4, pc}

0800bdec <memset>:
 800bdec:	4402      	add	r2, r0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d100      	bne.n	800bdf6 <memset+0xa>
 800bdf4:	4770      	bx	lr
 800bdf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bdfa:	e7f9      	b.n	800bdf0 <memset+0x4>

0800bdfc <iprintf>:
 800bdfc:	b40f      	push	{r0, r1, r2, r3}
 800bdfe:	4b0a      	ldr	r3, [pc, #40]	; (800be28 <iprintf+0x2c>)
 800be00:	b513      	push	{r0, r1, r4, lr}
 800be02:	681c      	ldr	r4, [r3, #0]
 800be04:	b124      	cbz	r4, 800be10 <iprintf+0x14>
 800be06:	69a3      	ldr	r3, [r4, #24]
 800be08:	b913      	cbnz	r3, 800be10 <iprintf+0x14>
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 f866 	bl	800bedc <__sinit>
 800be10:	ab05      	add	r3, sp, #20
 800be12:	9a04      	ldr	r2, [sp, #16]
 800be14:	68a1      	ldr	r1, [r4, #8]
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	4620      	mov	r0, r4
 800be1a:	f000 f9bd 	bl	800c198 <_vfiprintf_r>
 800be1e:	b002      	add	sp, #8
 800be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be24:	b004      	add	sp, #16
 800be26:	4770      	bx	lr
 800be28:	24000010 	.word	0x24000010

0800be2c <std>:
 800be2c:	2300      	movs	r3, #0
 800be2e:	b510      	push	{r4, lr}
 800be30:	4604      	mov	r4, r0
 800be32:	e9c0 3300 	strd	r3, r3, [r0]
 800be36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be3a:	6083      	str	r3, [r0, #8]
 800be3c:	8181      	strh	r1, [r0, #12]
 800be3e:	6643      	str	r3, [r0, #100]	; 0x64
 800be40:	81c2      	strh	r2, [r0, #14]
 800be42:	6183      	str	r3, [r0, #24]
 800be44:	4619      	mov	r1, r3
 800be46:	2208      	movs	r2, #8
 800be48:	305c      	adds	r0, #92	; 0x5c
 800be4a:	f7ff ffcf 	bl	800bdec <memset>
 800be4e:	4b05      	ldr	r3, [pc, #20]	; (800be64 <std+0x38>)
 800be50:	6263      	str	r3, [r4, #36]	; 0x24
 800be52:	4b05      	ldr	r3, [pc, #20]	; (800be68 <std+0x3c>)
 800be54:	62a3      	str	r3, [r4, #40]	; 0x28
 800be56:	4b05      	ldr	r3, [pc, #20]	; (800be6c <std+0x40>)
 800be58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be5a:	4b05      	ldr	r3, [pc, #20]	; (800be70 <std+0x44>)
 800be5c:	6224      	str	r4, [r4, #32]
 800be5e:	6323      	str	r3, [r4, #48]	; 0x30
 800be60:	bd10      	pop	{r4, pc}
 800be62:	bf00      	nop
 800be64:	0800c741 	.word	0x0800c741
 800be68:	0800c763 	.word	0x0800c763
 800be6c:	0800c79b 	.word	0x0800c79b
 800be70:	0800c7bf 	.word	0x0800c7bf

0800be74 <_cleanup_r>:
 800be74:	4901      	ldr	r1, [pc, #4]	; (800be7c <_cleanup_r+0x8>)
 800be76:	f000 b8af 	b.w	800bfd8 <_fwalk_reent>
 800be7a:	bf00      	nop
 800be7c:	0800ca99 	.word	0x0800ca99

0800be80 <__sfmoreglue>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	2268      	movs	r2, #104	; 0x68
 800be84:	1e4d      	subs	r5, r1, #1
 800be86:	4355      	muls	r5, r2
 800be88:	460e      	mov	r6, r1
 800be8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be8e:	f000 f8e5 	bl	800c05c <_malloc_r>
 800be92:	4604      	mov	r4, r0
 800be94:	b140      	cbz	r0, 800bea8 <__sfmoreglue+0x28>
 800be96:	2100      	movs	r1, #0
 800be98:	e9c0 1600 	strd	r1, r6, [r0]
 800be9c:	300c      	adds	r0, #12
 800be9e:	60a0      	str	r0, [r4, #8]
 800bea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bea4:	f7ff ffa2 	bl	800bdec <memset>
 800bea8:	4620      	mov	r0, r4
 800beaa:	bd70      	pop	{r4, r5, r6, pc}

0800beac <__sfp_lock_acquire>:
 800beac:	4801      	ldr	r0, [pc, #4]	; (800beb4 <__sfp_lock_acquire+0x8>)
 800beae:	f000 b8b3 	b.w	800c018 <__retarget_lock_acquire_recursive>
 800beb2:	bf00      	nop
 800beb4:	24000531 	.word	0x24000531

0800beb8 <__sfp_lock_release>:
 800beb8:	4801      	ldr	r0, [pc, #4]	; (800bec0 <__sfp_lock_release+0x8>)
 800beba:	f000 b8ae 	b.w	800c01a <__retarget_lock_release_recursive>
 800bebe:	bf00      	nop
 800bec0:	24000531 	.word	0x24000531

0800bec4 <__sinit_lock_acquire>:
 800bec4:	4801      	ldr	r0, [pc, #4]	; (800becc <__sinit_lock_acquire+0x8>)
 800bec6:	f000 b8a7 	b.w	800c018 <__retarget_lock_acquire_recursive>
 800beca:	bf00      	nop
 800becc:	24000532 	.word	0x24000532

0800bed0 <__sinit_lock_release>:
 800bed0:	4801      	ldr	r0, [pc, #4]	; (800bed8 <__sinit_lock_release+0x8>)
 800bed2:	f000 b8a2 	b.w	800c01a <__retarget_lock_release_recursive>
 800bed6:	bf00      	nop
 800bed8:	24000532 	.word	0x24000532

0800bedc <__sinit>:
 800bedc:	b510      	push	{r4, lr}
 800bede:	4604      	mov	r4, r0
 800bee0:	f7ff fff0 	bl	800bec4 <__sinit_lock_acquire>
 800bee4:	69a3      	ldr	r3, [r4, #24]
 800bee6:	b11b      	cbz	r3, 800bef0 <__sinit+0x14>
 800bee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beec:	f7ff bff0 	b.w	800bed0 <__sinit_lock_release>
 800bef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bef4:	6523      	str	r3, [r4, #80]	; 0x50
 800bef6:	4b13      	ldr	r3, [pc, #76]	; (800bf44 <__sinit+0x68>)
 800bef8:	4a13      	ldr	r2, [pc, #76]	; (800bf48 <__sinit+0x6c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	62a2      	str	r2, [r4, #40]	; 0x28
 800befe:	42a3      	cmp	r3, r4
 800bf00:	bf04      	itt	eq
 800bf02:	2301      	moveq	r3, #1
 800bf04:	61a3      	streq	r3, [r4, #24]
 800bf06:	4620      	mov	r0, r4
 800bf08:	f000 f820 	bl	800bf4c <__sfp>
 800bf0c:	6060      	str	r0, [r4, #4]
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 f81c 	bl	800bf4c <__sfp>
 800bf14:	60a0      	str	r0, [r4, #8]
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 f818 	bl	800bf4c <__sfp>
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	60e0      	str	r0, [r4, #12]
 800bf20:	2104      	movs	r1, #4
 800bf22:	6860      	ldr	r0, [r4, #4]
 800bf24:	f7ff ff82 	bl	800be2c <std>
 800bf28:	68a0      	ldr	r0, [r4, #8]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	2109      	movs	r1, #9
 800bf2e:	f7ff ff7d 	bl	800be2c <std>
 800bf32:	68e0      	ldr	r0, [r4, #12]
 800bf34:	2202      	movs	r2, #2
 800bf36:	2112      	movs	r1, #18
 800bf38:	f7ff ff78 	bl	800be2c <std>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	61a3      	str	r3, [r4, #24]
 800bf40:	e7d2      	b.n	800bee8 <__sinit+0xc>
 800bf42:	bf00      	nop
 800bf44:	0800cfb4 	.word	0x0800cfb4
 800bf48:	0800be75 	.word	0x0800be75

0800bf4c <__sfp>:
 800bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4e:	4607      	mov	r7, r0
 800bf50:	f7ff ffac 	bl	800beac <__sfp_lock_acquire>
 800bf54:	4b1e      	ldr	r3, [pc, #120]	; (800bfd0 <__sfp+0x84>)
 800bf56:	681e      	ldr	r6, [r3, #0]
 800bf58:	69b3      	ldr	r3, [r6, #24]
 800bf5a:	b913      	cbnz	r3, 800bf62 <__sfp+0x16>
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	f7ff ffbd 	bl	800bedc <__sinit>
 800bf62:	3648      	adds	r6, #72	; 0x48
 800bf64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	d503      	bpl.n	800bf74 <__sfp+0x28>
 800bf6c:	6833      	ldr	r3, [r6, #0]
 800bf6e:	b30b      	cbz	r3, 800bfb4 <__sfp+0x68>
 800bf70:	6836      	ldr	r6, [r6, #0]
 800bf72:	e7f7      	b.n	800bf64 <__sfp+0x18>
 800bf74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf78:	b9d5      	cbnz	r5, 800bfb0 <__sfp+0x64>
 800bf7a:	4b16      	ldr	r3, [pc, #88]	; (800bfd4 <__sfp+0x88>)
 800bf7c:	60e3      	str	r3, [r4, #12]
 800bf7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf82:	6665      	str	r5, [r4, #100]	; 0x64
 800bf84:	f000 f847 	bl	800c016 <__retarget_lock_init_recursive>
 800bf88:	f7ff ff96 	bl	800beb8 <__sfp_lock_release>
 800bf8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf94:	6025      	str	r5, [r4, #0]
 800bf96:	61a5      	str	r5, [r4, #24]
 800bf98:	2208      	movs	r2, #8
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfa0:	f7ff ff24 	bl	800bdec <memset>
 800bfa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfac:	4620      	mov	r0, r4
 800bfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb0:	3468      	adds	r4, #104	; 0x68
 800bfb2:	e7d9      	b.n	800bf68 <__sfp+0x1c>
 800bfb4:	2104      	movs	r1, #4
 800bfb6:	4638      	mov	r0, r7
 800bfb8:	f7ff ff62 	bl	800be80 <__sfmoreglue>
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	6030      	str	r0, [r6, #0]
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	d1d5      	bne.n	800bf70 <__sfp+0x24>
 800bfc4:	f7ff ff78 	bl	800beb8 <__sfp_lock_release>
 800bfc8:	230c      	movs	r3, #12
 800bfca:	603b      	str	r3, [r7, #0]
 800bfcc:	e7ee      	b.n	800bfac <__sfp+0x60>
 800bfce:	bf00      	nop
 800bfd0:	0800cfb4 	.word	0x0800cfb4
 800bfd4:	ffff0001 	.word	0xffff0001

0800bfd8 <_fwalk_reent>:
 800bfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfdc:	4606      	mov	r6, r0
 800bfde:	4688      	mov	r8, r1
 800bfe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfe4:	2700      	movs	r7, #0
 800bfe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfea:	f1b9 0901 	subs.w	r9, r9, #1
 800bfee:	d505      	bpl.n	800bffc <_fwalk_reent+0x24>
 800bff0:	6824      	ldr	r4, [r4, #0]
 800bff2:	2c00      	cmp	r4, #0
 800bff4:	d1f7      	bne.n	800bfe6 <_fwalk_reent+0xe>
 800bff6:	4638      	mov	r0, r7
 800bff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bffc:	89ab      	ldrh	r3, [r5, #12]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d907      	bls.n	800c012 <_fwalk_reent+0x3a>
 800c002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c006:	3301      	adds	r3, #1
 800c008:	d003      	beq.n	800c012 <_fwalk_reent+0x3a>
 800c00a:	4629      	mov	r1, r5
 800c00c:	4630      	mov	r0, r6
 800c00e:	47c0      	blx	r8
 800c010:	4307      	orrs	r7, r0
 800c012:	3568      	adds	r5, #104	; 0x68
 800c014:	e7e9      	b.n	800bfea <_fwalk_reent+0x12>

0800c016 <__retarget_lock_init_recursive>:
 800c016:	4770      	bx	lr

0800c018 <__retarget_lock_acquire_recursive>:
 800c018:	4770      	bx	lr

0800c01a <__retarget_lock_release_recursive>:
 800c01a:	4770      	bx	lr

0800c01c <sbrk_aligned>:
 800c01c:	b570      	push	{r4, r5, r6, lr}
 800c01e:	4e0e      	ldr	r6, [pc, #56]	; (800c058 <sbrk_aligned+0x3c>)
 800c020:	460c      	mov	r4, r1
 800c022:	6831      	ldr	r1, [r6, #0]
 800c024:	4605      	mov	r5, r0
 800c026:	b911      	cbnz	r1, 800c02e <sbrk_aligned+0x12>
 800c028:	f000 fb7a 	bl	800c720 <_sbrk_r>
 800c02c:	6030      	str	r0, [r6, #0]
 800c02e:	4621      	mov	r1, r4
 800c030:	4628      	mov	r0, r5
 800c032:	f000 fb75 	bl	800c720 <_sbrk_r>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	d00a      	beq.n	800c050 <sbrk_aligned+0x34>
 800c03a:	1cc4      	adds	r4, r0, #3
 800c03c:	f024 0403 	bic.w	r4, r4, #3
 800c040:	42a0      	cmp	r0, r4
 800c042:	d007      	beq.n	800c054 <sbrk_aligned+0x38>
 800c044:	1a21      	subs	r1, r4, r0
 800c046:	4628      	mov	r0, r5
 800c048:	f000 fb6a 	bl	800c720 <_sbrk_r>
 800c04c:	3001      	adds	r0, #1
 800c04e:	d101      	bne.n	800c054 <sbrk_aligned+0x38>
 800c050:	f04f 34ff 	mov.w	r4, #4294967295
 800c054:	4620      	mov	r0, r4
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	24000538 	.word	0x24000538

0800c05c <_malloc_r>:
 800c05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c060:	1ccd      	adds	r5, r1, #3
 800c062:	f025 0503 	bic.w	r5, r5, #3
 800c066:	3508      	adds	r5, #8
 800c068:	2d0c      	cmp	r5, #12
 800c06a:	bf38      	it	cc
 800c06c:	250c      	movcc	r5, #12
 800c06e:	2d00      	cmp	r5, #0
 800c070:	4607      	mov	r7, r0
 800c072:	db01      	blt.n	800c078 <_malloc_r+0x1c>
 800c074:	42a9      	cmp	r1, r5
 800c076:	d905      	bls.n	800c084 <_malloc_r+0x28>
 800c078:	230c      	movs	r3, #12
 800c07a:	603b      	str	r3, [r7, #0]
 800c07c:	2600      	movs	r6, #0
 800c07e:	4630      	mov	r0, r6
 800c080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c084:	4e2e      	ldr	r6, [pc, #184]	; (800c140 <_malloc_r+0xe4>)
 800c086:	f000 fdbb 	bl	800cc00 <__malloc_lock>
 800c08a:	6833      	ldr	r3, [r6, #0]
 800c08c:	461c      	mov	r4, r3
 800c08e:	bb34      	cbnz	r4, 800c0de <_malloc_r+0x82>
 800c090:	4629      	mov	r1, r5
 800c092:	4638      	mov	r0, r7
 800c094:	f7ff ffc2 	bl	800c01c <sbrk_aligned>
 800c098:	1c43      	adds	r3, r0, #1
 800c09a:	4604      	mov	r4, r0
 800c09c:	d14d      	bne.n	800c13a <_malloc_r+0xde>
 800c09e:	6834      	ldr	r4, [r6, #0]
 800c0a0:	4626      	mov	r6, r4
 800c0a2:	2e00      	cmp	r6, #0
 800c0a4:	d140      	bne.n	800c128 <_malloc_r+0xcc>
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	eb04 0803 	add.w	r8, r4, r3
 800c0b0:	f000 fb36 	bl	800c720 <_sbrk_r>
 800c0b4:	4580      	cmp	r8, r0
 800c0b6:	d13a      	bne.n	800c12e <_malloc_r+0xd2>
 800c0b8:	6821      	ldr	r1, [r4, #0]
 800c0ba:	3503      	adds	r5, #3
 800c0bc:	1a6d      	subs	r5, r5, r1
 800c0be:	f025 0503 	bic.w	r5, r5, #3
 800c0c2:	3508      	adds	r5, #8
 800c0c4:	2d0c      	cmp	r5, #12
 800c0c6:	bf38      	it	cc
 800c0c8:	250c      	movcc	r5, #12
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	4638      	mov	r0, r7
 800c0ce:	f7ff ffa5 	bl	800c01c <sbrk_aligned>
 800c0d2:	3001      	adds	r0, #1
 800c0d4:	d02b      	beq.n	800c12e <_malloc_r+0xd2>
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	442b      	add	r3, r5
 800c0da:	6023      	str	r3, [r4, #0]
 800c0dc:	e00e      	b.n	800c0fc <_malloc_r+0xa0>
 800c0de:	6822      	ldr	r2, [r4, #0]
 800c0e0:	1b52      	subs	r2, r2, r5
 800c0e2:	d41e      	bmi.n	800c122 <_malloc_r+0xc6>
 800c0e4:	2a0b      	cmp	r2, #11
 800c0e6:	d916      	bls.n	800c116 <_malloc_r+0xba>
 800c0e8:	1961      	adds	r1, r4, r5
 800c0ea:	42a3      	cmp	r3, r4
 800c0ec:	6025      	str	r5, [r4, #0]
 800c0ee:	bf18      	it	ne
 800c0f0:	6059      	strne	r1, [r3, #4]
 800c0f2:	6863      	ldr	r3, [r4, #4]
 800c0f4:	bf08      	it	eq
 800c0f6:	6031      	streq	r1, [r6, #0]
 800c0f8:	5162      	str	r2, [r4, r5]
 800c0fa:	604b      	str	r3, [r1, #4]
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	f104 060b 	add.w	r6, r4, #11
 800c102:	f000 fd83 	bl	800cc0c <__malloc_unlock>
 800c106:	f026 0607 	bic.w	r6, r6, #7
 800c10a:	1d23      	adds	r3, r4, #4
 800c10c:	1af2      	subs	r2, r6, r3
 800c10e:	d0b6      	beq.n	800c07e <_malloc_r+0x22>
 800c110:	1b9b      	subs	r3, r3, r6
 800c112:	50a3      	str	r3, [r4, r2]
 800c114:	e7b3      	b.n	800c07e <_malloc_r+0x22>
 800c116:	6862      	ldr	r2, [r4, #4]
 800c118:	42a3      	cmp	r3, r4
 800c11a:	bf0c      	ite	eq
 800c11c:	6032      	streq	r2, [r6, #0]
 800c11e:	605a      	strne	r2, [r3, #4]
 800c120:	e7ec      	b.n	800c0fc <_malloc_r+0xa0>
 800c122:	4623      	mov	r3, r4
 800c124:	6864      	ldr	r4, [r4, #4]
 800c126:	e7b2      	b.n	800c08e <_malloc_r+0x32>
 800c128:	4634      	mov	r4, r6
 800c12a:	6876      	ldr	r6, [r6, #4]
 800c12c:	e7b9      	b.n	800c0a2 <_malloc_r+0x46>
 800c12e:	230c      	movs	r3, #12
 800c130:	603b      	str	r3, [r7, #0]
 800c132:	4638      	mov	r0, r7
 800c134:	f000 fd6a 	bl	800cc0c <__malloc_unlock>
 800c138:	e7a1      	b.n	800c07e <_malloc_r+0x22>
 800c13a:	6025      	str	r5, [r4, #0]
 800c13c:	e7de      	b.n	800c0fc <_malloc_r+0xa0>
 800c13e:	bf00      	nop
 800c140:	24000534 	.word	0x24000534

0800c144 <__sfputc_r>:
 800c144:	6893      	ldr	r3, [r2, #8]
 800c146:	3b01      	subs	r3, #1
 800c148:	2b00      	cmp	r3, #0
 800c14a:	b410      	push	{r4}
 800c14c:	6093      	str	r3, [r2, #8]
 800c14e:	da08      	bge.n	800c162 <__sfputc_r+0x1e>
 800c150:	6994      	ldr	r4, [r2, #24]
 800c152:	42a3      	cmp	r3, r4
 800c154:	db01      	blt.n	800c15a <__sfputc_r+0x16>
 800c156:	290a      	cmp	r1, #10
 800c158:	d103      	bne.n	800c162 <__sfputc_r+0x1e>
 800c15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c15e:	f000 bb33 	b.w	800c7c8 <__swbuf_r>
 800c162:	6813      	ldr	r3, [r2, #0]
 800c164:	1c58      	adds	r0, r3, #1
 800c166:	6010      	str	r0, [r2, #0]
 800c168:	7019      	strb	r1, [r3, #0]
 800c16a:	4608      	mov	r0, r1
 800c16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <__sfputs_r>:
 800c172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c174:	4606      	mov	r6, r0
 800c176:	460f      	mov	r7, r1
 800c178:	4614      	mov	r4, r2
 800c17a:	18d5      	adds	r5, r2, r3
 800c17c:	42ac      	cmp	r4, r5
 800c17e:	d101      	bne.n	800c184 <__sfputs_r+0x12>
 800c180:	2000      	movs	r0, #0
 800c182:	e007      	b.n	800c194 <__sfputs_r+0x22>
 800c184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c188:	463a      	mov	r2, r7
 800c18a:	4630      	mov	r0, r6
 800c18c:	f7ff ffda 	bl	800c144 <__sfputc_r>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d1f3      	bne.n	800c17c <__sfputs_r+0xa>
 800c194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c198 <_vfiprintf_r>:
 800c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	460d      	mov	r5, r1
 800c19e:	b09d      	sub	sp, #116	; 0x74
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	4698      	mov	r8, r3
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	b118      	cbz	r0, 800c1b0 <_vfiprintf_r+0x18>
 800c1a8:	6983      	ldr	r3, [r0, #24]
 800c1aa:	b90b      	cbnz	r3, 800c1b0 <_vfiprintf_r+0x18>
 800c1ac:	f7ff fe96 	bl	800bedc <__sinit>
 800c1b0:	4b89      	ldr	r3, [pc, #548]	; (800c3d8 <_vfiprintf_r+0x240>)
 800c1b2:	429d      	cmp	r5, r3
 800c1b4:	d11b      	bne.n	800c1ee <_vfiprintf_r+0x56>
 800c1b6:	6875      	ldr	r5, [r6, #4]
 800c1b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1ba:	07d9      	lsls	r1, r3, #31
 800c1bc:	d405      	bmi.n	800c1ca <_vfiprintf_r+0x32>
 800c1be:	89ab      	ldrh	r3, [r5, #12]
 800c1c0:	059a      	lsls	r2, r3, #22
 800c1c2:	d402      	bmi.n	800c1ca <_vfiprintf_r+0x32>
 800c1c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1c6:	f7ff ff27 	bl	800c018 <__retarget_lock_acquire_recursive>
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	071b      	lsls	r3, r3, #28
 800c1ce:	d501      	bpl.n	800c1d4 <_vfiprintf_r+0x3c>
 800c1d0:	692b      	ldr	r3, [r5, #16]
 800c1d2:	b9eb      	cbnz	r3, 800c210 <_vfiprintf_r+0x78>
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	f000 fb5a 	bl	800c890 <__swsetup_r>
 800c1dc:	b1c0      	cbz	r0, 800c210 <_vfiprintf_r+0x78>
 800c1de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1e0:	07dc      	lsls	r4, r3, #31
 800c1e2:	d50e      	bpl.n	800c202 <_vfiprintf_r+0x6a>
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	b01d      	add	sp, #116	; 0x74
 800c1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ee:	4b7b      	ldr	r3, [pc, #492]	; (800c3dc <_vfiprintf_r+0x244>)
 800c1f0:	429d      	cmp	r5, r3
 800c1f2:	d101      	bne.n	800c1f8 <_vfiprintf_r+0x60>
 800c1f4:	68b5      	ldr	r5, [r6, #8]
 800c1f6:	e7df      	b.n	800c1b8 <_vfiprintf_r+0x20>
 800c1f8:	4b79      	ldr	r3, [pc, #484]	; (800c3e0 <_vfiprintf_r+0x248>)
 800c1fa:	429d      	cmp	r5, r3
 800c1fc:	bf08      	it	eq
 800c1fe:	68f5      	ldreq	r5, [r6, #12]
 800c200:	e7da      	b.n	800c1b8 <_vfiprintf_r+0x20>
 800c202:	89ab      	ldrh	r3, [r5, #12]
 800c204:	0598      	lsls	r0, r3, #22
 800c206:	d4ed      	bmi.n	800c1e4 <_vfiprintf_r+0x4c>
 800c208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c20a:	f7ff ff06 	bl	800c01a <__retarget_lock_release_recursive>
 800c20e:	e7e9      	b.n	800c1e4 <_vfiprintf_r+0x4c>
 800c210:	2300      	movs	r3, #0
 800c212:	9309      	str	r3, [sp, #36]	; 0x24
 800c214:	2320      	movs	r3, #32
 800c216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c21e:	2330      	movs	r3, #48	; 0x30
 800c220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c3e4 <_vfiprintf_r+0x24c>
 800c224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c228:	f04f 0901 	mov.w	r9, #1
 800c22c:	4623      	mov	r3, r4
 800c22e:	469a      	mov	sl, r3
 800c230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c234:	b10a      	cbz	r2, 800c23a <_vfiprintf_r+0xa2>
 800c236:	2a25      	cmp	r2, #37	; 0x25
 800c238:	d1f9      	bne.n	800c22e <_vfiprintf_r+0x96>
 800c23a:	ebba 0b04 	subs.w	fp, sl, r4
 800c23e:	d00b      	beq.n	800c258 <_vfiprintf_r+0xc0>
 800c240:	465b      	mov	r3, fp
 800c242:	4622      	mov	r2, r4
 800c244:	4629      	mov	r1, r5
 800c246:	4630      	mov	r0, r6
 800c248:	f7ff ff93 	bl	800c172 <__sfputs_r>
 800c24c:	3001      	adds	r0, #1
 800c24e:	f000 80aa 	beq.w	800c3a6 <_vfiprintf_r+0x20e>
 800c252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c254:	445a      	add	r2, fp
 800c256:	9209      	str	r2, [sp, #36]	; 0x24
 800c258:	f89a 3000 	ldrb.w	r3, [sl]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f000 80a2 	beq.w	800c3a6 <_vfiprintf_r+0x20e>
 800c262:	2300      	movs	r3, #0
 800c264:	f04f 32ff 	mov.w	r2, #4294967295
 800c268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c26c:	f10a 0a01 	add.w	sl, sl, #1
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	9307      	str	r3, [sp, #28]
 800c274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c278:	931a      	str	r3, [sp, #104]	; 0x68
 800c27a:	4654      	mov	r4, sl
 800c27c:	2205      	movs	r2, #5
 800c27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c282:	4858      	ldr	r0, [pc, #352]	; (800c3e4 <_vfiprintf_r+0x24c>)
 800c284:	f7f4 f82c 	bl	80002e0 <memchr>
 800c288:	9a04      	ldr	r2, [sp, #16]
 800c28a:	b9d8      	cbnz	r0, 800c2c4 <_vfiprintf_r+0x12c>
 800c28c:	06d1      	lsls	r1, r2, #27
 800c28e:	bf44      	itt	mi
 800c290:	2320      	movmi	r3, #32
 800c292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c296:	0713      	lsls	r3, r2, #28
 800c298:	bf44      	itt	mi
 800c29a:	232b      	movmi	r3, #43	; 0x2b
 800c29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a6:	d015      	beq.n	800c2d4 <_vfiprintf_r+0x13c>
 800c2a8:	9a07      	ldr	r2, [sp, #28]
 800c2aa:	4654      	mov	r4, sl
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	f04f 0c0a 	mov.w	ip, #10
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b8:	3b30      	subs	r3, #48	; 0x30
 800c2ba:	2b09      	cmp	r3, #9
 800c2bc:	d94e      	bls.n	800c35c <_vfiprintf_r+0x1c4>
 800c2be:	b1b0      	cbz	r0, 800c2ee <_vfiprintf_r+0x156>
 800c2c0:	9207      	str	r2, [sp, #28]
 800c2c2:	e014      	b.n	800c2ee <_vfiprintf_r+0x156>
 800c2c4:	eba0 0308 	sub.w	r3, r0, r8
 800c2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	9304      	str	r3, [sp, #16]
 800c2d0:	46a2      	mov	sl, r4
 800c2d2:	e7d2      	b.n	800c27a <_vfiprintf_r+0xe2>
 800c2d4:	9b03      	ldr	r3, [sp, #12]
 800c2d6:	1d19      	adds	r1, r3, #4
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	9103      	str	r1, [sp, #12]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	bfbb      	ittet	lt
 800c2e0:	425b      	neglt	r3, r3
 800c2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800c2e6:	9307      	strge	r3, [sp, #28]
 800c2e8:	9307      	strlt	r3, [sp, #28]
 800c2ea:	bfb8      	it	lt
 800c2ec:	9204      	strlt	r2, [sp, #16]
 800c2ee:	7823      	ldrb	r3, [r4, #0]
 800c2f0:	2b2e      	cmp	r3, #46	; 0x2e
 800c2f2:	d10c      	bne.n	800c30e <_vfiprintf_r+0x176>
 800c2f4:	7863      	ldrb	r3, [r4, #1]
 800c2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2f8:	d135      	bne.n	800c366 <_vfiprintf_r+0x1ce>
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	1d1a      	adds	r2, r3, #4
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	9203      	str	r2, [sp, #12]
 800c302:	2b00      	cmp	r3, #0
 800c304:	bfb8      	it	lt
 800c306:	f04f 33ff 	movlt.w	r3, #4294967295
 800c30a:	3402      	adds	r4, #2
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c3f4 <_vfiprintf_r+0x25c>
 800c312:	7821      	ldrb	r1, [r4, #0]
 800c314:	2203      	movs	r2, #3
 800c316:	4650      	mov	r0, sl
 800c318:	f7f3 ffe2 	bl	80002e0 <memchr>
 800c31c:	b140      	cbz	r0, 800c330 <_vfiprintf_r+0x198>
 800c31e:	2340      	movs	r3, #64	; 0x40
 800c320:	eba0 000a 	sub.w	r0, r0, sl
 800c324:	fa03 f000 	lsl.w	r0, r3, r0
 800c328:	9b04      	ldr	r3, [sp, #16]
 800c32a:	4303      	orrs	r3, r0
 800c32c:	3401      	adds	r4, #1
 800c32e:	9304      	str	r3, [sp, #16]
 800c330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c334:	482c      	ldr	r0, [pc, #176]	; (800c3e8 <_vfiprintf_r+0x250>)
 800c336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c33a:	2206      	movs	r2, #6
 800c33c:	f7f3 ffd0 	bl	80002e0 <memchr>
 800c340:	2800      	cmp	r0, #0
 800c342:	d03f      	beq.n	800c3c4 <_vfiprintf_r+0x22c>
 800c344:	4b29      	ldr	r3, [pc, #164]	; (800c3ec <_vfiprintf_r+0x254>)
 800c346:	bb1b      	cbnz	r3, 800c390 <_vfiprintf_r+0x1f8>
 800c348:	9b03      	ldr	r3, [sp, #12]
 800c34a:	3307      	adds	r3, #7
 800c34c:	f023 0307 	bic.w	r3, r3, #7
 800c350:	3308      	adds	r3, #8
 800c352:	9303      	str	r3, [sp, #12]
 800c354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c356:	443b      	add	r3, r7
 800c358:	9309      	str	r3, [sp, #36]	; 0x24
 800c35a:	e767      	b.n	800c22c <_vfiprintf_r+0x94>
 800c35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c360:	460c      	mov	r4, r1
 800c362:	2001      	movs	r0, #1
 800c364:	e7a5      	b.n	800c2b2 <_vfiprintf_r+0x11a>
 800c366:	2300      	movs	r3, #0
 800c368:	3401      	adds	r4, #1
 800c36a:	9305      	str	r3, [sp, #20]
 800c36c:	4619      	mov	r1, r3
 800c36e:	f04f 0c0a 	mov.w	ip, #10
 800c372:	4620      	mov	r0, r4
 800c374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c378:	3a30      	subs	r2, #48	; 0x30
 800c37a:	2a09      	cmp	r2, #9
 800c37c:	d903      	bls.n	800c386 <_vfiprintf_r+0x1ee>
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0c5      	beq.n	800c30e <_vfiprintf_r+0x176>
 800c382:	9105      	str	r1, [sp, #20]
 800c384:	e7c3      	b.n	800c30e <_vfiprintf_r+0x176>
 800c386:	fb0c 2101 	mla	r1, ip, r1, r2
 800c38a:	4604      	mov	r4, r0
 800c38c:	2301      	movs	r3, #1
 800c38e:	e7f0      	b.n	800c372 <_vfiprintf_r+0x1da>
 800c390:	ab03      	add	r3, sp, #12
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	462a      	mov	r2, r5
 800c396:	4b16      	ldr	r3, [pc, #88]	; (800c3f0 <_vfiprintf_r+0x258>)
 800c398:	a904      	add	r1, sp, #16
 800c39a:	4630      	mov	r0, r6
 800c39c:	f3af 8000 	nop.w
 800c3a0:	4607      	mov	r7, r0
 800c3a2:	1c78      	adds	r0, r7, #1
 800c3a4:	d1d6      	bne.n	800c354 <_vfiprintf_r+0x1bc>
 800c3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3a8:	07d9      	lsls	r1, r3, #31
 800c3aa:	d405      	bmi.n	800c3b8 <_vfiprintf_r+0x220>
 800c3ac:	89ab      	ldrh	r3, [r5, #12]
 800c3ae:	059a      	lsls	r2, r3, #22
 800c3b0:	d402      	bmi.n	800c3b8 <_vfiprintf_r+0x220>
 800c3b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3b4:	f7ff fe31 	bl	800c01a <__retarget_lock_release_recursive>
 800c3b8:	89ab      	ldrh	r3, [r5, #12]
 800c3ba:	065b      	lsls	r3, r3, #25
 800c3bc:	f53f af12 	bmi.w	800c1e4 <_vfiprintf_r+0x4c>
 800c3c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3c2:	e711      	b.n	800c1e8 <_vfiprintf_r+0x50>
 800c3c4:	ab03      	add	r3, sp, #12
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	462a      	mov	r2, r5
 800c3ca:	4b09      	ldr	r3, [pc, #36]	; (800c3f0 <_vfiprintf_r+0x258>)
 800c3cc:	a904      	add	r1, sp, #16
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f000 f880 	bl	800c4d4 <_printf_i>
 800c3d4:	e7e4      	b.n	800c3a0 <_vfiprintf_r+0x208>
 800c3d6:	bf00      	nop
 800c3d8:	0800cfd8 	.word	0x0800cfd8
 800c3dc:	0800cff8 	.word	0x0800cff8
 800c3e0:	0800cfb8 	.word	0x0800cfb8
 800c3e4:	0800d018 	.word	0x0800d018
 800c3e8:	0800d022 	.word	0x0800d022
 800c3ec:	00000000 	.word	0x00000000
 800c3f0:	0800c173 	.word	0x0800c173
 800c3f4:	0800d01e 	.word	0x0800d01e

0800c3f8 <_printf_common>:
 800c3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3fc:	4616      	mov	r6, r2
 800c3fe:	4699      	mov	r9, r3
 800c400:	688a      	ldr	r2, [r1, #8]
 800c402:	690b      	ldr	r3, [r1, #16]
 800c404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c408:	4293      	cmp	r3, r2
 800c40a:	bfb8      	it	lt
 800c40c:	4613      	movlt	r3, r2
 800c40e:	6033      	str	r3, [r6, #0]
 800c410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c414:	4607      	mov	r7, r0
 800c416:	460c      	mov	r4, r1
 800c418:	b10a      	cbz	r2, 800c41e <_printf_common+0x26>
 800c41a:	3301      	adds	r3, #1
 800c41c:	6033      	str	r3, [r6, #0]
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	0699      	lsls	r1, r3, #26
 800c422:	bf42      	ittt	mi
 800c424:	6833      	ldrmi	r3, [r6, #0]
 800c426:	3302      	addmi	r3, #2
 800c428:	6033      	strmi	r3, [r6, #0]
 800c42a:	6825      	ldr	r5, [r4, #0]
 800c42c:	f015 0506 	ands.w	r5, r5, #6
 800c430:	d106      	bne.n	800c440 <_printf_common+0x48>
 800c432:	f104 0a19 	add.w	sl, r4, #25
 800c436:	68e3      	ldr	r3, [r4, #12]
 800c438:	6832      	ldr	r2, [r6, #0]
 800c43a:	1a9b      	subs	r3, r3, r2
 800c43c:	42ab      	cmp	r3, r5
 800c43e:	dc26      	bgt.n	800c48e <_printf_common+0x96>
 800c440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c444:	1e13      	subs	r3, r2, #0
 800c446:	6822      	ldr	r2, [r4, #0]
 800c448:	bf18      	it	ne
 800c44a:	2301      	movne	r3, #1
 800c44c:	0692      	lsls	r2, r2, #26
 800c44e:	d42b      	bmi.n	800c4a8 <_printf_common+0xb0>
 800c450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c454:	4649      	mov	r1, r9
 800c456:	4638      	mov	r0, r7
 800c458:	47c0      	blx	r8
 800c45a:	3001      	adds	r0, #1
 800c45c:	d01e      	beq.n	800c49c <_printf_common+0xa4>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	68e5      	ldr	r5, [r4, #12]
 800c462:	6832      	ldr	r2, [r6, #0]
 800c464:	f003 0306 	and.w	r3, r3, #6
 800c468:	2b04      	cmp	r3, #4
 800c46a:	bf08      	it	eq
 800c46c:	1aad      	subeq	r5, r5, r2
 800c46e:	68a3      	ldr	r3, [r4, #8]
 800c470:	6922      	ldr	r2, [r4, #16]
 800c472:	bf0c      	ite	eq
 800c474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c478:	2500      	movne	r5, #0
 800c47a:	4293      	cmp	r3, r2
 800c47c:	bfc4      	itt	gt
 800c47e:	1a9b      	subgt	r3, r3, r2
 800c480:	18ed      	addgt	r5, r5, r3
 800c482:	2600      	movs	r6, #0
 800c484:	341a      	adds	r4, #26
 800c486:	42b5      	cmp	r5, r6
 800c488:	d11a      	bne.n	800c4c0 <_printf_common+0xc8>
 800c48a:	2000      	movs	r0, #0
 800c48c:	e008      	b.n	800c4a0 <_printf_common+0xa8>
 800c48e:	2301      	movs	r3, #1
 800c490:	4652      	mov	r2, sl
 800c492:	4649      	mov	r1, r9
 800c494:	4638      	mov	r0, r7
 800c496:	47c0      	blx	r8
 800c498:	3001      	adds	r0, #1
 800c49a:	d103      	bne.n	800c4a4 <_printf_common+0xac>
 800c49c:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4a4:	3501      	adds	r5, #1
 800c4a6:	e7c6      	b.n	800c436 <_printf_common+0x3e>
 800c4a8:	18e1      	adds	r1, r4, r3
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	2030      	movs	r0, #48	; 0x30
 800c4ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4b2:	4422      	add	r2, r4
 800c4b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4bc:	3302      	adds	r3, #2
 800c4be:	e7c7      	b.n	800c450 <_printf_common+0x58>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	4622      	mov	r2, r4
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	4638      	mov	r0, r7
 800c4c8:	47c0      	blx	r8
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	d0e6      	beq.n	800c49c <_printf_common+0xa4>
 800c4ce:	3601      	adds	r6, #1
 800c4d0:	e7d9      	b.n	800c486 <_printf_common+0x8e>
	...

0800c4d4 <_printf_i>:
 800c4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4d8:	7e0f      	ldrb	r7, [r1, #24]
 800c4da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4dc:	2f78      	cmp	r7, #120	; 0x78
 800c4de:	4691      	mov	r9, r2
 800c4e0:	4680      	mov	r8, r0
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	469a      	mov	sl, r3
 800c4e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c4ea:	d807      	bhi.n	800c4fc <_printf_i+0x28>
 800c4ec:	2f62      	cmp	r7, #98	; 0x62
 800c4ee:	d80a      	bhi.n	800c506 <_printf_i+0x32>
 800c4f0:	2f00      	cmp	r7, #0
 800c4f2:	f000 80d8 	beq.w	800c6a6 <_printf_i+0x1d2>
 800c4f6:	2f58      	cmp	r7, #88	; 0x58
 800c4f8:	f000 80a3 	beq.w	800c642 <_printf_i+0x16e>
 800c4fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c504:	e03a      	b.n	800c57c <_printf_i+0xa8>
 800c506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c50a:	2b15      	cmp	r3, #21
 800c50c:	d8f6      	bhi.n	800c4fc <_printf_i+0x28>
 800c50e:	a101      	add	r1, pc, #4	; (adr r1, 800c514 <_printf_i+0x40>)
 800c510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c514:	0800c56d 	.word	0x0800c56d
 800c518:	0800c581 	.word	0x0800c581
 800c51c:	0800c4fd 	.word	0x0800c4fd
 800c520:	0800c4fd 	.word	0x0800c4fd
 800c524:	0800c4fd 	.word	0x0800c4fd
 800c528:	0800c4fd 	.word	0x0800c4fd
 800c52c:	0800c581 	.word	0x0800c581
 800c530:	0800c4fd 	.word	0x0800c4fd
 800c534:	0800c4fd 	.word	0x0800c4fd
 800c538:	0800c4fd 	.word	0x0800c4fd
 800c53c:	0800c4fd 	.word	0x0800c4fd
 800c540:	0800c68d 	.word	0x0800c68d
 800c544:	0800c5b1 	.word	0x0800c5b1
 800c548:	0800c66f 	.word	0x0800c66f
 800c54c:	0800c4fd 	.word	0x0800c4fd
 800c550:	0800c4fd 	.word	0x0800c4fd
 800c554:	0800c6af 	.word	0x0800c6af
 800c558:	0800c4fd 	.word	0x0800c4fd
 800c55c:	0800c5b1 	.word	0x0800c5b1
 800c560:	0800c4fd 	.word	0x0800c4fd
 800c564:	0800c4fd 	.word	0x0800c4fd
 800c568:	0800c677 	.word	0x0800c677
 800c56c:	682b      	ldr	r3, [r5, #0]
 800c56e:	1d1a      	adds	r2, r3, #4
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	602a      	str	r2, [r5, #0]
 800c574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c57c:	2301      	movs	r3, #1
 800c57e:	e0a3      	b.n	800c6c8 <_printf_i+0x1f4>
 800c580:	6820      	ldr	r0, [r4, #0]
 800c582:	6829      	ldr	r1, [r5, #0]
 800c584:	0606      	lsls	r6, r0, #24
 800c586:	f101 0304 	add.w	r3, r1, #4
 800c58a:	d50a      	bpl.n	800c5a2 <_printf_i+0xce>
 800c58c:	680e      	ldr	r6, [r1, #0]
 800c58e:	602b      	str	r3, [r5, #0]
 800c590:	2e00      	cmp	r6, #0
 800c592:	da03      	bge.n	800c59c <_printf_i+0xc8>
 800c594:	232d      	movs	r3, #45	; 0x2d
 800c596:	4276      	negs	r6, r6
 800c598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c59c:	485e      	ldr	r0, [pc, #376]	; (800c718 <_printf_i+0x244>)
 800c59e:	230a      	movs	r3, #10
 800c5a0:	e019      	b.n	800c5d6 <_printf_i+0x102>
 800c5a2:	680e      	ldr	r6, [r1, #0]
 800c5a4:	602b      	str	r3, [r5, #0]
 800c5a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5aa:	bf18      	it	ne
 800c5ac:	b236      	sxthne	r6, r6
 800c5ae:	e7ef      	b.n	800c590 <_printf_i+0xbc>
 800c5b0:	682b      	ldr	r3, [r5, #0]
 800c5b2:	6820      	ldr	r0, [r4, #0]
 800c5b4:	1d19      	adds	r1, r3, #4
 800c5b6:	6029      	str	r1, [r5, #0]
 800c5b8:	0601      	lsls	r1, r0, #24
 800c5ba:	d501      	bpl.n	800c5c0 <_printf_i+0xec>
 800c5bc:	681e      	ldr	r6, [r3, #0]
 800c5be:	e002      	b.n	800c5c6 <_printf_i+0xf2>
 800c5c0:	0646      	lsls	r6, r0, #25
 800c5c2:	d5fb      	bpl.n	800c5bc <_printf_i+0xe8>
 800c5c4:	881e      	ldrh	r6, [r3, #0]
 800c5c6:	4854      	ldr	r0, [pc, #336]	; (800c718 <_printf_i+0x244>)
 800c5c8:	2f6f      	cmp	r7, #111	; 0x6f
 800c5ca:	bf0c      	ite	eq
 800c5cc:	2308      	moveq	r3, #8
 800c5ce:	230a      	movne	r3, #10
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5d6:	6865      	ldr	r5, [r4, #4]
 800c5d8:	60a5      	str	r5, [r4, #8]
 800c5da:	2d00      	cmp	r5, #0
 800c5dc:	bfa2      	ittt	ge
 800c5de:	6821      	ldrge	r1, [r4, #0]
 800c5e0:	f021 0104 	bicge.w	r1, r1, #4
 800c5e4:	6021      	strge	r1, [r4, #0]
 800c5e6:	b90e      	cbnz	r6, 800c5ec <_printf_i+0x118>
 800c5e8:	2d00      	cmp	r5, #0
 800c5ea:	d04d      	beq.n	800c688 <_printf_i+0x1b4>
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800c5f2:	fb03 6711 	mls	r7, r3, r1, r6
 800c5f6:	5dc7      	ldrb	r7, [r0, r7]
 800c5f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c5fc:	4637      	mov	r7, r6
 800c5fe:	42bb      	cmp	r3, r7
 800c600:	460e      	mov	r6, r1
 800c602:	d9f4      	bls.n	800c5ee <_printf_i+0x11a>
 800c604:	2b08      	cmp	r3, #8
 800c606:	d10b      	bne.n	800c620 <_printf_i+0x14c>
 800c608:	6823      	ldr	r3, [r4, #0]
 800c60a:	07de      	lsls	r6, r3, #31
 800c60c:	d508      	bpl.n	800c620 <_printf_i+0x14c>
 800c60e:	6923      	ldr	r3, [r4, #16]
 800c610:	6861      	ldr	r1, [r4, #4]
 800c612:	4299      	cmp	r1, r3
 800c614:	bfde      	ittt	le
 800c616:	2330      	movle	r3, #48	; 0x30
 800c618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c61c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c620:	1b52      	subs	r2, r2, r5
 800c622:	6122      	str	r2, [r4, #16]
 800c624:	f8cd a000 	str.w	sl, [sp]
 800c628:	464b      	mov	r3, r9
 800c62a:	aa03      	add	r2, sp, #12
 800c62c:	4621      	mov	r1, r4
 800c62e:	4640      	mov	r0, r8
 800c630:	f7ff fee2 	bl	800c3f8 <_printf_common>
 800c634:	3001      	adds	r0, #1
 800c636:	d14c      	bne.n	800c6d2 <_printf_i+0x1fe>
 800c638:	f04f 30ff 	mov.w	r0, #4294967295
 800c63c:	b004      	add	sp, #16
 800c63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c642:	4835      	ldr	r0, [pc, #212]	; (800c718 <_printf_i+0x244>)
 800c644:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c648:	6829      	ldr	r1, [r5, #0]
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c650:	6029      	str	r1, [r5, #0]
 800c652:	061d      	lsls	r5, r3, #24
 800c654:	d514      	bpl.n	800c680 <_printf_i+0x1ac>
 800c656:	07df      	lsls	r7, r3, #31
 800c658:	bf44      	itt	mi
 800c65a:	f043 0320 	orrmi.w	r3, r3, #32
 800c65e:	6023      	strmi	r3, [r4, #0]
 800c660:	b91e      	cbnz	r6, 800c66a <_printf_i+0x196>
 800c662:	6823      	ldr	r3, [r4, #0]
 800c664:	f023 0320 	bic.w	r3, r3, #32
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	2310      	movs	r3, #16
 800c66c:	e7b0      	b.n	800c5d0 <_printf_i+0xfc>
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	f043 0320 	orr.w	r3, r3, #32
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	2378      	movs	r3, #120	; 0x78
 800c678:	4828      	ldr	r0, [pc, #160]	; (800c71c <_printf_i+0x248>)
 800c67a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c67e:	e7e3      	b.n	800c648 <_printf_i+0x174>
 800c680:	0659      	lsls	r1, r3, #25
 800c682:	bf48      	it	mi
 800c684:	b2b6      	uxthmi	r6, r6
 800c686:	e7e6      	b.n	800c656 <_printf_i+0x182>
 800c688:	4615      	mov	r5, r2
 800c68a:	e7bb      	b.n	800c604 <_printf_i+0x130>
 800c68c:	682b      	ldr	r3, [r5, #0]
 800c68e:	6826      	ldr	r6, [r4, #0]
 800c690:	6961      	ldr	r1, [r4, #20]
 800c692:	1d18      	adds	r0, r3, #4
 800c694:	6028      	str	r0, [r5, #0]
 800c696:	0635      	lsls	r5, r6, #24
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	d501      	bpl.n	800c6a0 <_printf_i+0x1cc>
 800c69c:	6019      	str	r1, [r3, #0]
 800c69e:	e002      	b.n	800c6a6 <_printf_i+0x1d2>
 800c6a0:	0670      	lsls	r0, r6, #25
 800c6a2:	d5fb      	bpl.n	800c69c <_printf_i+0x1c8>
 800c6a4:	8019      	strh	r1, [r3, #0]
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	6123      	str	r3, [r4, #16]
 800c6aa:	4615      	mov	r5, r2
 800c6ac:	e7ba      	b.n	800c624 <_printf_i+0x150>
 800c6ae:	682b      	ldr	r3, [r5, #0]
 800c6b0:	1d1a      	adds	r2, r3, #4
 800c6b2:	602a      	str	r2, [r5, #0]
 800c6b4:	681d      	ldr	r5, [r3, #0]
 800c6b6:	6862      	ldr	r2, [r4, #4]
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	f7f3 fe10 	bl	80002e0 <memchr>
 800c6c0:	b108      	cbz	r0, 800c6c6 <_printf_i+0x1f2>
 800c6c2:	1b40      	subs	r0, r0, r5
 800c6c4:	6060      	str	r0, [r4, #4]
 800c6c6:	6863      	ldr	r3, [r4, #4]
 800c6c8:	6123      	str	r3, [r4, #16]
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6d0:	e7a8      	b.n	800c624 <_printf_i+0x150>
 800c6d2:	6923      	ldr	r3, [r4, #16]
 800c6d4:	462a      	mov	r2, r5
 800c6d6:	4649      	mov	r1, r9
 800c6d8:	4640      	mov	r0, r8
 800c6da:	47d0      	blx	sl
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d0ab      	beq.n	800c638 <_printf_i+0x164>
 800c6e0:	6823      	ldr	r3, [r4, #0]
 800c6e2:	079b      	lsls	r3, r3, #30
 800c6e4:	d413      	bmi.n	800c70e <_printf_i+0x23a>
 800c6e6:	68e0      	ldr	r0, [r4, #12]
 800c6e8:	9b03      	ldr	r3, [sp, #12]
 800c6ea:	4298      	cmp	r0, r3
 800c6ec:	bfb8      	it	lt
 800c6ee:	4618      	movlt	r0, r3
 800c6f0:	e7a4      	b.n	800c63c <_printf_i+0x168>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	4649      	mov	r1, r9
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	47d0      	blx	sl
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d09b      	beq.n	800c638 <_printf_i+0x164>
 800c700:	3501      	adds	r5, #1
 800c702:	68e3      	ldr	r3, [r4, #12]
 800c704:	9903      	ldr	r1, [sp, #12]
 800c706:	1a5b      	subs	r3, r3, r1
 800c708:	42ab      	cmp	r3, r5
 800c70a:	dcf2      	bgt.n	800c6f2 <_printf_i+0x21e>
 800c70c:	e7eb      	b.n	800c6e6 <_printf_i+0x212>
 800c70e:	2500      	movs	r5, #0
 800c710:	f104 0619 	add.w	r6, r4, #25
 800c714:	e7f5      	b.n	800c702 <_printf_i+0x22e>
 800c716:	bf00      	nop
 800c718:	0800d029 	.word	0x0800d029
 800c71c:	0800d03a 	.word	0x0800d03a

0800c720 <_sbrk_r>:
 800c720:	b538      	push	{r3, r4, r5, lr}
 800c722:	4d06      	ldr	r5, [pc, #24]	; (800c73c <_sbrk_r+0x1c>)
 800c724:	2300      	movs	r3, #0
 800c726:	4604      	mov	r4, r0
 800c728:	4608      	mov	r0, r1
 800c72a:	602b      	str	r3, [r5, #0]
 800c72c:	f7f5 fa40 	bl	8001bb0 <_sbrk>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d102      	bne.n	800c73a <_sbrk_r+0x1a>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	b103      	cbz	r3, 800c73a <_sbrk_r+0x1a>
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	2400053c 	.word	0x2400053c

0800c740 <__sread>:
 800c740:	b510      	push	{r4, lr}
 800c742:	460c      	mov	r4, r1
 800c744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c748:	f000 fab2 	bl	800ccb0 <_read_r>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	bfab      	itete	ge
 800c750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c752:	89a3      	ldrhlt	r3, [r4, #12]
 800c754:	181b      	addge	r3, r3, r0
 800c756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c75a:	bfac      	ite	ge
 800c75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c75e:	81a3      	strhlt	r3, [r4, #12]
 800c760:	bd10      	pop	{r4, pc}

0800c762 <__swrite>:
 800c762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c766:	461f      	mov	r7, r3
 800c768:	898b      	ldrh	r3, [r1, #12]
 800c76a:	05db      	lsls	r3, r3, #23
 800c76c:	4605      	mov	r5, r0
 800c76e:	460c      	mov	r4, r1
 800c770:	4616      	mov	r6, r2
 800c772:	d505      	bpl.n	800c780 <__swrite+0x1e>
 800c774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c778:	2302      	movs	r3, #2
 800c77a:	2200      	movs	r2, #0
 800c77c:	f000 f9c8 	bl	800cb10 <_lseek_r>
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c78a:	81a3      	strh	r3, [r4, #12]
 800c78c:	4632      	mov	r2, r6
 800c78e:	463b      	mov	r3, r7
 800c790:	4628      	mov	r0, r5
 800c792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c796:	f000 b869 	b.w	800c86c <_write_r>

0800c79a <__sseek>:
 800c79a:	b510      	push	{r4, lr}
 800c79c:	460c      	mov	r4, r1
 800c79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a2:	f000 f9b5 	bl	800cb10 <_lseek_r>
 800c7a6:	1c43      	adds	r3, r0, #1
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	bf15      	itete	ne
 800c7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7b6:	81a3      	strheq	r3, [r4, #12]
 800c7b8:	bf18      	it	ne
 800c7ba:	81a3      	strhne	r3, [r4, #12]
 800c7bc:	bd10      	pop	{r4, pc}

0800c7be <__sclose>:
 800c7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c2:	f000 b8d3 	b.w	800c96c <_close_r>
	...

0800c7c8 <__swbuf_r>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	460e      	mov	r6, r1
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	b118      	cbz	r0, 800c7da <__swbuf_r+0x12>
 800c7d2:	6983      	ldr	r3, [r0, #24]
 800c7d4:	b90b      	cbnz	r3, 800c7da <__swbuf_r+0x12>
 800c7d6:	f7ff fb81 	bl	800bedc <__sinit>
 800c7da:	4b21      	ldr	r3, [pc, #132]	; (800c860 <__swbuf_r+0x98>)
 800c7dc:	429c      	cmp	r4, r3
 800c7de:	d12b      	bne.n	800c838 <__swbuf_r+0x70>
 800c7e0:	686c      	ldr	r4, [r5, #4]
 800c7e2:	69a3      	ldr	r3, [r4, #24]
 800c7e4:	60a3      	str	r3, [r4, #8]
 800c7e6:	89a3      	ldrh	r3, [r4, #12]
 800c7e8:	071a      	lsls	r2, r3, #28
 800c7ea:	d52f      	bpl.n	800c84c <__swbuf_r+0x84>
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	b36b      	cbz	r3, 800c84c <__swbuf_r+0x84>
 800c7f0:	6923      	ldr	r3, [r4, #16]
 800c7f2:	6820      	ldr	r0, [r4, #0]
 800c7f4:	1ac0      	subs	r0, r0, r3
 800c7f6:	6963      	ldr	r3, [r4, #20]
 800c7f8:	b2f6      	uxtb	r6, r6
 800c7fa:	4283      	cmp	r3, r0
 800c7fc:	4637      	mov	r7, r6
 800c7fe:	dc04      	bgt.n	800c80a <__swbuf_r+0x42>
 800c800:	4621      	mov	r1, r4
 800c802:	4628      	mov	r0, r5
 800c804:	f000 f948 	bl	800ca98 <_fflush_r>
 800c808:	bb30      	cbnz	r0, 800c858 <__swbuf_r+0x90>
 800c80a:	68a3      	ldr	r3, [r4, #8]
 800c80c:	3b01      	subs	r3, #1
 800c80e:	60a3      	str	r3, [r4, #8]
 800c810:	6823      	ldr	r3, [r4, #0]
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	6022      	str	r2, [r4, #0]
 800c816:	701e      	strb	r6, [r3, #0]
 800c818:	6963      	ldr	r3, [r4, #20]
 800c81a:	3001      	adds	r0, #1
 800c81c:	4283      	cmp	r3, r0
 800c81e:	d004      	beq.n	800c82a <__swbuf_r+0x62>
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	07db      	lsls	r3, r3, #31
 800c824:	d506      	bpl.n	800c834 <__swbuf_r+0x6c>
 800c826:	2e0a      	cmp	r6, #10
 800c828:	d104      	bne.n	800c834 <__swbuf_r+0x6c>
 800c82a:	4621      	mov	r1, r4
 800c82c:	4628      	mov	r0, r5
 800c82e:	f000 f933 	bl	800ca98 <_fflush_r>
 800c832:	b988      	cbnz	r0, 800c858 <__swbuf_r+0x90>
 800c834:	4638      	mov	r0, r7
 800c836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c838:	4b0a      	ldr	r3, [pc, #40]	; (800c864 <__swbuf_r+0x9c>)
 800c83a:	429c      	cmp	r4, r3
 800c83c:	d101      	bne.n	800c842 <__swbuf_r+0x7a>
 800c83e:	68ac      	ldr	r4, [r5, #8]
 800c840:	e7cf      	b.n	800c7e2 <__swbuf_r+0x1a>
 800c842:	4b09      	ldr	r3, [pc, #36]	; (800c868 <__swbuf_r+0xa0>)
 800c844:	429c      	cmp	r4, r3
 800c846:	bf08      	it	eq
 800c848:	68ec      	ldreq	r4, [r5, #12]
 800c84a:	e7ca      	b.n	800c7e2 <__swbuf_r+0x1a>
 800c84c:	4621      	mov	r1, r4
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 f81e 	bl	800c890 <__swsetup_r>
 800c854:	2800      	cmp	r0, #0
 800c856:	d0cb      	beq.n	800c7f0 <__swbuf_r+0x28>
 800c858:	f04f 37ff 	mov.w	r7, #4294967295
 800c85c:	e7ea      	b.n	800c834 <__swbuf_r+0x6c>
 800c85e:	bf00      	nop
 800c860:	0800cfd8 	.word	0x0800cfd8
 800c864:	0800cff8 	.word	0x0800cff8
 800c868:	0800cfb8 	.word	0x0800cfb8

0800c86c <_write_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d07      	ldr	r5, [pc, #28]	; (800c88c <_write_r+0x20>)
 800c870:	4604      	mov	r4, r0
 800c872:	4608      	mov	r0, r1
 800c874:	4611      	mov	r1, r2
 800c876:	2200      	movs	r2, #0
 800c878:	602a      	str	r2, [r5, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	f7f3 ffb6 	bl	80007ec <_write>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_write_r+0x1e>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_write_r+0x1e>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	2400053c 	.word	0x2400053c

0800c890 <__swsetup_r>:
 800c890:	4b32      	ldr	r3, [pc, #200]	; (800c95c <__swsetup_r+0xcc>)
 800c892:	b570      	push	{r4, r5, r6, lr}
 800c894:	681d      	ldr	r5, [r3, #0]
 800c896:	4606      	mov	r6, r0
 800c898:	460c      	mov	r4, r1
 800c89a:	b125      	cbz	r5, 800c8a6 <__swsetup_r+0x16>
 800c89c:	69ab      	ldr	r3, [r5, #24]
 800c89e:	b913      	cbnz	r3, 800c8a6 <__swsetup_r+0x16>
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f7ff fb1b 	bl	800bedc <__sinit>
 800c8a6:	4b2e      	ldr	r3, [pc, #184]	; (800c960 <__swsetup_r+0xd0>)
 800c8a8:	429c      	cmp	r4, r3
 800c8aa:	d10f      	bne.n	800c8cc <__swsetup_r+0x3c>
 800c8ac:	686c      	ldr	r4, [r5, #4]
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8b4:	0719      	lsls	r1, r3, #28
 800c8b6:	d42c      	bmi.n	800c912 <__swsetup_r+0x82>
 800c8b8:	06dd      	lsls	r5, r3, #27
 800c8ba:	d411      	bmi.n	800c8e0 <__swsetup_r+0x50>
 800c8bc:	2309      	movs	r3, #9
 800c8be:	6033      	str	r3, [r6, #0]
 800c8c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8c4:	81a3      	strh	r3, [r4, #12]
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ca:	e03e      	b.n	800c94a <__swsetup_r+0xba>
 800c8cc:	4b25      	ldr	r3, [pc, #148]	; (800c964 <__swsetup_r+0xd4>)
 800c8ce:	429c      	cmp	r4, r3
 800c8d0:	d101      	bne.n	800c8d6 <__swsetup_r+0x46>
 800c8d2:	68ac      	ldr	r4, [r5, #8]
 800c8d4:	e7eb      	b.n	800c8ae <__swsetup_r+0x1e>
 800c8d6:	4b24      	ldr	r3, [pc, #144]	; (800c968 <__swsetup_r+0xd8>)
 800c8d8:	429c      	cmp	r4, r3
 800c8da:	bf08      	it	eq
 800c8dc:	68ec      	ldreq	r4, [r5, #12]
 800c8de:	e7e6      	b.n	800c8ae <__swsetup_r+0x1e>
 800c8e0:	0758      	lsls	r0, r3, #29
 800c8e2:	d512      	bpl.n	800c90a <__swsetup_r+0x7a>
 800c8e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8e6:	b141      	cbz	r1, 800c8fa <__swsetup_r+0x6a>
 800c8e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8ec:	4299      	cmp	r1, r3
 800c8ee:	d002      	beq.n	800c8f6 <__swsetup_r+0x66>
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f000 f991 	bl	800cc18 <_free_r>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	6363      	str	r3, [r4, #52]	; 0x34
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	2300      	movs	r3, #0
 800c904:	6063      	str	r3, [r4, #4]
 800c906:	6923      	ldr	r3, [r4, #16]
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f043 0308 	orr.w	r3, r3, #8
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	6923      	ldr	r3, [r4, #16]
 800c914:	b94b      	cbnz	r3, 800c92a <__swsetup_r+0x9a>
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c91c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c920:	d003      	beq.n	800c92a <__swsetup_r+0x9a>
 800c922:	4621      	mov	r1, r4
 800c924:	4630      	mov	r0, r6
 800c926:	f000 f92b 	bl	800cb80 <__smakebuf_r>
 800c92a:	89a0      	ldrh	r0, [r4, #12]
 800c92c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c930:	f010 0301 	ands.w	r3, r0, #1
 800c934:	d00a      	beq.n	800c94c <__swsetup_r+0xbc>
 800c936:	2300      	movs	r3, #0
 800c938:	60a3      	str	r3, [r4, #8]
 800c93a:	6963      	ldr	r3, [r4, #20]
 800c93c:	425b      	negs	r3, r3
 800c93e:	61a3      	str	r3, [r4, #24]
 800c940:	6923      	ldr	r3, [r4, #16]
 800c942:	b943      	cbnz	r3, 800c956 <__swsetup_r+0xc6>
 800c944:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c948:	d1ba      	bne.n	800c8c0 <__swsetup_r+0x30>
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	0781      	lsls	r1, r0, #30
 800c94e:	bf58      	it	pl
 800c950:	6963      	ldrpl	r3, [r4, #20]
 800c952:	60a3      	str	r3, [r4, #8]
 800c954:	e7f4      	b.n	800c940 <__swsetup_r+0xb0>
 800c956:	2000      	movs	r0, #0
 800c958:	e7f7      	b.n	800c94a <__swsetup_r+0xba>
 800c95a:	bf00      	nop
 800c95c:	24000010 	.word	0x24000010
 800c960:	0800cfd8 	.word	0x0800cfd8
 800c964:	0800cff8 	.word	0x0800cff8
 800c968:	0800cfb8 	.word	0x0800cfb8

0800c96c <_close_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4d06      	ldr	r5, [pc, #24]	; (800c988 <_close_r+0x1c>)
 800c970:	2300      	movs	r3, #0
 800c972:	4604      	mov	r4, r0
 800c974:	4608      	mov	r0, r1
 800c976:	602b      	str	r3, [r5, #0]
 800c978:	f7f5 f8e5 	bl	8001b46 <_close>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_close_r+0x1a>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_close_r+0x1a>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	2400053c 	.word	0x2400053c

0800c98c <__sflush_r>:
 800c98c:	898a      	ldrh	r2, [r1, #12]
 800c98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c992:	4605      	mov	r5, r0
 800c994:	0710      	lsls	r0, r2, #28
 800c996:	460c      	mov	r4, r1
 800c998:	d458      	bmi.n	800ca4c <__sflush_r+0xc0>
 800c99a:	684b      	ldr	r3, [r1, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	dc05      	bgt.n	800c9ac <__sflush_r+0x20>
 800c9a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dc02      	bgt.n	800c9ac <__sflush_r+0x20>
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9ae:	2e00      	cmp	r6, #0
 800c9b0:	d0f9      	beq.n	800c9a6 <__sflush_r+0x1a>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9b8:	682f      	ldr	r7, [r5, #0]
 800c9ba:	602b      	str	r3, [r5, #0]
 800c9bc:	d032      	beq.n	800ca24 <__sflush_r+0x98>
 800c9be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9c0:	89a3      	ldrh	r3, [r4, #12]
 800c9c2:	075a      	lsls	r2, r3, #29
 800c9c4:	d505      	bpl.n	800c9d2 <__sflush_r+0x46>
 800c9c6:	6863      	ldr	r3, [r4, #4]
 800c9c8:	1ac0      	subs	r0, r0, r3
 800c9ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9cc:	b10b      	cbz	r3, 800c9d2 <__sflush_r+0x46>
 800c9ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9d0:	1ac0      	subs	r0, r0, r3
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9d8:	6a21      	ldr	r1, [r4, #32]
 800c9da:	4628      	mov	r0, r5
 800c9dc:	47b0      	blx	r6
 800c9de:	1c43      	adds	r3, r0, #1
 800c9e0:	89a3      	ldrh	r3, [r4, #12]
 800c9e2:	d106      	bne.n	800c9f2 <__sflush_r+0x66>
 800c9e4:	6829      	ldr	r1, [r5, #0]
 800c9e6:	291d      	cmp	r1, #29
 800c9e8:	d82c      	bhi.n	800ca44 <__sflush_r+0xb8>
 800c9ea:	4a2a      	ldr	r2, [pc, #168]	; (800ca94 <__sflush_r+0x108>)
 800c9ec:	40ca      	lsrs	r2, r1
 800c9ee:	07d6      	lsls	r6, r2, #31
 800c9f0:	d528      	bpl.n	800ca44 <__sflush_r+0xb8>
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	6062      	str	r2, [r4, #4]
 800c9f6:	04d9      	lsls	r1, r3, #19
 800c9f8:	6922      	ldr	r2, [r4, #16]
 800c9fa:	6022      	str	r2, [r4, #0]
 800c9fc:	d504      	bpl.n	800ca08 <__sflush_r+0x7c>
 800c9fe:	1c42      	adds	r2, r0, #1
 800ca00:	d101      	bne.n	800ca06 <__sflush_r+0x7a>
 800ca02:	682b      	ldr	r3, [r5, #0]
 800ca04:	b903      	cbnz	r3, 800ca08 <__sflush_r+0x7c>
 800ca06:	6560      	str	r0, [r4, #84]	; 0x54
 800ca08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca0a:	602f      	str	r7, [r5, #0]
 800ca0c:	2900      	cmp	r1, #0
 800ca0e:	d0ca      	beq.n	800c9a6 <__sflush_r+0x1a>
 800ca10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca14:	4299      	cmp	r1, r3
 800ca16:	d002      	beq.n	800ca1e <__sflush_r+0x92>
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f000 f8fd 	bl	800cc18 <_free_r>
 800ca1e:	2000      	movs	r0, #0
 800ca20:	6360      	str	r0, [r4, #52]	; 0x34
 800ca22:	e7c1      	b.n	800c9a8 <__sflush_r+0x1c>
 800ca24:	6a21      	ldr	r1, [r4, #32]
 800ca26:	2301      	movs	r3, #1
 800ca28:	4628      	mov	r0, r5
 800ca2a:	47b0      	blx	r6
 800ca2c:	1c41      	adds	r1, r0, #1
 800ca2e:	d1c7      	bne.n	800c9c0 <__sflush_r+0x34>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0c4      	beq.n	800c9c0 <__sflush_r+0x34>
 800ca36:	2b1d      	cmp	r3, #29
 800ca38:	d001      	beq.n	800ca3e <__sflush_r+0xb2>
 800ca3a:	2b16      	cmp	r3, #22
 800ca3c:	d101      	bne.n	800ca42 <__sflush_r+0xb6>
 800ca3e:	602f      	str	r7, [r5, #0]
 800ca40:	e7b1      	b.n	800c9a6 <__sflush_r+0x1a>
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca48:	81a3      	strh	r3, [r4, #12]
 800ca4a:	e7ad      	b.n	800c9a8 <__sflush_r+0x1c>
 800ca4c:	690f      	ldr	r7, [r1, #16]
 800ca4e:	2f00      	cmp	r7, #0
 800ca50:	d0a9      	beq.n	800c9a6 <__sflush_r+0x1a>
 800ca52:	0793      	lsls	r3, r2, #30
 800ca54:	680e      	ldr	r6, [r1, #0]
 800ca56:	bf08      	it	eq
 800ca58:	694b      	ldreq	r3, [r1, #20]
 800ca5a:	600f      	str	r7, [r1, #0]
 800ca5c:	bf18      	it	ne
 800ca5e:	2300      	movne	r3, #0
 800ca60:	eba6 0807 	sub.w	r8, r6, r7
 800ca64:	608b      	str	r3, [r1, #8]
 800ca66:	f1b8 0f00 	cmp.w	r8, #0
 800ca6a:	dd9c      	ble.n	800c9a6 <__sflush_r+0x1a>
 800ca6c:	6a21      	ldr	r1, [r4, #32]
 800ca6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca70:	4643      	mov	r3, r8
 800ca72:	463a      	mov	r2, r7
 800ca74:	4628      	mov	r0, r5
 800ca76:	47b0      	blx	r6
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	dc06      	bgt.n	800ca8a <__sflush_r+0xfe>
 800ca7c:	89a3      	ldrh	r3, [r4, #12]
 800ca7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca82:	81a3      	strh	r3, [r4, #12]
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	e78e      	b.n	800c9a8 <__sflush_r+0x1c>
 800ca8a:	4407      	add	r7, r0
 800ca8c:	eba8 0800 	sub.w	r8, r8, r0
 800ca90:	e7e9      	b.n	800ca66 <__sflush_r+0xda>
 800ca92:	bf00      	nop
 800ca94:	20400001 	.word	0x20400001

0800ca98 <_fflush_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	690b      	ldr	r3, [r1, #16]
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	b913      	cbnz	r3, 800caa8 <_fflush_r+0x10>
 800caa2:	2500      	movs	r5, #0
 800caa4:	4628      	mov	r0, r5
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	b118      	cbz	r0, 800cab2 <_fflush_r+0x1a>
 800caaa:	6983      	ldr	r3, [r0, #24]
 800caac:	b90b      	cbnz	r3, 800cab2 <_fflush_r+0x1a>
 800caae:	f7ff fa15 	bl	800bedc <__sinit>
 800cab2:	4b14      	ldr	r3, [pc, #80]	; (800cb04 <_fflush_r+0x6c>)
 800cab4:	429c      	cmp	r4, r3
 800cab6:	d11b      	bne.n	800caf0 <_fflush_r+0x58>
 800cab8:	686c      	ldr	r4, [r5, #4]
 800caba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d0ef      	beq.n	800caa2 <_fflush_r+0xa>
 800cac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cac4:	07d0      	lsls	r0, r2, #31
 800cac6:	d404      	bmi.n	800cad2 <_fflush_r+0x3a>
 800cac8:	0599      	lsls	r1, r3, #22
 800caca:	d402      	bmi.n	800cad2 <_fflush_r+0x3a>
 800cacc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cace:	f7ff faa3 	bl	800c018 <__retarget_lock_acquire_recursive>
 800cad2:	4628      	mov	r0, r5
 800cad4:	4621      	mov	r1, r4
 800cad6:	f7ff ff59 	bl	800c98c <__sflush_r>
 800cada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cadc:	07da      	lsls	r2, r3, #31
 800cade:	4605      	mov	r5, r0
 800cae0:	d4e0      	bmi.n	800caa4 <_fflush_r+0xc>
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	059b      	lsls	r3, r3, #22
 800cae6:	d4dd      	bmi.n	800caa4 <_fflush_r+0xc>
 800cae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caea:	f7ff fa96 	bl	800c01a <__retarget_lock_release_recursive>
 800caee:	e7d9      	b.n	800caa4 <_fflush_r+0xc>
 800caf0:	4b05      	ldr	r3, [pc, #20]	; (800cb08 <_fflush_r+0x70>)
 800caf2:	429c      	cmp	r4, r3
 800caf4:	d101      	bne.n	800cafa <_fflush_r+0x62>
 800caf6:	68ac      	ldr	r4, [r5, #8]
 800caf8:	e7df      	b.n	800caba <_fflush_r+0x22>
 800cafa:	4b04      	ldr	r3, [pc, #16]	; (800cb0c <_fflush_r+0x74>)
 800cafc:	429c      	cmp	r4, r3
 800cafe:	bf08      	it	eq
 800cb00:	68ec      	ldreq	r4, [r5, #12]
 800cb02:	e7da      	b.n	800caba <_fflush_r+0x22>
 800cb04:	0800cfd8 	.word	0x0800cfd8
 800cb08:	0800cff8 	.word	0x0800cff8
 800cb0c:	0800cfb8 	.word	0x0800cfb8

0800cb10 <_lseek_r>:
 800cb10:	b538      	push	{r3, r4, r5, lr}
 800cb12:	4d07      	ldr	r5, [pc, #28]	; (800cb30 <_lseek_r+0x20>)
 800cb14:	4604      	mov	r4, r0
 800cb16:	4608      	mov	r0, r1
 800cb18:	4611      	mov	r1, r2
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	602a      	str	r2, [r5, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f7f5 f838 	bl	8001b94 <_lseek>
 800cb24:	1c43      	adds	r3, r0, #1
 800cb26:	d102      	bne.n	800cb2e <_lseek_r+0x1e>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	b103      	cbz	r3, 800cb2e <_lseek_r+0x1e>
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	bd38      	pop	{r3, r4, r5, pc}
 800cb30:	2400053c 	.word	0x2400053c

0800cb34 <__swhatbuf_r>:
 800cb34:	b570      	push	{r4, r5, r6, lr}
 800cb36:	460e      	mov	r6, r1
 800cb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb3c:	2900      	cmp	r1, #0
 800cb3e:	b096      	sub	sp, #88	; 0x58
 800cb40:	4614      	mov	r4, r2
 800cb42:	461d      	mov	r5, r3
 800cb44:	da08      	bge.n	800cb58 <__swhatbuf_r+0x24>
 800cb46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	602a      	str	r2, [r5, #0]
 800cb4e:	061a      	lsls	r2, r3, #24
 800cb50:	d410      	bmi.n	800cb74 <__swhatbuf_r+0x40>
 800cb52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb56:	e00e      	b.n	800cb76 <__swhatbuf_r+0x42>
 800cb58:	466a      	mov	r2, sp
 800cb5a:	f000 f8bb 	bl	800ccd4 <_fstat_r>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	dbf1      	blt.n	800cb46 <__swhatbuf_r+0x12>
 800cb62:	9a01      	ldr	r2, [sp, #4]
 800cb64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb6c:	425a      	negs	r2, r3
 800cb6e:	415a      	adcs	r2, r3
 800cb70:	602a      	str	r2, [r5, #0]
 800cb72:	e7ee      	b.n	800cb52 <__swhatbuf_r+0x1e>
 800cb74:	2340      	movs	r3, #64	; 0x40
 800cb76:	2000      	movs	r0, #0
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	b016      	add	sp, #88	; 0x58
 800cb7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb80 <__smakebuf_r>:
 800cb80:	898b      	ldrh	r3, [r1, #12]
 800cb82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb84:	079d      	lsls	r5, r3, #30
 800cb86:	4606      	mov	r6, r0
 800cb88:	460c      	mov	r4, r1
 800cb8a:	d507      	bpl.n	800cb9c <__smakebuf_r+0x1c>
 800cb8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	6123      	str	r3, [r4, #16]
 800cb94:	2301      	movs	r3, #1
 800cb96:	6163      	str	r3, [r4, #20]
 800cb98:	b002      	add	sp, #8
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
 800cb9c:	ab01      	add	r3, sp, #4
 800cb9e:	466a      	mov	r2, sp
 800cba0:	f7ff ffc8 	bl	800cb34 <__swhatbuf_r>
 800cba4:	9900      	ldr	r1, [sp, #0]
 800cba6:	4605      	mov	r5, r0
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f7ff fa57 	bl	800c05c <_malloc_r>
 800cbae:	b948      	cbnz	r0, 800cbc4 <__smakebuf_r+0x44>
 800cbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb4:	059a      	lsls	r2, r3, #22
 800cbb6:	d4ef      	bmi.n	800cb98 <__smakebuf_r+0x18>
 800cbb8:	f023 0303 	bic.w	r3, r3, #3
 800cbbc:	f043 0302 	orr.w	r3, r3, #2
 800cbc0:	81a3      	strh	r3, [r4, #12]
 800cbc2:	e7e3      	b.n	800cb8c <__smakebuf_r+0xc>
 800cbc4:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <__smakebuf_r+0x7c>)
 800cbc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbc8:	89a3      	ldrh	r3, [r4, #12]
 800cbca:	6020      	str	r0, [r4, #0]
 800cbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbd0:	81a3      	strh	r3, [r4, #12]
 800cbd2:	9b00      	ldr	r3, [sp, #0]
 800cbd4:	6163      	str	r3, [r4, #20]
 800cbd6:	9b01      	ldr	r3, [sp, #4]
 800cbd8:	6120      	str	r0, [r4, #16]
 800cbda:	b15b      	cbz	r3, 800cbf4 <__smakebuf_r+0x74>
 800cbdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f000 f889 	bl	800ccf8 <_isatty_r>
 800cbe6:	b128      	cbz	r0, 800cbf4 <__smakebuf_r+0x74>
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	f023 0303 	bic.w	r3, r3, #3
 800cbee:	f043 0301 	orr.w	r3, r3, #1
 800cbf2:	81a3      	strh	r3, [r4, #12]
 800cbf4:	89a0      	ldrh	r0, [r4, #12]
 800cbf6:	4305      	orrs	r5, r0
 800cbf8:	81a5      	strh	r5, [r4, #12]
 800cbfa:	e7cd      	b.n	800cb98 <__smakebuf_r+0x18>
 800cbfc:	0800be75 	.word	0x0800be75

0800cc00 <__malloc_lock>:
 800cc00:	4801      	ldr	r0, [pc, #4]	; (800cc08 <__malloc_lock+0x8>)
 800cc02:	f7ff ba09 	b.w	800c018 <__retarget_lock_acquire_recursive>
 800cc06:	bf00      	nop
 800cc08:	24000530 	.word	0x24000530

0800cc0c <__malloc_unlock>:
 800cc0c:	4801      	ldr	r0, [pc, #4]	; (800cc14 <__malloc_unlock+0x8>)
 800cc0e:	f7ff ba04 	b.w	800c01a <__retarget_lock_release_recursive>
 800cc12:	bf00      	nop
 800cc14:	24000530 	.word	0x24000530

0800cc18 <_free_r>:
 800cc18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc1a:	2900      	cmp	r1, #0
 800cc1c:	d044      	beq.n	800cca8 <_free_r+0x90>
 800cc1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc22:	9001      	str	r0, [sp, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f1a1 0404 	sub.w	r4, r1, #4
 800cc2a:	bfb8      	it	lt
 800cc2c:	18e4      	addlt	r4, r4, r3
 800cc2e:	f7ff ffe7 	bl	800cc00 <__malloc_lock>
 800cc32:	4a1e      	ldr	r2, [pc, #120]	; (800ccac <_free_r+0x94>)
 800cc34:	9801      	ldr	r0, [sp, #4]
 800cc36:	6813      	ldr	r3, [r2, #0]
 800cc38:	b933      	cbnz	r3, 800cc48 <_free_r+0x30>
 800cc3a:	6063      	str	r3, [r4, #4]
 800cc3c:	6014      	str	r4, [r2, #0]
 800cc3e:	b003      	add	sp, #12
 800cc40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc44:	f7ff bfe2 	b.w	800cc0c <__malloc_unlock>
 800cc48:	42a3      	cmp	r3, r4
 800cc4a:	d908      	bls.n	800cc5e <_free_r+0x46>
 800cc4c:	6825      	ldr	r5, [r4, #0]
 800cc4e:	1961      	adds	r1, r4, r5
 800cc50:	428b      	cmp	r3, r1
 800cc52:	bf01      	itttt	eq
 800cc54:	6819      	ldreq	r1, [r3, #0]
 800cc56:	685b      	ldreq	r3, [r3, #4]
 800cc58:	1949      	addeq	r1, r1, r5
 800cc5a:	6021      	streq	r1, [r4, #0]
 800cc5c:	e7ed      	b.n	800cc3a <_free_r+0x22>
 800cc5e:	461a      	mov	r2, r3
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	b10b      	cbz	r3, 800cc68 <_free_r+0x50>
 800cc64:	42a3      	cmp	r3, r4
 800cc66:	d9fa      	bls.n	800cc5e <_free_r+0x46>
 800cc68:	6811      	ldr	r1, [r2, #0]
 800cc6a:	1855      	adds	r5, r2, r1
 800cc6c:	42a5      	cmp	r5, r4
 800cc6e:	d10b      	bne.n	800cc88 <_free_r+0x70>
 800cc70:	6824      	ldr	r4, [r4, #0]
 800cc72:	4421      	add	r1, r4
 800cc74:	1854      	adds	r4, r2, r1
 800cc76:	42a3      	cmp	r3, r4
 800cc78:	6011      	str	r1, [r2, #0]
 800cc7a:	d1e0      	bne.n	800cc3e <_free_r+0x26>
 800cc7c:	681c      	ldr	r4, [r3, #0]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	6053      	str	r3, [r2, #4]
 800cc82:	4421      	add	r1, r4
 800cc84:	6011      	str	r1, [r2, #0]
 800cc86:	e7da      	b.n	800cc3e <_free_r+0x26>
 800cc88:	d902      	bls.n	800cc90 <_free_r+0x78>
 800cc8a:	230c      	movs	r3, #12
 800cc8c:	6003      	str	r3, [r0, #0]
 800cc8e:	e7d6      	b.n	800cc3e <_free_r+0x26>
 800cc90:	6825      	ldr	r5, [r4, #0]
 800cc92:	1961      	adds	r1, r4, r5
 800cc94:	428b      	cmp	r3, r1
 800cc96:	bf04      	itt	eq
 800cc98:	6819      	ldreq	r1, [r3, #0]
 800cc9a:	685b      	ldreq	r3, [r3, #4]
 800cc9c:	6063      	str	r3, [r4, #4]
 800cc9e:	bf04      	itt	eq
 800cca0:	1949      	addeq	r1, r1, r5
 800cca2:	6021      	streq	r1, [r4, #0]
 800cca4:	6054      	str	r4, [r2, #4]
 800cca6:	e7ca      	b.n	800cc3e <_free_r+0x26>
 800cca8:	b003      	add	sp, #12
 800ccaa:	bd30      	pop	{r4, r5, pc}
 800ccac:	24000534 	.word	0x24000534

0800ccb0 <_read_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d07      	ldr	r5, [pc, #28]	; (800ccd0 <_read_r+0x20>)
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	4608      	mov	r0, r1
 800ccb8:	4611      	mov	r1, r2
 800ccba:	2200      	movs	r2, #0
 800ccbc:	602a      	str	r2, [r5, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f7f4 ff24 	bl	8001b0c <_read>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_read_r+0x1e>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_read_r+0x1e>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	2400053c 	.word	0x2400053c

0800ccd4 <_fstat_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4d07      	ldr	r5, [pc, #28]	; (800ccf4 <_fstat_r+0x20>)
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4604      	mov	r4, r0
 800ccdc:	4608      	mov	r0, r1
 800ccde:	4611      	mov	r1, r2
 800cce0:	602b      	str	r3, [r5, #0]
 800cce2:	f7f4 ff3c 	bl	8001b5e <_fstat>
 800cce6:	1c43      	adds	r3, r0, #1
 800cce8:	d102      	bne.n	800ccf0 <_fstat_r+0x1c>
 800ccea:	682b      	ldr	r3, [r5, #0]
 800ccec:	b103      	cbz	r3, 800ccf0 <_fstat_r+0x1c>
 800ccee:	6023      	str	r3, [r4, #0]
 800ccf0:	bd38      	pop	{r3, r4, r5, pc}
 800ccf2:	bf00      	nop
 800ccf4:	2400053c 	.word	0x2400053c

0800ccf8 <_isatty_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d06      	ldr	r5, [pc, #24]	; (800cd14 <_isatty_r+0x1c>)
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4604      	mov	r4, r0
 800cd00:	4608      	mov	r0, r1
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	f7f4 ff3b 	bl	8001b7e <_isatty>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	d102      	bne.n	800cd12 <_isatty_r+0x1a>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	b103      	cbz	r3, 800cd12 <_isatty_r+0x1a>
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	bd38      	pop	{r3, r4, r5, pc}
 800cd14:	2400053c 	.word	0x2400053c

0800cd18 <_init>:
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	bf00      	nop
 800cd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd1e:	bc08      	pop	{r3}
 800cd20:	469e      	mov	lr, r3
 800cd22:	4770      	bx	lr

0800cd24 <_fini>:
 800cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd26:	bf00      	nop
 800cd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd2a:	bc08      	pop	{r3}
 800cd2c:	469e      	mov	lr, r3
 800cd2e:	4770      	bx	lr
